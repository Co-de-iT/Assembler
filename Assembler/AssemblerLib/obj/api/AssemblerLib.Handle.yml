### YamlMime:ManagedReference
items:
- uid: AssemblerLib.Handle
  commentId: T:AssemblerLib.Handle
  id: Handle
  parent: AssemblerLib
  children:
  - AssemblerLib.Handle.#ctor(Rhino.Geometry.Plane,System.Int32,System.Double,System.Collections.Generic.List{System.Double})
  - AssemblerLib.Handle.#ctor(Rhino.Geometry.Polyline,System.Int32,System.Double,System.Collections.Generic.List{System.Double})
  - AssemblerLib.Handle.neighbourHandle
  - AssemblerLib.Handle.neighbourObject
  - AssemblerLib.Handle.occupancy
  - AssemblerLib.Handle.rDictionary
  - AssemblerLib.Handle.receivers
  - AssemblerLib.Handle.rRotations
  - AssemblerLib.Handle.sender
  - AssemblerLib.Handle.ToString
  - AssemblerLib.Handle.Transform(Rhino.Geometry.Transform)
  - AssemblerLib.Handle.type
  - AssemblerLib.Handle.weight
  langs:
  - csharp
  - vb
  name: Handle
  nameWithType: Handle
  fullName: AssemblerLib.Handle
  type: Struct
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: Handle
    path: Handle.cs
    startLine: 9
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nHandle structure for connection handles\n"
  example: []
  syntax:
    content: public struct Handle
    content.vb: Public Structure Handle
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: AssemblerLib.Handle.sender
  commentId: F:AssemblerLib.Handle.sender
  id: sender
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: sender
  nameWithType: Handle.sender
  fullName: AssemblerLib.Handle.sender
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: sender
    path: Handle.cs
    startLine: 14
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nSender plane\n"
  example: []
  syntax:
    content: public Plane sender
    return:
      type: Rhino.Geometry.Plane
    content.vb: Public sender As Plane
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Handle.receivers
  commentId: F:AssemblerLib.Handle.receivers
  id: receivers
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: receivers
  nameWithType: Handle.receivers
  fullName: AssemblerLib.Handle.receivers
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: receivers
    path: Handle.cs
    startLine: 18
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nReceiver planes\n"
  example: []
  syntax:
    content: public Plane[] receivers
    return:
      type: Rhino.Geometry.Plane[]
    content.vb: Public receivers As Plane()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Handle.type
  commentId: F:AssemblerLib.Handle.type
  id: type
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: type
  nameWithType: Handle.type
  fullName: AssemblerLib.Handle.type
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: type
    path: Handle.cs
    startLine: 22
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nHandle type identifier\n"
  example: []
  syntax:
    content: public int type
    return:
      type: System.Int32
    content.vb: Public type As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Handle.rRotations
  commentId: F:AssemblerLib.Handle.rRotations
  id: rRotations
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: rRotations
  nameWithType: Handle.rRotations
  fullName: AssemblerLib.Handle.rRotations
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: rRotations
    path: Handle.cs
    startLine: 26
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nReceiver rotations\n"
  example: []
  syntax:
    content: public double[] rRotations
    return:
      type: System.Double[]
    content.vb: Public rRotations As Double()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Handle.rDictionary
  commentId: F:AssemblerLib.Handle.rDictionary
  id: rDictionary
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: rDictionary
  nameWithType: Handle.rDictionary
  fullName: AssemblerLib.Handle.rDictionary
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: rDictionary
    path: Handle.cs
    startLine: 30
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nRotations dictionary (degrees, index)\n"
  example: []
  syntax:
    content: public Dictionary<double, int> rDictionary
    return:
      type: System.Collections.Generic.Dictionary{System.Double,System.Int32}
    content.vb: Public rDictionary As Dictionary(Of Double, Integer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Handle.weight
  commentId: F:AssemblerLib.Handle.weight
  id: weight
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: weight
  nameWithType: Handle.weight
  fullName: AssemblerLib.Handle.weight
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: weight
    path: Handle.cs
    startLine: 34
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nWeight\n"
  example: []
  syntax:
    content: public double weight
    return:
      type: System.Double
    content.vb: Public weight As Double
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Handle.occupancy
  commentId: F:AssemblerLib.Handle.occupancy
  id: occupancy
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: occupancy
  nameWithType: Handle.occupancy
  fullName: AssemblerLib.Handle.occupancy
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: occupancy
    path: Handle.cs
    startLine: 43
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nOccupancy status\n<ul><li></li><li></li><li></li></ul>\n"
  example: []
  syntax:
    content: public int occupancy
    return:
      type: System.Int32
    content.vb: Public occupancy As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Handle.neighbourObject
  commentId: F:AssemblerLib.Handle.neighbourObject
  id: neighbourObject
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: neighbourObject
  nameWithType: Handle.neighbourObject
  fullName: AssemblerLib.Handle.neighbourObject
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: neighbourObject
    path: Handle.cs
    startLine: 51
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nNeighbour object index\n<ul><li></li><li></li></ul>\n"
  example: []
  syntax:
    content: public int neighbourObject
    return:
      type: System.Int32
    content.vb: Public neighbourObject As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Handle.neighbourHandle
  commentId: F:AssemblerLib.Handle.neighbourHandle
  id: neighbourHandle
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: neighbourHandle
  nameWithType: Handle.neighbourHandle
  fullName: AssemblerLib.Handle.neighbourHandle
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: neighbourHandle
    path: Handle.cs
    startLine: 59
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nNeighbour handle index\n<ul><li></li><li></li></ul>\n"
  example: []
  syntax:
    content: public int neighbourHandle
    return:
      type: System.Int32
    content.vb: Public neighbourHandle As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Handle.#ctor(Rhino.Geometry.Polyline,System.Int32,System.Double,System.Collections.Generic.List{System.Double})
  commentId: M:AssemblerLib.Handle.#ctor(Rhino.Geometry.Polyline,System.Int32,System.Double,System.Collections.Generic.List{System.Double})
  id: '#ctor(Rhino.Geometry.Polyline,System.Int32,System.Double,System.Collections.Generic.List{System.Double})'
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: Handle(Polyline, Int32, Double, List<Double>)
  nameWithType: Handle.Handle(Polyline, Int32, Double, List<Double>)
  fullName: AssemblerLib.Handle.Handle(Rhino.Geometry.Polyline, System.Int32, System.Double, System.Collections.Generic.List<System.Double>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: .ctor
    path: Handle.cs
    startLine: 68
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nBuilds a Handle from an L-shaped polyline, Handle type and List of rotations\n"
  example: []
  syntax:
    content: public Handle(Polyline poly, int type, double weight, List<double> rotations)
    parameters:
    - id: poly
      type: Rhino.Geometry.Polyline
      description: ''
    - id: type
      type: System.Int32
      description: ''
    - id: weight
      type: System.Double
      description: ''
    - id: rotations
      type: System.Collections.Generic.List{System.Double}
      description: ''
    content.vb: Public Sub New(poly As Polyline, type As Integer, weight As Double, rotations As List(Of Double))
  overload: AssemblerLib.Handle.#ctor*
  nameWithType.vb: Handle.Handle(Polyline, Int32, Double, List(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Handle.Handle(Rhino.Geometry.Polyline, System.Int32, System.Double, System.Collections.Generic.List(Of System.Double))
  name.vb: Handle(Polyline, Int32, Double, List(Of Double))
- uid: AssemblerLib.Handle.#ctor(Rhino.Geometry.Plane,System.Int32,System.Double,System.Collections.Generic.List{System.Double})
  commentId: M:AssemblerLib.Handle.#ctor(Rhino.Geometry.Plane,System.Int32,System.Double,System.Collections.Generic.List{System.Double})
  id: '#ctor(Rhino.Geometry.Plane,System.Int32,System.Double,System.Collections.Generic.List{System.Double})'
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: Handle(Plane, Int32, Double, List<Double>)
  nameWithType: Handle.Handle(Plane, Int32, Double, List<Double>)
  fullName: AssemblerLib.Handle.Handle(Rhino.Geometry.Plane, System.Int32, System.Double, System.Collections.Generic.List<System.Double>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: .ctor
    path: Handle.cs
    startLine: 78
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nBuilds a Handle from constituting parameters\n"
  example: []
  syntax:
    content: public Handle(Plane plane, int type, double weight, List<double> rotations)
    parameters:
    - id: plane
      type: Rhino.Geometry.Plane
      description: The base (sender) <xref href="Rhino.Geometry.Plane" data-throw-if-not-resolved="false"></xref> for the Handle
    - id: type
      type: System.Int32
      description: The Handle type
    - id: weight
      type: System.Double
      description: The Handle weight
    - id: rotations
      type: System.Collections.Generic.List{System.Double}
      description: List of rotation angles in receiver mode
    content.vb: Public Sub New(plane As Plane, type As Integer, weight As Double, rotations As List(Of Double))
  overload: AssemblerLib.Handle.#ctor*
  nameWithType.vb: Handle.Handle(Plane, Int32, Double, List(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Handle.Handle(Rhino.Geometry.Plane, System.Int32, System.Double, System.Collections.Generic.List(Of System.Double))
  name.vb: Handle(Plane, Int32, Double, List(Of Double))
- uid: AssemblerLib.Handle.Transform(Rhino.Geometry.Transform)
  commentId: M:AssemblerLib.Handle.Transform(Rhino.Geometry.Transform)
  id: Transform(Rhino.Geometry.Transform)
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: Transform(Transform)
  nameWithType: Handle.Transform(Transform)
  fullName: AssemblerLib.Handle.Transform(Rhino.Geometry.Transform)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: Transform
    path: Handle.cs
    startLine: 107
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nTransform handle using a generic Transformation\n"
  example: []
  syntax:
    content: public void Transform(Transform Xform)
    parameters:
    - id: Xform
      type: Rhino.Geometry.Transform
      description: Transformation to apply
    content.vb: Public Sub Transform(Xform As Transform)
  overload: AssemblerLib.Handle.Transform*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Handle.ToString
  commentId: M:AssemblerLib.Handle.ToString
  id: ToString
  parent: AssemblerLib.Handle
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Handle.ToString()
  fullName: AssemblerLib.Handle.ToString()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
    id: ToString
    path: Handle.cs
    startLine: 114
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: AssemblerLib.Handle.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: AssemblerLib
  commentId: N:AssemblerLib
  name: AssemblerLib
  nameWithType: AssemblerLib
  fullName: AssemblerLib
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Rhino.Geometry.Plane
  commentId: T:Rhino.Geometry.Plane
  parent: Rhino.Geometry
  isExternal: true
  name: Plane
  nameWithType: Plane
  fullName: Rhino.Geometry.Plane
- uid: Rhino.Geometry
  commentId: N:Rhino.Geometry
  isExternal: true
  name: Rhino.Geometry
  nameWithType: Rhino.Geometry
  fullName: Rhino.Geometry
- uid: Rhino.Geometry.Plane[]
  isExternal: true
  name: Plane[]
  nameWithType: Plane[]
  fullName: Rhino.Geometry.Plane[]
  nameWithType.vb: Plane()
  fullName.vb: Rhino.Geometry.Plane()
  name.vb: Plane()
  spec.csharp:
  - uid: Rhino.Geometry.Plane
    name: Plane
    nameWithType: Plane
    fullName: Rhino.Geometry.Plane
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Rhino.Geometry.Plane
    name: Plane
    nameWithType: Plane
    fullName: Rhino.Geometry.Plane
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.Dictionary{System.Double,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.Double,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Double, Int32>
  nameWithType: Dictionary<Double, Int32>
  fullName: System.Collections.Generic.Dictionary<System.Double, System.Int32>
  nameWithType.vb: Dictionary(Of Double, Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Double, System.Int32)
  name.vb: Dictionary(Of Double, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: AssemblerLib.Handle.#ctor*
  commentId: Overload:AssemblerLib.Handle.#ctor
  name: Handle
  nameWithType: Handle.Handle
  fullName: AssemblerLib.Handle.Handle
- uid: Rhino.Geometry.Polyline
  commentId: T:Rhino.Geometry.Polyline
  parent: Rhino.Geometry
  isExternal: true
  name: Polyline
  nameWithType: Polyline
  fullName: Rhino.Geometry.Polyline
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Handle.Transform*
  commentId: Overload:AssemblerLib.Handle.Transform
  name: Transform
  nameWithType: Handle.Transform
  fullName: AssemblerLib.Handle.Transform
- uid: Rhino.Geometry.Transform
  commentId: T:Rhino.Geometry.Transform
  parent: Rhino.Geometry
  isExternal: true
  name: Transform
  nameWithType: Transform
  fullName: Rhino.Geometry.Transform
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Handle.ToString*
  commentId: Overload:AssemblerLib.Handle.ToString
  name: ToString
  nameWithType: Handle.ToString
  fullName: AssemblerLib.Handle.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
