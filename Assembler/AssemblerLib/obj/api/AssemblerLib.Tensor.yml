### YamlMime:ManagedReference
items:
- uid: AssemblerLib.Tensor
  commentId: T:AssemblerLib.Tensor
  id: Tensor
  parent: AssemblerLib
  children:
  - AssemblerLib.Tensor.#ctor(Rhino.Geometry.Vector3d[])
  - AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  - AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double})
  - AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  - AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Collections.Generic.List{System.Int32})
  - AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Int32[])
  - AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Int32})
  - AssemblerLib.Tensor.#ctor(System.Double[])
  - AssemblerLib.Tensor.#ctor(System.Double[],Rhino.Geometry.Vector3d[])
  - AssemblerLib.Tensor.#ctor(System.Double[],Rhino.Geometry.Vector3d[],System.Int32[])
  - AssemblerLib.Tensor.#ctor(System.Int32[])
  - AssemblerLib.Tensor.GetScalar
  - AssemblerLib.Tensor.GetScalars
  - AssemblerLib.Tensor.GetVector
  - AssemblerLib.Tensor.GetVectors
  - AssemblerLib.Tensor.iWeights
  - AssemblerLib.Tensor.op_Addition(AssemblerLib.Tensor,AssemblerLib.Tensor)
  - AssemblerLib.Tensor.op_Subtraction(AssemblerLib.Tensor,AssemblerLib.Tensor)
  - AssemblerLib.Tensor.scalar
  - AssemblerLib.Tensor.vector
  langs:
  - csharp
  - vb
  name: Tensor
  nameWithType: Tensor
  fullName: AssemblerLib.Tensor
  type: Class
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: Tensor
    path: Tensor.cs
    startLine: 8
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nStores a lists of scalar, vector and integer weights values\n"
  example: []
  syntax:
    content: public class Tensor
    content.vb: Public Class Tensor
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AssemblerLib.Tensor.scalar
  commentId: F:AssemblerLib.Tensor.scalar
  id: scalar
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: scalar
  nameWithType: Tensor.scalar
  fullName: AssemblerLib.Tensor.scalar
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: scalar
    path: Tensor.cs
    startLine: 14
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nArray of scalar values\n"
  example: []
  syntax:
    content: public double[] scalar
    return:
      type: System.Double[]
    content.vb: Public scalar As Double()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Tensor.vector
  commentId: F:AssemblerLib.Tensor.vector
  id: vector
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: vector
  nameWithType: Tensor.vector
  fullName: AssemblerLib.Tensor.vector
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: vector
    path: Tensor.cs
    startLine: 18
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nArray of Vector values\n"
  example: []
  syntax:
    content: public Vector3d[] vector
    return:
      type: Rhino.Geometry.Vector3d[]
    content.vb: Public vector As Vector3d()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Tensor.iWeights
  commentId: F:AssemblerLib.Tensor.iWeights
  id: iWeights
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: iWeights
  nameWithType: Tensor.iWeights
  fullName: AssemblerLib.Tensor.iWeights
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: iWeights
    path: Tensor.cs
    startLine: 22
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nArray of integer weights\n"
  example: []
  syntax:
    content: public int[] iWeights
    return:
      type: System.Int32[]
    content.vb: Public iWeights As Integer()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Tensor.#ctor(System.Double[],Rhino.Geometry.Vector3d[],System.Int32[])
  commentId: M:AssemblerLib.Tensor.#ctor(System.Double[],Rhino.Geometry.Vector3d[],System.Int32[])
  id: '#ctor(System.Double[],Rhino.Geometry.Vector3d[],System.Int32[])'
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Tensor(Double[], Vector3d[], Int32[])
  nameWithType: Tensor.Tensor(Double[], Vector3d[], Int32[])
  fullName: AssemblerLib.Tensor.Tensor(System.Double[], Rhino.Geometry.Vector3d[], System.Int32[])
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: .ctor
    path: Tensor.cs
    startLine: 36
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConstructs a Tensor from constituting parameters\n"
  example: []
  syntax:
    content: public Tensor(double[] scalar, Vector3d[] vector, int[] iWeights)
    parameters:
    - id: scalar
      type: System.Double[]
      description: ''
    - id: vector
      type: Rhino.Geometry.Vector3d[]
      description: ''
    - id: iWeights
      type: System.Int32[]
      description: ''
    content.vb: Public Sub New(scalar As Double(), vector As Vector3d(), iWeights As Integer())
  overload: AssemblerLib.Tensor.#ctor*
  nameWithType.vb: Tensor.Tensor(Double(), Vector3d(), Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Tensor.Tensor(System.Double(), Rhino.Geometry.Vector3d(), System.Int32())
  name.vb: Tensor(Double(), Vector3d(), Int32())
- uid: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Int32[])
  commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Int32[])
  id: '#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Int32[])'
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Tensor(List<Double>, List<Vector3d>, Int32[])
  nameWithType: Tensor.Tensor(List<Double>, List<Vector3d>, Int32[])
  fullName: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>, System.Int32[])
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: .ctor
    path: Tensor.cs
    startLine: 49
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public Tensor(List<double> scalar, List<Vector3d> vector, int[] iWeights)
    parameters:
    - id: scalar
      type: System.Collections.Generic.List{System.Double}
      description: ''
    - id: vector
      type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
      description: ''
    - id: iWeights
      type: System.Int32[]
      description: ''
    content.vb: Public Sub New(scalar As List(Of Double), vector As List(Of Vector3d), iWeights As Integer())
  overload: AssemblerLib.Tensor.#ctor*
  nameWithType.vb: Tensor.Tensor(List(Of Double), List(Of Vector3d), Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d), System.Int32())
  name.vb: Tensor(List(Of Double), List(Of Vector3d), Int32())
- uid: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Collections.Generic.List{System.Int32})
  commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Collections.Generic.List{System.Int32})
  id: '#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Collections.Generic.List{System.Int32})'
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Tensor(List<Double>, List<Vector3d>, List<Int32>)
  nameWithType: Tensor.Tensor(List<Double>, List<Vector3d>, List<Int32>)
  fullName: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>, System.Collections.Generic.List<System.Int32>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: .ctor
    path: Tensor.cs
    startLine: 58
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public Tensor(List<double> scalar, List<Vector3d> vector, List<int> iWeights)
    parameters:
    - id: scalar
      type: System.Collections.Generic.List{System.Double}
      description: ''
    - id: vector
      type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
      description: ''
    - id: iWeights
      type: System.Collections.Generic.List{System.Int32}
      description: ''
    content.vb: Public Sub New(scalar As List(Of Double), vector As List(Of Vector3d), iWeights As List(Of Integer))
  overload: AssemblerLib.Tensor.#ctor*
  nameWithType.vb: Tensor.Tensor(List(Of Double), List(Of Vector3d), List(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d), System.Collections.Generic.List(Of System.Int32))
  name.vb: Tensor(List(Of Double), List(Of Vector3d), List(Of Int32))
- uid: AssemblerLib.Tensor.#ctor(System.Double[],Rhino.Geometry.Vector3d[])
  commentId: M:AssemblerLib.Tensor.#ctor(System.Double[],Rhino.Geometry.Vector3d[])
  id: '#ctor(System.Double[],Rhino.Geometry.Vector3d[])'
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Tensor(Double[], Vector3d[])
  nameWithType: Tensor.Tensor(Double[], Vector3d[])
  fullName: AssemblerLib.Tensor.Tensor(System.Double[], Rhino.Geometry.Vector3d[])
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: .ctor
    path: Tensor.cs
    startLine: 66
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public Tensor(double[] scalar, Vector3d[] vector)
    parameters:
    - id: scalar
      type: System.Double[]
      description: ''
    - id: vector
      type: Rhino.Geometry.Vector3d[]
      description: ''
    content.vb: Public Sub New(scalar As Double(), vector As Vector3d())
  overload: AssemblerLib.Tensor.#ctor*
  nameWithType.vb: Tensor.Tensor(Double(), Vector3d())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Tensor.Tensor(System.Double(), Rhino.Geometry.Vector3d())
  name.vb: Tensor(Double(), Vector3d())
- uid: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  id: '#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})'
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Tensor(List<Double>, List<Vector3d>)
  nameWithType: Tensor.Tensor(List<Double>, List<Vector3d>)
  fullName: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: .ctor
    path: Tensor.cs
    startLine: 77
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public Tensor(List<double> scalar, List<Vector3d> vector)
    parameters:
    - id: scalar
      type: System.Collections.Generic.List{System.Double}
      description: ''
    - id: vector
      type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
      description: ''
    content.vb: Public Sub New(scalar As List(Of Double), vector As List(Of Vector3d))
  overload: AssemblerLib.Tensor.#ctor*
  nameWithType.vb: Tensor.Tensor(List(Of Double), List(Of Vector3d))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
  name.vb: Tensor(List(Of Double), List(Of Vector3d))
- uid: AssemblerLib.Tensor.#ctor(System.Double[])
  commentId: M:AssemblerLib.Tensor.#ctor(System.Double[])
  id: '#ctor(System.Double[])'
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Tensor(Double[])
  nameWithType: Tensor.Tensor(Double[])
  fullName: AssemblerLib.Tensor.Tensor(System.Double[])
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: .ctor
    path: Tensor.cs
    startLine: 84
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public Tensor(double[] scalar)
    parameters:
    - id: scalar
      type: System.Double[]
      description: ''
    content.vb: Public Sub New(scalar As Double())
  overload: AssemblerLib.Tensor.#ctor*
  nameWithType.vb: Tensor.Tensor(Double())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Tensor.Tensor(System.Double())
  name.vb: Tensor(Double())
- uid: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double})
  commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double})
  id: '#ctor(System.Collections.Generic.List{System.Double})'
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Tensor(List<Double>)
  nameWithType: Tensor.Tensor(List<Double>)
  fullName: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<System.Double>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: .ctor
    path: Tensor.cs
    startLine: 93
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public Tensor(List<double> scalar)
    parameters:
    - id: scalar
      type: System.Collections.Generic.List{System.Double}
      description: ''
    content.vb: Public Sub New(scalar As List(Of Double))
  overload: AssemblerLib.Tensor.#ctor*
  nameWithType.vb: Tensor.Tensor(List(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of System.Double))
  name.vb: Tensor(List(Of Double))
- uid: AssemblerLib.Tensor.#ctor(Rhino.Geometry.Vector3d[])
  commentId: M:AssemblerLib.Tensor.#ctor(Rhino.Geometry.Vector3d[])
  id: '#ctor(Rhino.Geometry.Vector3d[])'
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Tensor(Vector3d[])
  nameWithType: Tensor.Tensor(Vector3d[])
  fullName: AssemblerLib.Tensor.Tensor(Rhino.Geometry.Vector3d[])
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: .ctor
    path: Tensor.cs
    startLine: 100
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public Tensor(Vector3d[] vector)
    parameters:
    - id: vector
      type: Rhino.Geometry.Vector3d[]
      description: ''
    content.vb: Public Sub New(vector As Vector3d())
  overload: AssemblerLib.Tensor.#ctor*
  nameWithType.vb: Tensor.Tensor(Vector3d())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Tensor.Tensor(Rhino.Geometry.Vector3d())
  name.vb: Tensor(Vector3d())
- uid: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  id: '#ctor(System.Collections.Generic.List{Rhino.Geometry.Vector3d})'
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Tensor(List<Vector3d>)
  nameWithType: Tensor.Tensor(List<Vector3d>)
  fullName: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: .ctor
    path: Tensor.cs
    startLine: 109
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public Tensor(List<Vector3d> vector)
    parameters:
    - id: vector
      type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
      description: ''
    content.vb: Public Sub New(vector As List(Of Vector3d))
  overload: AssemblerLib.Tensor.#ctor*
  nameWithType.vb: Tensor.Tensor(List(Of Vector3d))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
  name.vb: Tensor(List(Of Vector3d))
- uid: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Int32})
  commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Int32})
  id: '#ctor(System.Collections.Generic.List{System.Int32})'
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Tensor(List<Int32>)
  nameWithType: Tensor.Tensor(List<Int32>)
  fullName: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<System.Int32>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: .ctor
    path: Tensor.cs
    startLine: 116
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public Tensor(List<int> iWeights)
    parameters:
    - id: iWeights
      type: System.Collections.Generic.List{System.Int32}
      description: ''
    content.vb: Public Sub New(iWeights As List(Of Integer))
  overload: AssemblerLib.Tensor.#ctor*
  nameWithType.vb: Tensor.Tensor(List(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of System.Int32))
  name.vb: Tensor(List(Of Int32))
- uid: AssemblerLib.Tensor.#ctor(System.Int32[])
  commentId: M:AssemblerLib.Tensor.#ctor(System.Int32[])
  id: '#ctor(System.Int32[])'
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Tensor(Int32[])
  nameWithType: Tensor.Tensor(Int32[])
  fullName: AssemblerLib.Tensor.Tensor(System.Int32[])
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: .ctor
    path: Tensor.cs
    startLine: 125
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public Tensor(int[] iWeights)
    parameters:
    - id: iWeights
      type: System.Int32[]
      description: ''
    content.vb: Public Sub New(iWeights As Integer())
  overload: AssemblerLib.Tensor.#ctor*
  nameWithType.vb: Tensor.Tensor(Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Tensor.Tensor(System.Int32())
  name.vb: Tensor(Int32())
- uid: AssemblerLib.Tensor.GetScalar
  commentId: M:AssemblerLib.Tensor.GetScalar
  id: GetScalar
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: GetScalar()
  nameWithType: Tensor.GetScalar()
  fullName: AssemblerLib.Tensor.GetScalar()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: GetScalar
    path: Tensor.cs
    startLine: 134
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets first scalar value\n"
  example: []
  syntax:
    content: public double GetScalar()
    return:
      type: System.Double
      description: ''
    content.vb: Public Function GetScalar As Double
  overload: AssemblerLib.Tensor.GetScalar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Tensor.GetVector
  commentId: M:AssemblerLib.Tensor.GetVector
  id: GetVector
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: GetVector()
  nameWithType: Tensor.GetVector()
  fullName: AssemblerLib.Tensor.GetVector()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: GetVector
    path: Tensor.cs
    startLine: 143
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets first Vector value\n"
  example: []
  syntax:
    content: public Vector3d GetVector()
    return:
      type: Rhino.Geometry.Vector3d
      description: ''
    content.vb: Public Function GetVector As Vector3d
  overload: AssemblerLib.Tensor.GetVector*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Tensor.GetScalars
  commentId: M:AssemblerLib.Tensor.GetScalars
  id: GetScalars
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: GetScalars()
  nameWithType: Tensor.GetScalars()
  fullName: AssemblerLib.Tensor.GetScalars()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: GetScalars
    path: Tensor.cs
    startLine: 152
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public double[] GetScalars()
    return:
      type: System.Double[]
      description: ''
    content.vb: Public Function GetScalars As Double()
  overload: AssemblerLib.Tensor.GetScalars*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Tensor.GetVectors
  commentId: M:AssemblerLib.Tensor.GetVectors
  id: GetVectors
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: GetVectors()
  nameWithType: Tensor.GetVectors()
  fullName: AssemblerLib.Tensor.GetVectors()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: GetVectors
    path: Tensor.cs
    startLine: 161
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\n\n"
  example: []
  syntax:
    content: public Vector3d[] GetVectors()
    return:
      type: Rhino.Geometry.Vector3d[]
      description: ''
    content.vb: Public Function GetVectors As Vector3d()
  overload: AssemblerLib.Tensor.GetVectors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Tensor.op_Addition(AssemblerLib.Tensor,AssemblerLib.Tensor)
  commentId: M:AssemblerLib.Tensor.op_Addition(AssemblerLib.Tensor,AssemblerLib.Tensor)
  id: op_Addition(AssemblerLib.Tensor,AssemblerLib.Tensor)
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Addition(Tensor, Tensor)
  nameWithType: Tensor.Addition(Tensor, Tensor)
  fullName: AssemblerLib.Tensor.Addition(AssemblerLib.Tensor, AssemblerLib.Tensor)
  type: Operator
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: op_Addition
    path: Tensor.cs
    startLine: 172
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nOperator + for Tensor\n"
  example: []
  syntax:
    content: public static Tensor operator +(Tensor a, Tensor b)
    parameters:
    - id: a
      type: AssemblerLib.Tensor
      description: First Tensor operand
    - id: b
      type: AssemblerLib.Tensor
      description: Second Tensor operand
    return:
      type: AssemblerLib.Tensor
      description: Tensor which is the sum of the two Tensor operands
    content.vb: Public Shared Operator +(a As Tensor, b As Tensor) As Tensor
  overload: AssemblerLib.Tensor.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Tensor.op_Subtraction(AssemblerLib.Tensor,AssemblerLib.Tensor)
  commentId: M:AssemblerLib.Tensor.op_Subtraction(AssemblerLib.Tensor,AssemblerLib.Tensor)
  id: op_Subtraction(AssemblerLib.Tensor,AssemblerLib.Tensor)
  parent: AssemblerLib.Tensor
  langs:
  - csharp
  - vb
  name: Subtraction(Tensor, Tensor)
  nameWithType: Tensor.Subtraction(Tensor, Tensor)
  fullName: AssemblerLib.Tensor.Subtraction(AssemblerLib.Tensor, AssemblerLib.Tensor)
  type: Operator
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
    id: op_Subtraction
    path: Tensor.cs
    startLine: 203
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nOperator - for Tensor\n"
  example: []
  syntax:
    content: public static Tensor operator -(Tensor a, Tensor b)
    parameters:
    - id: a
      type: AssemblerLib.Tensor
      description: First Tensor operand
    - id: b
      type: AssemblerLib.Tensor
      description: Second Tensor operand
    return:
      type: AssemblerLib.Tensor
      description: Tensor which is the difference of the two Tensor operands
    content.vb: Public Shared Operator -(a As Tensor, b As Tensor) As Tensor
  overload: AssemblerLib.Tensor.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AssemblerLib
  commentId: N:AssemblerLib
  name: AssemblerLib
  nameWithType: AssemblerLib
  fullName: AssemblerLib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Rhino.Geometry.Vector3d[]
  isExternal: true
  name: Vector3d[]
  nameWithType: Vector3d[]
  fullName: Rhino.Geometry.Vector3d[]
  nameWithType.vb: Vector3d()
  fullName.vb: Rhino.Geometry.Vector3d()
  name.vb: Vector3d()
  spec.csharp:
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AssemblerLib.Tensor.#ctor*
  commentId: Overload:AssemblerLib.Tensor.#ctor
  name: Tensor
  nameWithType: Tensor.Tensor
  fullName: AssemblerLib.Tensor.Tensor
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
  commentId: T:System.Collections.Generic.List{Rhino.Geometry.Vector3d}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3d>
  nameWithType: List<Vector3d>
  fullName: System.Collections.Generic.List<Rhino.Geometry.Vector3d>
  nameWithType.vb: List(Of Vector3d)
  fullName.vb: System.Collections.Generic.List(Of Rhino.Geometry.Vector3d)
  name.vb: List(Of Vector3d)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Tensor.GetScalar*
  commentId: Overload:AssemblerLib.Tensor.GetScalar
  name: GetScalar
  nameWithType: Tensor.GetScalar
  fullName: AssemblerLib.Tensor.GetScalar
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: AssemblerLib.Tensor.GetVector*
  commentId: Overload:AssemblerLib.Tensor.GetVector
  name: GetVector
  nameWithType: Tensor.GetVector
  fullName: AssemblerLib.Tensor.GetVector
- uid: Rhino.Geometry.Vector3d
  commentId: T:Rhino.Geometry.Vector3d
  parent: Rhino.Geometry
  isExternal: true
  name: Vector3d
  nameWithType: Vector3d
  fullName: Rhino.Geometry.Vector3d
- uid: Rhino.Geometry
  commentId: N:Rhino.Geometry
  isExternal: true
  name: Rhino.Geometry
  nameWithType: Rhino.Geometry
  fullName: Rhino.Geometry
- uid: AssemblerLib.Tensor.GetScalars*
  commentId: Overload:AssemblerLib.Tensor.GetScalars
  name: GetScalars
  nameWithType: Tensor.GetScalars
  fullName: AssemblerLib.Tensor.GetScalars
- uid: AssemblerLib.Tensor.GetVectors*
  commentId: Overload:AssemblerLib.Tensor.GetVectors
  name: GetVectors
  nameWithType: Tensor.GetVectors
  fullName: AssemblerLib.Tensor.GetVectors
- uid: AssemblerLib.Tensor.op_Addition*
  commentId: Overload:AssemblerLib.Tensor.op_Addition
  name: Addition
  nameWithType: Tensor.Addition
  fullName: AssemblerLib.Tensor.Addition
- uid: AssemblerLib.Tensor
  commentId: T:AssemblerLib.Tensor
  parent: AssemblerLib
  name: Tensor
  nameWithType: Tensor
  fullName: AssemblerLib.Tensor
- uid: AssemblerLib.Tensor.op_Subtraction*
  commentId: Overload:AssemblerLib.Tensor.op_Subtraction
  name: Subtraction
  nameWithType: Tensor.Subtraction
  fullName: AssemblerLib.Tensor.Subtraction
