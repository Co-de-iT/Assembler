### YamlMime:ManagedReference
items:
- uid: AssemblerLib.Field
  commentId: T:AssemblerLib.Field
  id: Field
  parent: AssemblerLib
  children:
  - AssemblerLib.Field.#ctor(AssemblerLib.Field)
  - AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Double)
  - AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Double,System.Double,System.Double)
  - AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Int32)
  - AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Int32,System.Int32,System.Int32)
  - AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})
  - AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  - AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  - AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  - AssemblerLib.Field.colors
  - AssemblerLib.Field.DistributeiWeights(Grasshopper.DataTree{System.Int32},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
  - AssemblerLib.Field.DistributeiWeightsScalar(Grasshopper.DataTree{System.Int32},System.Double,System.Int32,System.Boolean)
  - AssemblerLib.Field.GenerateColorsByAttractors(System.Collections.Generic.List{System.Drawing.Color},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
  - AssemblerLib.Field.GenerateScalarColors(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Double,System.Boolean)
  - AssemblerLib.Field.GetClosestIndex(Rhino.Geometry.Point3d)
  - AssemblerLib.Field.GetClosestiWeights(Rhino.Geometry.Point3d)
  - AssemblerLib.Field.GetClosestScalar(Rhino.Geometry.Point3d)
  - AssemblerLib.Field.GetClosestScalars(Rhino.Geometry.Point3d)
  - AssemblerLib.Field.GetClosestVector(Rhino.Geometry.Point3d)
  - AssemblerLib.Field.GetClosestVectors(Rhino.Geometry.Point3d)
  - AssemblerLib.Field.GetGH_iWeights
  - AssemblerLib.Field.GetGH_Points
  - AssemblerLib.Field.GetGH_Scalars
  - AssemblerLib.Field.GetGH_Vectors
  - AssemblerLib.Field.GetInterpolatedScalar(Rhino.Geometry.Point3d)
  - AssemblerLib.Field.GetInterpolatedVector(Rhino.Geometry.Point3d)
  - AssemblerLib.Field.GetiWeights
  - AssemblerLib.Field.GetiWeights(System.Int32)
  - AssemblerLib.Field.GetNeighbourIndexes(Rhino.Geometry.Point3d)
  - AssemblerLib.Field.GetNeighbourScalars(Rhino.Geometry.Point3d)
  - AssemblerLib.Field.GetNeighbourVectors(Rhino.Geometry.Point3d)
  - AssemblerLib.Field.GetPoints
  - AssemblerLib.Field.GetScalar(System.Int32)
  - AssemblerLib.Field.GetScalars
  - AssemblerLib.Field.GetScalars(System.Int32)
  - AssemblerLib.Field.GetVector(System.Int32)
  - AssemblerLib.Field.GetVectors
  - AssemblerLib.Field.GetVectors(System.Int32)
  - AssemblerLib.Field.PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})
  - AssemblerLib.Field.PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  - AssemblerLib.Field.PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  - AssemblerLib.Field.PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  - AssemblerLib.Field.PopulateiWeights(Grasshopper.DataTree{System.Int32})
  - AssemblerLib.Field.PopulateiWeights(System.Collections.Generic.List{System.Int32})
  - AssemblerLib.Field.PopulateScalars(Grasshopper.DataTree{System.Double})
  - AssemblerLib.Field.PopulateScalars(System.Collections.Generic.List{System.Double})
  - AssemblerLib.Field.PopulateVectors(Grasshopper.DataTree{Rhino.Geometry.Vector3d})
  - AssemblerLib.Field.PopulateVectors(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  - AssemblerLib.Field.tensors
  - AssemblerLib.Field.topology
  - AssemblerLib.Field.ToString
  langs:
  - csharp
  - vb
  name: Field
  nameWithType: Field
  fullName: AssemblerLib.Field
  type: Class
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: Field
    path: Field.cs
    startLine: 15
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nStores spatially-distributed scalar, vector and integer weights values\n"
  example: []
  syntax:
    content: public class Field
    content.vb: Public Class Field
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AssemblerLib.Field.tensors
  commentId: F:AssemblerLib.Field.tensors
  id: tensors
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: tensors
  nameWithType: Field.tensors
  fullName: AssemblerLib.Field.tensors
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: tensors
    path: Field.cs
    startLine: 20
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nArray of Tensor points in the field\n"
  example: []
  syntax:
    content: public Tensor[] tensors
    return:
      type: AssemblerLib.Tensor[]
    content.vb: Public tensors As Tensor()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.topology
  commentId: F:AssemblerLib.Field.topology
  id: topology
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: topology
  nameWithType: Field.topology
  fullName: AssemblerLib.Field.topology
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: topology
    path: Field.cs
    startLine: 36
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nNeighbour index array - for future implementation\n"
  example: []
  syntax:
    content: public int[][] topology
    return:
      type: System.Int32[][]
    content.vb: Public topology As Integer()()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.colors
  commentId: F:AssemblerLib.Field.colors
  id: colors
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: colors
  nameWithType: Field.colors
  fullName: AssemblerLib.Field.colors
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: colors
    path: Field.cs
    startLine: 40
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nField points color - for display purposes only\n"
  example: []
  syntax:
    content: public Color[] colors
    return:
      type: System.Drawing.Color[]
    content.vb: Public colors As Color()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.#ctor(AssemblerLib.Field)
  commentId: M:AssemblerLib.Field.#ctor(AssemblerLib.Field)
  id: '#ctor(AssemblerLib.Field)'
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: Field(Field)
  nameWithType: Field.Field(Field)
  fullName: AssemblerLib.Field.Field(AssemblerLib.Field)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: .ctor
    path: Field.cs
    startLine: 52
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConstruct a Field from another Field (copy)\n"
  example: []
  syntax:
    content: public Field(Field otherField)
    parameters:
    - id: otherField
      type: AssemblerLib.Field
      description: ''
    content.vb: Public Sub New(otherField As Field)
  overload: AssemblerLib.Field.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  commentId: M:AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  id: '#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})'
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: Field(List<Point3d>, DataTree<Double>, DataTree<Vector3d>, DataTree<Int32>)
  nameWithType: Field.Field(List<Point3d>, DataTree<Double>, DataTree<Vector3d>, DataTree<Int32>)
  fullName: AssemblerLib.Field.Field(System.Collections.Generic.List<Rhino.Geometry.Point3d>, Grasshopper.DataTree<System.Double>, Grasshopper.DataTree<Rhino.Geometry.Vector3d>, Grasshopper.DataTree<System.Int32>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: .ctor
    path: Field.cs
    startLine: 71
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConstruct a Field from a List of Point3d, DataTrees for scalar and vector (multiple values per point), and a DataTree for topology (neighbours map)\n"
  example: []
  syntax:
    content: public Field(List<Point3d> points, DataTree<double> scalars, DataTree<Vector3d> vectors, DataTree<int> topology)
    parameters:
    - id: points
      type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
      description: ''
    - id: scalars
      type: Grasshopper.DataTree{System.Double}
      description: ''
    - id: vectors
      type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
      description: ''
    - id: topology
      type: Grasshopper.DataTree{System.Int32}
      description: ''
    content.vb: Public Sub New(points As List(Of Point3d), scalars As DataTree(Of Double), vectors As DataTree(Of Vector3d), topology As DataTree(Of Integer))
  overload: AssemblerLib.Field.#ctor*
  nameWithType.vb: Field.Field(List(Of Point3d), DataTree(Of Double), DataTree(Of Vector3d), DataTree(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.Field(System.Collections.Generic.List(Of Rhino.Geometry.Point3d), Grasshopper.DataTree(Of System.Double), Grasshopper.DataTree(Of Rhino.Geometry.Vector3d), Grasshopper.DataTree(Of System.Int32))
  name.vb: Field(List(Of Point3d), DataTree(Of Double), DataTree(Of Vector3d), DataTree(Of Int32))
- uid: AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})
  commentId: M:AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})
  id: '#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})'
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: Field(List<Point3d>, DataTree<Double>, DataTree<Vector3d>)
  nameWithType: Field.Field(List<Point3d>, DataTree<Double>, DataTree<Vector3d>)
  fullName: AssemblerLib.Field.Field(System.Collections.Generic.List<Rhino.Geometry.Point3d>, Grasshopper.DataTree<System.Double>, Grasshopper.DataTree<Rhino.Geometry.Vector3d>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: .ctor
    path: Field.cs
    startLine: 94
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConstruct a Field from a List of Point3d, and DataTrees for scalar and vector values (multiple values per point)\n"
  example: []
  syntax:
    content: public Field(List<Point3d> points, DataTree<double> scalar, DataTree<Vector3d> vector)
    parameters:
    - id: points
      type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
      description: ''
    - id: scalar
      type: Grasshopper.DataTree{System.Double}
      description: ''
    - id: vector
      type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
      description: ''
    content.vb: Public Sub New(points As List(Of Point3d), scalar As DataTree(Of Double), vector As DataTree(Of Vector3d))
  overload: AssemblerLib.Field.#ctor*
  nameWithType.vb: Field.Field(List(Of Point3d), DataTree(Of Double), DataTree(Of Vector3d))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.Field(System.Collections.Generic.List(Of Rhino.Geometry.Point3d), Grasshopper.DataTree(Of System.Double), Grasshopper.DataTree(Of Rhino.Geometry.Vector3d))
  name.vb: Field(List(Of Point3d), DataTree(Of Double), DataTree(Of Vector3d))
- uid: AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  commentId: M:AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  id: '#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})'
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: Field(List<Point3d>, List<Double>, List<Vector3d>, DataTree<Int32>)
  nameWithType: Field.Field(List<Point3d>, List<Double>, List<Vector3d>, DataTree<Int32>)
  fullName: AssemblerLib.Field.Field(System.Collections.Generic.List<Rhino.Geometry.Point3d>, System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>, Grasshopper.DataTree<System.Int32>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: .ctor
    path: Field.cs
    startLine: 104
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConstruct a Field from a List of Point3d, Lists for scalar and vector (single values per point), and a DataTree for topology (neighbours map)\n"
  example: []
  syntax:
    content: public Field(List<Point3d> points, List<double> scalar, List<Vector3d> vector, DataTree<int> topology)
    parameters:
    - id: points
      type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
      description: ''
    - id: scalar
      type: System.Collections.Generic.List{System.Double}
      description: ''
    - id: vector
      type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
      description: ''
    - id: topology
      type: Grasshopper.DataTree{System.Int32}
      description: ''
    content.vb: Public Sub New(points As List(Of Point3d), scalar As List(Of Double), vector As List(Of Vector3d), topology As DataTree(Of Integer))
  overload: AssemblerLib.Field.#ctor*
  nameWithType.vb: Field.Field(List(Of Point3d), List(Of Double), List(Of Vector3d), DataTree(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.Field(System.Collections.Generic.List(Of Rhino.Geometry.Point3d), System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d), Grasshopper.DataTree(Of System.Int32))
  name.vb: Field(List(Of Point3d), List(Of Double), List(Of Vector3d), DataTree(Of Int32))
- uid: AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  commentId: M:AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  id: '#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})'
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: Field(List<Point3d>, List<Double>, List<Vector3d>)
  nameWithType: Field.Field(List<Point3d>, List<Double>, List<Vector3d>)
  fullName: AssemblerLib.Field.Field(System.Collections.Generic.List<Rhino.Geometry.Point3d>, System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: .ctor
    path: Field.cs
    startLine: 127
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConstruct a Field from a List of Point3d, and Lists for scalar and vector (single values per point)\n"
  example: []
  syntax:
    content: public Field(List<Point3d> points, List<double> scalar, List<Vector3d> vector)
    parameters:
    - id: points
      type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
      description: ''
    - id: scalar
      type: System.Collections.Generic.List{System.Double}
      description: ''
    - id: vector
      type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
      description: ''
    content.vb: Public Sub New(points As List(Of Point3d), scalar As List(Of Double), vector As List(Of Vector3d))
  overload: AssemblerLib.Field.#ctor*
  nameWithType.vb: Field.Field(List(Of Point3d), List(Of Double), List(Of Vector3d))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.Field(System.Collections.Generic.List(Of Rhino.Geometry.Point3d), System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
  name.vb: Field(List(Of Point3d), List(Of Double), List(Of Vector3d))
- uid: AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Double,System.Double,System.Double)
  commentId: M:AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Double,System.Double,System.Double)
  id: '#ctor(Rhino.Geometry.Box,System.Double,System.Double,System.Double)'
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: Field(Box, Double, Double, Double)
  nameWithType: Field.Field(Box, Double, Double, Double)
  fullName: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Double, System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: .ctor
    path: Field.cs
    startLine: 141
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nconstructs an empty field from a Box, with individual resolutions in X, Y, and Z\n"
  example: []
  syntax:
    content: public Field(Box b, double resX, double resY, double resZ)
    parameters:
    - id: b
      type: Rhino.Geometry.Box
      description: ''
    - id: resX
      type: System.Double
      description: ''
    - id: resY
      type: System.Double
      description: ''
    - id: resZ
      type: System.Double
      description: ''
    content.vb: Public Sub New(b As Box, resX As Double, resY As Double, resZ As Double)
  overload: AssemblerLib.Field.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Double)
  commentId: M:AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Double)
  id: '#ctor(Rhino.Geometry.Box,System.Double)'
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: Field(Box, Double)
  nameWithType: Field.Field(Box, Double)
  fullName: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Double)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: .ctor
    path: Field.cs
    startLine: 158
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nconstructs an empty field from a Box, with single resolution\n"
  example: []
  syntax:
    content: public Field(Box b, double res)
    parameters:
    - id: b
      type: Rhino.Geometry.Box
      description: ''
    - id: res
      type: System.Double
      description: ''
    content.vb: Public Sub New(b As Box, res As Double)
  overload: AssemblerLib.Field.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Int32,System.Int32,System.Int32)
  commentId: M:AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Int32,System.Int32,System.Int32)
  id: '#ctor(Rhino.Geometry.Box,System.Int32,System.Int32,System.Int32)'
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: Field(Box, Int32, Int32, Int32)
  nameWithType: Field.Field(Box, Int32, Int32, Int32)
  fullName: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: .ctor
    path: Field.cs
    startLine: 168
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nconstructs an empty field from a Box, with individual number of points in X, Y, and Z\n"
  example: []
  syntax:
    content: public Field(Box b, int nX, int nY, int nZ)
    parameters:
    - id: b
      type: Rhino.Geometry.Box
      description: ''
    - id: nX
      type: System.Int32
      description: ''
    - id: nY
      type: System.Int32
      description: ''
    - id: nZ
      type: System.Int32
      description: ''
    content.vb: Public Sub New(b As Box, nX As Integer, nY As Integer, nZ As Integer)
  overload: AssemblerLib.Field.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Int32)
  commentId: M:AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Int32)
  id: '#ctor(Rhino.Geometry.Box,System.Int32)'
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: Field(Box, Int32)
  nameWithType: Field.Field(Box, Int32)
  fullName: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Int32)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: .ctor
    path: Field.cs
    startLine: 178
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nconstructs an empty field from a Box, with n points on the largest dimension and according numbers on other\n"
  example: []
  syntax:
    content: public Field(Box b, int n)
    parameters:
    - id: b
      type: Rhino.Geometry.Box
      description: ''
    - id: n
      type: System.Int32
      description: ''
    content.vb: Public Sub New(b As Box, n As Integer)
  overload: AssemblerLib.Field.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.PopulateScalars(System.Collections.Generic.List{System.Double})
  commentId: M:AssemblerLib.Field.PopulateScalars(System.Collections.Generic.List{System.Double})
  id: PopulateScalars(System.Collections.Generic.List{System.Double})
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: PopulateScalars(List<Double>)
  nameWithType: Field.PopulateScalars(List<Double>)
  fullName: AssemblerLib.Field.PopulateScalars(System.Collections.Generic.List<System.Double>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: PopulateScalars
    path: Field.cs
    startLine: 256
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nPopulate Field with scalar values - 1 value per Field point\n"
  example: []
  syntax:
    content: public bool PopulateScalars(List<double> scalarValues)
    parameters:
    - id: scalarValues
      type: System.Collections.Generic.List{System.Double}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function PopulateScalars(scalarValues As List(Of Double)) As Boolean
  overload: AssemblerLib.Field.PopulateScalars*
  nameWithType.vb: Field.PopulateScalars(List(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.PopulateScalars(System.Collections.Generic.List(Of System.Double))
  name.vb: PopulateScalars(List(Of Double))
- uid: AssemblerLib.Field.PopulateScalars(Grasshopper.DataTree{System.Double})
  commentId: M:AssemblerLib.Field.PopulateScalars(Grasshopper.DataTree{System.Double})
  id: PopulateScalars(Grasshopper.DataTree{System.Double})
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: PopulateScalars(DataTree<Double>)
  nameWithType: Field.PopulateScalars(DataTree<Double>)
  fullName: AssemblerLib.Field.PopulateScalars(Grasshopper.DataTree<System.Double>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: PopulateScalars
    path: Field.cs
    startLine: 275
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nPopulate Field with scalar values - multiple values per Field point\n"
  example: []
  syntax:
    content: public bool PopulateScalars(DataTree<double> scalarValues)
    parameters:
    - id: scalarValues
      type: Grasshopper.DataTree{System.Double}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function PopulateScalars(scalarValues As DataTree(Of Double)) As Boolean
  overload: AssemblerLib.Field.PopulateScalars*
  nameWithType.vb: Field.PopulateScalars(DataTree(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.PopulateScalars(Grasshopper.DataTree(Of System.Double))
  name.vb: PopulateScalars(DataTree(Of Double))
- uid: AssemblerLib.Field.PopulateVectors(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  commentId: M:AssemblerLib.Field.PopulateVectors(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  id: PopulateVectors(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: PopulateVectors(List<Vector3d>)
  nameWithType: Field.PopulateVectors(List<Vector3d>)
  fullName: AssemblerLib.Field.PopulateVectors(System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: PopulateVectors
    path: Field.cs
    startLine: 296
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nPopulate Field with vector values - 1 value per Field point\n"
  example: []
  syntax:
    content: public bool PopulateVectors(List<Vector3d> vectorValues)
    parameters:
    - id: vectorValues
      type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function PopulateVectors(vectorValues As List(Of Vector3d)) As Boolean
  overload: AssemblerLib.Field.PopulateVectors*
  nameWithType.vb: Field.PopulateVectors(List(Of Vector3d))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.PopulateVectors(System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
  name.vb: PopulateVectors(List(Of Vector3d))
- uid: AssemblerLib.Field.PopulateVectors(Grasshopper.DataTree{Rhino.Geometry.Vector3d})
  commentId: M:AssemblerLib.Field.PopulateVectors(Grasshopper.DataTree{Rhino.Geometry.Vector3d})
  id: PopulateVectors(Grasshopper.DataTree{Rhino.Geometry.Vector3d})
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: PopulateVectors(DataTree<Vector3d>)
  nameWithType: Field.PopulateVectors(DataTree<Vector3d>)
  fullName: AssemblerLib.Field.PopulateVectors(Grasshopper.DataTree<Rhino.Geometry.Vector3d>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: PopulateVectors
    path: Field.cs
    startLine: 313
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nPopulate Field with vector values - multiple values per Field point\n"
  example: []
  syntax:
    content: public bool PopulateVectors(DataTree<Vector3d> vectorValues)
    parameters:
    - id: vectorValues
      type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function PopulateVectors(vectorValues As DataTree(Of Vector3d)) As Boolean
  overload: AssemblerLib.Field.PopulateVectors*
  nameWithType.vb: Field.PopulateVectors(DataTree(Of Vector3d))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.PopulateVectors(Grasshopper.DataTree(Of Rhino.Geometry.Vector3d))
  name.vb: PopulateVectors(DataTree(Of Vector3d))
- uid: AssemblerLib.Field.PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  commentId: M:AssemblerLib.Field.PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  id: PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: PopulateField(List<Double>, List<Vector3d>)
  nameWithType: Field.PopulateField(List<Double>, List<Vector3d>)
  fullName: AssemblerLib.Field.PopulateField(System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: PopulateField
    path: Field.cs
    startLine: 333
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nPopulates Field - a single scalar and vector for each Field point, no iWeights\n"
  example: []
  syntax:
    content: public bool PopulateField(List<double> scalarValues, List<Vector3d> vectorValues)
    parameters:
    - id: scalarValues
      type: System.Collections.Generic.List{System.Double}
      description: ''
    - id: vectorValues
      type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function PopulateField(scalarValues As List(Of Double), vectorValues As List(Of Vector3d)) As Boolean
  overload: AssemblerLib.Field.PopulateField*
  nameWithType.vb: Field.PopulateField(List(Of Double), List(Of Vector3d))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.PopulateField(System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
  name.vb: PopulateField(List(Of Double), List(Of Vector3d))
- uid: AssemblerLib.Field.PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})
  commentId: M:AssemblerLib.Field.PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})
  id: PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: PopulateField(DataTree<Double>, DataTree<Vector3d>)
  nameWithType: Field.PopulateField(DataTree<Double>, DataTree<Vector3d>)
  fullName: AssemblerLib.Field.PopulateField(Grasshopper.DataTree<System.Double>, Grasshopper.DataTree<Rhino.Geometry.Vector3d>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: PopulateField
    path: Field.cs
    startLine: 350
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nPopulates Field - lists of scalars and vectors for each Field point, no iWeights\n"
  example: []
  syntax:
    content: public bool PopulateField(DataTree<double> scalarValues, DataTree<Vector3d> vectorValues)
    parameters:
    - id: scalarValues
      type: Grasshopper.DataTree{System.Double}
      description: ''
    - id: vectorValues
      type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function PopulateField(scalarValues As DataTree(Of Double), vectorValues As DataTree(Of Vector3d)) As Boolean
  overload: AssemblerLib.Field.PopulateField*
  nameWithType.vb: Field.PopulateField(DataTree(Of Double), DataTree(Of Vector3d))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.PopulateField(Grasshopper.DataTree(Of System.Double), Grasshopper.DataTree(Of Rhino.Geometry.Vector3d))
  name.vb: PopulateField(DataTree(Of Double), DataTree(Of Vector3d))
- uid: AssemblerLib.Field.PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  commentId: M:AssemblerLib.Field.PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  id: PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: PopulateField(List<Double>, List<Vector3d>, DataTree<Int32>)
  nameWithType: Field.PopulateField(List<Double>, List<Vector3d>, DataTree<Int32>)
  fullName: AssemblerLib.Field.PopulateField(System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>, Grasshopper.DataTree<System.Int32>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: PopulateField
    path: Field.cs
    startLine: 367
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nPopulates Field - lists of scalars, vectors, and data tree of iWeights for each Field point\n"
  example: []
  syntax:
    content: public bool PopulateField(List<double> scalarValues, List<Vector3d> vectorValues, DataTree<int> iWeights)
    parameters:
    - id: scalarValues
      type: System.Collections.Generic.List{System.Double}
      description: ''
    - id: vectorValues
      type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
      description: ''
    - id: iWeights
      type: Grasshopper.DataTree{System.Int32}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function PopulateField(scalarValues As List(Of Double), vectorValues As List(Of Vector3d), iWeights As DataTree(Of Integer)) As Boolean
  overload: AssemblerLib.Field.PopulateField*
  nameWithType.vb: Field.PopulateField(List(Of Double), List(Of Vector3d), DataTree(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.PopulateField(System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d), Grasshopper.DataTree(Of System.Int32))
  name.vb: PopulateField(List(Of Double), List(Of Vector3d), DataTree(Of Int32))
- uid: AssemblerLib.Field.PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  commentId: M:AssemblerLib.Field.PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  id: PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: PopulateField(DataTree<Double>, DataTree<Vector3d>, DataTree<Int32>)
  nameWithType: Field.PopulateField(DataTree<Double>, DataTree<Vector3d>, DataTree<Int32>)
  fullName: AssemblerLib.Field.PopulateField(Grasshopper.DataTree<System.Double>, Grasshopper.DataTree<Rhino.Geometry.Vector3d>, Grasshopper.DataTree<System.Int32>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: PopulateField
    path: Field.cs
    startLine: 388
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nPopulates Field - data trees of scalars, vectors and iWeights for each Field point\n"
  example: []
  syntax:
    content: public bool PopulateField(DataTree<double> scalarValues, DataTree<Vector3d> vectorValues, DataTree<int> iWeights)
    parameters:
    - id: scalarValues
      type: Grasshopper.DataTree{System.Double}
      description: ''
    - id: vectorValues
      type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
      description: ''
    - id: iWeights
      type: Grasshopper.DataTree{System.Int32}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function PopulateField(scalarValues As DataTree(Of Double), vectorValues As DataTree(Of Vector3d), iWeights As DataTree(Of Integer)) As Boolean
  overload: AssemblerLib.Field.PopulateField*
  nameWithType.vb: Field.PopulateField(DataTree(Of Double), DataTree(Of Vector3d), DataTree(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.PopulateField(Grasshopper.DataTree(Of System.Double), Grasshopper.DataTree(Of Rhino.Geometry.Vector3d), Grasshopper.DataTree(Of System.Int32))
  name.vb: PopulateField(DataTree(Of Double), DataTree(Of Vector3d), DataTree(Of Int32))
- uid: AssemblerLib.Field.GenerateColorsByAttractors(System.Collections.Generic.List{System.Drawing.Color},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
  commentId: M:AssemblerLib.Field.GenerateColorsByAttractors(System.Collections.Generic.List{System.Drawing.Color},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
  id: GenerateColorsByAttractors(System.Collections.Generic.List{System.Drawing.Color},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GenerateColorsByAttractors(List<Color>, List<Point3d>, Boolean)
  nameWithType: Field.GenerateColorsByAttractors(List<Color>, List<Point3d>, Boolean)
  fullName: AssemblerLib.Field.GenerateColorsByAttractors(System.Collections.Generic.List<System.Drawing.Color>, System.Collections.Generic.List<Rhino.Geometry.Point3d>, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GenerateColorsByAttractors
    path: Field.cs
    startLine: 406
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGenerates a color for each Field point based on a list of attractor points and respective colors \n"
  example: []
  syntax:
    content: public bool GenerateColorsByAttractors(List<Color> attColors, List<Point3d> attractors, bool blend)
    parameters:
    - id: attColors
      type: System.Collections.Generic.List{System.Drawing.Color}
      description: ''
    - id: attractors
      type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
      description: ''
    - id: blend
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
    content.vb: Public Function GenerateColorsByAttractors(attColors As List(Of Color), attractors As List(Of Point3d), blend As Boolean) As Boolean
  overload: AssemblerLib.Field.GenerateColorsByAttractors*
  nameWithType.vb: Field.GenerateColorsByAttractors(List(Of Color), List(Of Point3d), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.GenerateColorsByAttractors(System.Collections.Generic.List(Of System.Drawing.Color), System.Collections.Generic.List(Of Rhino.Geometry.Point3d), System.Boolean)
  name.vb: GenerateColorsByAttractors(List(Of Color), List(Of Point3d), Boolean)
- uid: AssemblerLib.Field.GenerateScalarColors(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Double,System.Boolean)
  commentId: M:AssemblerLib.Field.GenerateScalarColors(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Double,System.Boolean)
  id: GenerateScalarColors(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Double,System.Boolean)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GenerateScalarColors(Color, Color, Int32, Double, Boolean)
  nameWithType: Field.GenerateScalarColors(Color, Color, Int32, Double, Boolean)
  fullName: AssemblerLib.Field.GenerateScalarColors(System.Drawing.Color, System.Drawing.Color, System.Int32, System.Double, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GenerateScalarColors
    path: Field.cs
    startLine: 442
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGenerates colors according to scalar values at given index in the field\\nthreshold is used when blend is false\n"
  example: []
  syntax:
    content: public bool GenerateScalarColors(Color lowVal, Color hiVal, int index, double threshold, bool blend)
    parameters:
    - id: lowVal
      type: System.Drawing.Color
      description: ''
    - id: hiVal
      type: System.Drawing.Color
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: threshold
      type: System.Double
      description: ''
    - id: blend
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
    content.vb: Public Function GenerateScalarColors(lowVal As Color, hiVal As Color, index As Integer, threshold As Double, blend As Boolean) As Boolean
  overload: AssemblerLib.Field.GenerateScalarColors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.DistributeiWeightsScalar(Grasshopper.DataTree{System.Int32},System.Double,System.Int32,System.Boolean)
  commentId: M:AssemblerLib.Field.DistributeiWeightsScalar(Grasshopper.DataTree{System.Int32},System.Double,System.Int32,System.Boolean)
  id: DistributeiWeightsScalar(Grasshopper.DataTree{System.Int32},System.Double,System.Int32,System.Boolean)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: DistributeiWeightsScalar(DataTree<Int32>, Double, Int32, Boolean)
  nameWithType: Field.DistributeiWeightsScalar(DataTree<Int32>, Double, Int32, Boolean)
  fullName: AssemblerLib.Field.DistributeiWeightsScalar(Grasshopper.DataTree<System.Int32>, System.Double, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: DistributeiWeightsScalar
    path: Field.cs
    startLine: 480
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nDistribute iWeights according to scalar values in the field at index ind\n"
  example: []
  syntax:
    content: public bool DistributeiWeightsScalar(DataTree<int> weights, double threshold, int index, bool blend)
    parameters:
    - id: weights
      type: Grasshopper.DataTree{System.Int32}
      description: ''
    - id: threshold
      type: System.Double
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: blend
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
    content.vb: Public Function DistributeiWeightsScalar(weights As DataTree(Of Integer), threshold As Double, index As Integer, blend As Boolean) As Boolean
  overload: AssemblerLib.Field.DistributeiWeightsScalar*
  nameWithType.vb: Field.DistributeiWeightsScalar(DataTree(Of Int32), Double, Int32, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.DistributeiWeightsScalar(Grasshopper.DataTree(Of System.Int32), System.Double, System.Int32, System.Boolean)
  name.vb: DistributeiWeightsScalar(DataTree(Of Int32), Double, Int32, Boolean)
- uid: AssemblerLib.Field.DistributeiWeights(Grasshopper.DataTree{System.Int32},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
  commentId: M:AssemblerLib.Field.DistributeiWeights(Grasshopper.DataTree{System.Int32},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
  id: DistributeiWeights(Grasshopper.DataTree{System.Int32},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: DistributeiWeights(DataTree<Int32>, List<Point3d>, Boolean)
  nameWithType: Field.DistributeiWeights(DataTree<Int32>, List<Point3d>, Boolean)
  fullName: AssemblerLib.Field.DistributeiWeights(Grasshopper.DataTree<System.Int32>, System.Collections.Generic.List<Rhino.Geometry.Point3d>, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: DistributeiWeights
    path: Field.cs
    startLine: 500
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nDistribute attractor-based iWeights, with an option for blending\n"
  example: []
  syntax:
    content: public bool DistributeiWeights(DataTree<int> weights, List<Point3d> attractors, bool blend)
    parameters:
    - id: weights
      type: Grasshopper.DataTree{System.Int32}
      description: Data Tree of input weights\nOne branch for each attractor point
    - id: attractors
      type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
      description: List of attractor points
    - id: blend
      type: System.Boolean
      description: True for smooth blending, false for closest-point criteria
    return:
      type: System.Boolean
    content.vb: Public Function DistributeiWeights(weights As DataTree(Of Integer), attractors As List(Of Point3d), blend As Boolean) As Boolean
  overload: AssemblerLib.Field.DistributeiWeights*
  nameWithType.vb: Field.DistributeiWeights(DataTree(Of Int32), List(Of Point3d), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.DistributeiWeights(Grasshopper.DataTree(Of System.Int32), System.Collections.Generic.List(Of Rhino.Geometry.Point3d), System.Boolean)
  name.vb: DistributeiWeights(DataTree(Of Int32), List(Of Point3d), Boolean)
- uid: AssemblerLib.Field.PopulateiWeights(System.Collections.Generic.List{System.Int32})
  commentId: M:AssemblerLib.Field.PopulateiWeights(System.Collections.Generic.List{System.Int32})
  id: PopulateiWeights(System.Collections.Generic.List{System.Int32})
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: PopulateiWeights(List<Int32>)
  nameWithType: Field.PopulateiWeights(List<Int32>)
  fullName: AssemblerLib.Field.PopulateiWeights(System.Collections.Generic.List<System.Int32>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: PopulateiWeights
    path: Field.cs
    startLine: 523
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nPopulate field with weights distribution - 1 value per Field point\n"
  example: []
  syntax:
    content: public bool PopulateiWeights(List<int> iWeights)
    parameters:
    - id: iWeights
      type: System.Collections.Generic.List{System.Int32}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function PopulateiWeights(iWeights As List(Of Integer)) As Boolean
  overload: AssemblerLib.Field.PopulateiWeights*
  nameWithType.vb: Field.PopulateiWeights(List(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.PopulateiWeights(System.Collections.Generic.List(Of System.Int32))
  name.vb: PopulateiWeights(List(Of Int32))
- uid: AssemblerLib.Field.PopulateiWeights(Grasshopper.DataTree{System.Int32})
  commentId: M:AssemblerLib.Field.PopulateiWeights(Grasshopper.DataTree{System.Int32})
  id: PopulateiWeights(Grasshopper.DataTree{System.Int32})
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: PopulateiWeights(DataTree<Int32>)
  nameWithType: Field.PopulateiWeights(DataTree<Int32>)
  fullName: AssemblerLib.Field.PopulateiWeights(Grasshopper.DataTree<System.Int32>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: PopulateiWeights
    path: Field.cs
    startLine: 542
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nPopulate field with weights distribution\n"
  example: []
  syntax:
    content: public bool PopulateiWeights(DataTree<int> iWeights)
    parameters:
    - id: iWeights
      type: Grasshopper.DataTree{System.Int32}
      description: ''
    return:
      type: System.Boolean
      description: true if operation was successful
    content.vb: Public Function PopulateiWeights(iWeights As DataTree(Of Integer)) As Boolean
  overload: AssemblerLib.Field.PopulateiWeights*
  nameWithType.vb: Field.PopulateiWeights(DataTree(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Field.PopulateiWeights(Grasshopper.DataTree(Of System.Int32))
  name.vb: PopulateiWeights(DataTree(Of Int32))
- uid: AssemblerLib.Field.GetClosestIndex(Rhino.Geometry.Point3d)
  commentId: M:AssemblerLib.Field.GetClosestIndex(Rhino.Geometry.Point3d)
  id: GetClosestIndex(Rhino.Geometry.Point3d)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetClosestIndex(Point3d)
  nameWithType: Field.GetClosestIndex(Point3d)
  fullName: AssemblerLib.Field.GetClosestIndex(Rhino.Geometry.Point3d)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetClosestIndex
    path: Field.cs
    startLine: 703
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets index of closest Field point to the given Point P\n"
  example: []
  syntax:
    content: public int GetClosestIndex(Point3d P)
    parameters:
    - id: P
      type: Rhino.Geometry.Point3d
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function GetClosestIndex(P As Point3d) As Integer
  overload: AssemblerLib.Field.GetClosestIndex*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetNeighbourIndexes(Rhino.Geometry.Point3d)
  commentId: M:AssemblerLib.Field.GetNeighbourIndexes(Rhino.Geometry.Point3d)
  id: GetNeighbourIndexes(Rhino.Geometry.Point3d)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetNeighbourIndexes(Point3d)
  nameWithType: Field.GetNeighbourIndexes(Point3d)
  fullName: AssemblerLib.Field.GetNeighbourIndexes(Rhino.Geometry.Point3d)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetNeighbourIndexes
    path: Field.cs
    startLine: 713
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets indexes of closest Field points to the given Point P\n"
  example: []
  syntax:
    content: public List<int> GetNeighbourIndexes(Point3d P)
    parameters:
    - id: P
      type: Rhino.Geometry.Point3d
      description: ''
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: ''
    content.vb: Public Function GetNeighbourIndexes(P As Point3d) As List(Of Integer)
  overload: AssemblerLib.Field.GetNeighbourIndexes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetClosestScalar(Rhino.Geometry.Point3d)
  commentId: M:AssemblerLib.Field.GetClosestScalar(Rhino.Geometry.Point3d)
  id: GetClosestScalar(Rhino.Geometry.Point3d)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetClosestScalar(Point3d)
  nameWithType: Field.GetClosestScalar(Point3d)
  fullName: AssemblerLib.Field.GetClosestScalar(Rhino.Geometry.Point3d)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetClosestScalar
    path: Field.cs
    startLine: 732
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets the first scalar value for the closest Field point to the given Point P\n"
  example: []
  syntax:
    content: public double GetClosestScalar(Point3d P)
    parameters:
    - id: P
      type: Rhino.Geometry.Point3d
      description: ''
    return:
      type: System.Double
      description: ''
    content.vb: Public Function GetClosestScalar(P As Point3d) As Double
  overload: AssemblerLib.Field.GetClosestScalar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetClosestScalars(Rhino.Geometry.Point3d)
  commentId: M:AssemblerLib.Field.GetClosestScalars(Rhino.Geometry.Point3d)
  id: GetClosestScalars(Rhino.Geometry.Point3d)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetClosestScalars(Point3d)
  nameWithType: Field.GetClosestScalars(Point3d)
  fullName: AssemblerLib.Field.GetClosestScalars(Rhino.Geometry.Point3d)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetClosestScalars
    path: Field.cs
    startLine: 742
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets array of scalar values for the closest Field point to the given Point P\n"
  example: []
  syntax:
    content: public double[] GetClosestScalars(Point3d P)
    parameters:
    - id: P
      type: Rhino.Geometry.Point3d
      description: ''
    return:
      type: System.Double[]
      description: ''
    content.vb: Public Function GetClosestScalars(P As Point3d) As Double()
  overload: AssemblerLib.Field.GetClosestScalars*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetInterpolatedScalar(Rhino.Geometry.Point3d)
  commentId: M:AssemblerLib.Field.GetInterpolatedScalar(Rhino.Geometry.Point3d)
  id: GetInterpolatedScalar(Rhino.Geometry.Point3d)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetInterpolatedScalar(Point3d)
  nameWithType: Field.GetInterpolatedScalar(Point3d)
  fullName: AssemblerLib.Field.GetInterpolatedScalar(Rhino.Geometry.Point3d)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetInterpolatedScalar
    path: Field.cs
    startLine: 752
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGet interpolation of first scalar value for a sample point P\n"
  example: []
  syntax:
    content: public double GetInterpolatedScalar(Point3d P)
    parameters:
    - id: P
      type: Rhino.Geometry.Point3d
      description: ''
    return:
      type: System.Double
      description: ''
    content.vb: Public Function GetInterpolatedScalar(P As Point3d) As Double
  overload: AssemblerLib.Field.GetInterpolatedScalar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetNeighbourScalars(Rhino.Geometry.Point3d)
  commentId: M:AssemblerLib.Field.GetNeighbourScalars(Rhino.Geometry.Point3d)
  id: GetNeighbourScalars(Rhino.Geometry.Point3d)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetNeighbourScalars(Point3d)
  nameWithType: Field.GetNeighbourScalars(Point3d)
  fullName: AssemblerLib.Field.GetNeighbourScalars(Rhino.Geometry.Point3d)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetNeighbourScalars
    path: Field.cs
    startLine: 772
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGet first scalar values near a sample point P\n"
  example: []
  syntax:
    content: public List<double> GetNeighbourScalars(Point3d P)
    parameters:
    - id: P
      type: Rhino.Geometry.Point3d
      description: ''
    return:
      type: System.Collections.Generic.List{System.Double}
      description: ''
    content.vb: Public Function GetNeighbourScalars(P As Point3d) As List(Of Double)
  overload: AssemblerLib.Field.GetNeighbourScalars*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetClosestVector(Rhino.Geometry.Point3d)
  commentId: M:AssemblerLib.Field.GetClosestVector(Rhino.Geometry.Point3d)
  id: GetClosestVector(Rhino.Geometry.Point3d)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetClosestVector(Point3d)
  nameWithType: Field.GetClosestVector(Point3d)
  fullName: AssemblerLib.Field.GetClosestVector(Rhino.Geometry.Point3d)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetClosestVector
    path: Field.cs
    startLine: 790
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets the first vector value for the closest Field point to the given Point P\n"
  example: []
  syntax:
    content: public Vector3d GetClosestVector(Point3d P)
    parameters:
    - id: P
      type: Rhino.Geometry.Point3d
      description: ''
    return:
      type: Rhino.Geometry.Vector3d
      description: ''
    content.vb: Public Function GetClosestVector(P As Point3d) As Vector3d
  overload: AssemblerLib.Field.GetClosestVector*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetInterpolatedVector(Rhino.Geometry.Point3d)
  commentId: M:AssemblerLib.Field.GetInterpolatedVector(Rhino.Geometry.Point3d)
  id: GetInterpolatedVector(Rhino.Geometry.Point3d)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetInterpolatedVector(Point3d)
  nameWithType: Field.GetInterpolatedVector(Point3d)
  fullName: AssemblerLib.Field.GetInterpolatedVector(Rhino.Geometry.Point3d)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetInterpolatedVector
    path: Field.cs
    startLine: 800
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGet interpolation of first vector value for a sample point P\n"
  example: []
  syntax:
    content: public Vector3d GetInterpolatedVector(Point3d P)
    parameters:
    - id: P
      type: Rhino.Geometry.Point3d
      description: ''
    return:
      type: Rhino.Geometry.Vector3d
      description: ''
    content.vb: Public Function GetInterpolatedVector(P As Point3d) As Vector3d
  overload: AssemblerLib.Field.GetInterpolatedVector*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetNeighbourVectors(Rhino.Geometry.Point3d)
  commentId: M:AssemblerLib.Field.GetNeighbourVectors(Rhino.Geometry.Point3d)
  id: GetNeighbourVectors(Rhino.Geometry.Point3d)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetNeighbourVectors(Point3d)
  nameWithType: Field.GetNeighbourVectors(Point3d)
  fullName: AssemblerLib.Field.GetNeighbourVectors(Rhino.Geometry.Point3d)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetNeighbourVectors
    path: Field.cs
    startLine: 816
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public List<Vector3d> GetNeighbourVectors(Point3d P)
    parameters:
    - id: P
      type: Rhino.Geometry.Point3d
    return:
      type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
    content.vb: Public Function GetNeighbourVectors(P As Point3d) As List(Of Vector3d)
  overload: AssemblerLib.Field.GetNeighbourVectors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetClosestVectors(Rhino.Geometry.Point3d)
  commentId: M:AssemblerLib.Field.GetClosestVectors(Rhino.Geometry.Point3d)
  id: GetClosestVectors(Rhino.Geometry.Point3d)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetClosestVectors(Point3d)
  nameWithType: Field.GetClosestVectors(Point3d)
  fullName: AssemblerLib.Field.GetClosestVectors(Rhino.Geometry.Point3d)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetClosestVectors
    path: Field.cs
    startLine: 836
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets array of vector values for the closest Field point to the given Point P\n"
  example: []
  syntax:
    content: public Vector3d[] GetClosestVectors(Point3d P)
    parameters:
    - id: P
      type: Rhino.Geometry.Point3d
      description: ''
    return:
      type: Rhino.Geometry.Vector3d[]
      description: ''
    content.vb: Public Function GetClosestVectors(P As Point3d) As Vector3d()
  overload: AssemblerLib.Field.GetClosestVectors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetClosestiWeights(Rhino.Geometry.Point3d)
  commentId: M:AssemblerLib.Field.GetClosestiWeights(Rhino.Geometry.Point3d)
  id: GetClosestiWeights(Rhino.Geometry.Point3d)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetClosestiWeights(Point3d)
  nameWithType: Field.GetClosestiWeights(Point3d)
  fullName: AssemblerLib.Field.GetClosestiWeights(Rhino.Geometry.Point3d)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetClosestiWeights
    path: Field.cs
    startLine: 846
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets array of integer weights for the closest Field point to the given Point P\n"
  example: []
  syntax:
    content: public int[] GetClosestiWeights(Point3d P)
    parameters:
    - id: P
      type: Rhino.Geometry.Point3d
      description: ''
    return:
      type: System.Int32[]
      description: ''
    content.vb: Public Function GetClosestiWeights(P As Point3d) As Integer()
  overload: AssemblerLib.Field.GetClosestiWeights*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetScalar(System.Int32)
  commentId: M:AssemblerLib.Field.GetScalar(System.Int32)
  id: GetScalar(System.Int32)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetScalar(Int32)
  nameWithType: Field.GetScalar(Int32)
  fullName: AssemblerLib.Field.GetScalar(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetScalar
    path: Field.cs
    startLine: 856
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets the first scalar value for the Field point at index i\n"
  example: []
  syntax:
    content: public double GetScalar(int i)
    parameters:
    - id: i
      type: System.Int32
      description: ''
    return:
      type: System.Double
      description: ''
    content.vb: Public Function GetScalar(i As Integer) As Double
  overload: AssemblerLib.Field.GetScalar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetScalars(System.Int32)
  commentId: M:AssemblerLib.Field.GetScalars(System.Int32)
  id: GetScalars(System.Int32)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetScalars(Int32)
  nameWithType: Field.GetScalars(Int32)
  fullName: AssemblerLib.Field.GetScalars(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetScalars
    path: Field.cs
    startLine: 868
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets the array of scalar values for the Field point at index i\n"
  example: []
  syntax:
    content: public double[] GetScalars(int i)
    parameters:
    - id: i
      type: System.Int32
      description: ''
    return:
      type: System.Double[]
      description: ''
    content.vb: Public Function GetScalars(i As Integer) As Double()
  overload: AssemblerLib.Field.GetScalars*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetVector(System.Int32)
  commentId: M:AssemblerLib.Field.GetVector(System.Int32)
  id: GetVector(System.Int32)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetVector(Int32)
  nameWithType: Field.GetVector(Int32)
  fullName: AssemblerLib.Field.GetVector(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetVector
    path: Field.cs
    startLine: 880
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets the first vector value for the Field point at index i\n"
  example: []
  syntax:
    content: public Vector3d GetVector(int i)
    parameters:
    - id: i
      type: System.Int32
      description: ''
    return:
      type: Rhino.Geometry.Vector3d
      description: ''
    content.vb: Public Function GetVector(i As Integer) As Vector3d
  overload: AssemblerLib.Field.GetVector*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetVectors(System.Int32)
  commentId: M:AssemblerLib.Field.GetVectors(System.Int32)
  id: GetVectors(System.Int32)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetVectors(Int32)
  nameWithType: Field.GetVectors(Int32)
  fullName: AssemblerLib.Field.GetVectors(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetVectors
    path: Field.cs
    startLine: 892
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets the array of vector values for the Field point at index i\n"
  example: []
  syntax:
    content: public Vector3d[] GetVectors(int i)
    parameters:
    - id: i
      type: System.Int32
      description: ''
    return:
      type: Rhino.Geometry.Vector3d[]
      description: ''
    content.vb: Public Function GetVectors(i As Integer) As Vector3d()
  overload: AssemblerLib.Field.GetVectors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetiWeights(System.Int32)
  commentId: M:AssemblerLib.Field.GetiWeights(System.Int32)
  id: GetiWeights(System.Int32)
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetiWeights(Int32)
  nameWithType: Field.GetiWeights(Int32)
  fullName: AssemblerLib.Field.GetiWeights(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetiWeights
    path: Field.cs
    startLine: 904
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets the array of integer weights for the Field point at index i\n"
  example: []
  syntax:
    content: public int[] GetiWeights(int i)
    parameters:
    - id: i
      type: System.Int32
      description: ''
    return:
      type: System.Int32[]
      description: ''
    content.vb: Public Function GetiWeights(i As Integer) As Integer()
  overload: AssemblerLib.Field.GetiWeights*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetPoints
  commentId: M:AssemblerLib.Field.GetPoints
  id: GetPoints
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetPoints()
  nameWithType: Field.GetPoints()
  fullName: AssemblerLib.Field.GetPoints()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetPoints
    path: Field.cs
    startLine: 915
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets all Field Points\n"
  example: []
  syntax:
    content: public Point3d[] GetPoints()
    return:
      type: Rhino.Geometry.Point3d[]
      description: ''
    content.vb: Public Function GetPoints As Point3d()
  overload: AssemblerLib.Field.GetPoints*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetGH_Points
  commentId: M:AssemblerLib.Field.GetGH_Points
  id: GetGH_Points
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetGH_Points()
  nameWithType: Field.GetGH_Points()
  fullName: AssemblerLib.Field.GetGH_Points()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetGH_Points
    path: Field.cs
    startLine: 924
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets all Field Points in GH_Point format (for fast output)\n"
  example: []
  syntax:
    content: public GH_Point[] GetGH_Points()
    return:
      type: Grasshopper.Kernel.Types.GH_Point[]
      description: ''
    content.vb: Public Function GetGH_Points As GH_Point()
  overload: AssemblerLib.Field.GetGH_Points*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetScalars
  commentId: M:AssemblerLib.Field.GetScalars
  id: GetScalars
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetScalars()
  nameWithType: Field.GetScalars()
  fullName: AssemblerLib.Field.GetScalars()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetScalars
    path: Field.cs
    startLine: 933
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets all Field scalar values as DataTree\n"
  example: []
  syntax:
    content: public DataTree<double> GetScalars()
    return:
      type: Grasshopper.DataTree{System.Double}
      description: ''
    content.vb: Public Function GetScalars As DataTree(Of Double)
  overload: AssemblerLib.Field.GetScalars*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetGH_Scalars
  commentId: M:AssemblerLib.Field.GetGH_Scalars
  id: GetGH_Scalars
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetGH_Scalars()
  nameWithType: Field.GetGH_Scalars()
  fullName: AssemblerLib.Field.GetGH_Scalars()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetGH_Scalars
    path: Field.cs
    startLine: 948
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets all Field scalar values as DataTree in GH_Number format (for fast output)\n"
  example: []
  syntax:
    content: public DataTree<GH_Number> GetGH_Scalars()
    return:
      type: Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Number}
      description: ''
    content.vb: Public Function GetGH_Scalars As DataTree(Of GH_Number)
  overload: AssemblerLib.Field.GetGH_Scalars*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetVectors
  commentId: M:AssemblerLib.Field.GetVectors
  id: GetVectors
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetVectors()
  nameWithType: Field.GetVectors()
  fullName: AssemblerLib.Field.GetVectors()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetVectors
    path: Field.cs
    startLine: 963
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets all Field vector values as DataTree\n"
  example: []
  syntax:
    content: public DataTree<Vector3d> GetVectors()
    return:
      type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
      description: ''
    content.vb: Public Function GetVectors As DataTree(Of Vector3d)
  overload: AssemblerLib.Field.GetVectors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetGH_Vectors
  commentId: M:AssemblerLib.Field.GetGH_Vectors
  id: GetGH_Vectors
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetGH_Vectors()
  nameWithType: Field.GetGH_Vectors()
  fullName: AssemblerLib.Field.GetGH_Vectors()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetGH_Vectors
    path: Field.cs
    startLine: 978
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets all Field vector values as DataTree in GH_Vector format (for fast output)\n"
  example: []
  syntax:
    content: public DataTree<GH_Vector> GetGH_Vectors()
    return:
      type: Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Vector}
      description: ''
    content.vb: Public Function GetGH_Vectors As DataTree(Of GH_Vector)
  overload: AssemblerLib.Field.GetGH_Vectors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetiWeights
  commentId: M:AssemblerLib.Field.GetiWeights
  id: GetiWeights
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetiWeights()
  nameWithType: Field.GetiWeights()
  fullName: AssemblerLib.Field.GetiWeights()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetiWeights
    path: Field.cs
    startLine: 993
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets all Field integer Weights as DataTree\n"
  example: []
  syntax:
    content: public DataTree<int> GetiWeights()
    return:
      type: Grasshopper.DataTree{System.Int32}
      description: ''
    content.vb: Public Function GetiWeights As DataTree(Of Integer)
  overload: AssemblerLib.Field.GetiWeights*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.GetGH_iWeights
  commentId: M:AssemblerLib.Field.GetGH_iWeights
  id: GetGH_iWeights
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: GetGH_iWeights()
  nameWithType: Field.GetGH_iWeights()
  fullName: AssemblerLib.Field.GetGH_iWeights()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: GetGH_iWeights
    path: Field.cs
    startLine: 1008
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets all Field integer Weights as DataTree in GH_Integer format (for fast output)\n"
  example: []
  syntax:
    content: public DataTree<GH_Integer> GetGH_iWeights()
    return:
      type: Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Integer}
      description: ''
    content.vb: Public Function GetGH_iWeights As DataTree(Of GH_Integer)
  overload: AssemblerLib.Field.GetGH_iWeights*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Field.ToString
  commentId: M:AssemblerLib.Field.ToString
  id: ToString
  parent: AssemblerLib.Field
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Field.ToString()
  fullName: AssemblerLib.Field.ToString()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
    id: ToString
    path: Field.cs
    startLine: 1019
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: AssemblerLib.Field.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: AssemblerLib
  commentId: N:AssemblerLib
  name: AssemblerLib
  nameWithType: AssemblerLib
  fullName: AssemblerLib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AssemblerLib.Tensor[]
  isExternal: true
  name: Tensor[]
  nameWithType: Tensor[]
  fullName: AssemblerLib.Tensor[]
  nameWithType.vb: Tensor()
  fullName.vb: AssemblerLib.Tensor()
  name.vb: Tensor()
  spec.csharp:
  - uid: AssemblerLib.Tensor
    name: Tensor
    nameWithType: Tensor
    fullName: AssemblerLib.Tensor
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AssemblerLib.Tensor
    name: Tensor
    nameWithType: Tensor
    fullName: AssemblerLib.Tensor
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[][]
  isExternal: true
  name: Int32[][]
  nameWithType: Int32[][]
  fullName: System.Int32[][]
  nameWithType.vb: Int32()()
  fullName.vb: System.Int32()()
  name.vb: Int32()()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Drawing.Color[]
  isExternal: true
  name: Color[]
  nameWithType: Color[]
  fullName: System.Drawing.Color[]
  nameWithType.vb: Color()
  fullName.vb: System.Drawing.Color()
  name.vb: Color()
  spec.csharp:
  - uid: System.Drawing.Color
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Drawing.Color
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AssemblerLib.Field.#ctor*
  commentId: Overload:AssemblerLib.Field.#ctor
  name: Field
  nameWithType: Field.Field
  fullName: AssemblerLib.Field.Field
- uid: AssemblerLib.Field
  commentId: T:AssemblerLib.Field
  parent: AssemblerLib
  name: Field
  nameWithType: Field
  fullName: AssemblerLib.Field
- uid: System.Collections.Generic.List{Rhino.Geometry.Point3d}
  commentId: T:System.Collections.Generic.List{Rhino.Geometry.Point3d}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Point3d>
  nameWithType: List<Point3d>
  fullName: System.Collections.Generic.List<Rhino.Geometry.Point3d>
  nameWithType.vb: List(Of Point3d)
  fullName.vb: System.Collections.Generic.List(Of Rhino.Geometry.Point3d)
  name.vb: List(Of Point3d)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rhino.Geometry.Point3d
    name: Point3d
    nameWithType: Point3d
    fullName: Rhino.Geometry.Point3d
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rhino.Geometry.Point3d
    name: Point3d
    nameWithType: Point3d
    fullName: Rhino.Geometry.Point3d
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Grasshopper.DataTree{System.Double}
  commentId: T:Grasshopper.DataTree{System.Double}
  parent: Grasshopper
  definition: Grasshopper.DataTree`1
  name: DataTree<Double>
  nameWithType: DataTree<Double>
  fullName: Grasshopper.DataTree<System.Double>
  nameWithType.vb: DataTree(Of Double)
  fullName.vb: Grasshopper.DataTree(Of System.Double)
  name.vb: DataTree(Of Double)
  spec.csharp:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
  commentId: T:Grasshopper.DataTree{Rhino.Geometry.Vector3d}
  parent: Grasshopper
  definition: Grasshopper.DataTree`1
  name: DataTree<Vector3d>
  nameWithType: DataTree<Vector3d>
  fullName: Grasshopper.DataTree<Rhino.Geometry.Vector3d>
  nameWithType.vb: DataTree(Of Vector3d)
  fullName.vb: Grasshopper.DataTree(Of Rhino.Geometry.Vector3d)
  name.vb: DataTree(Of Vector3d)
  spec.csharp:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Grasshopper.DataTree{System.Int32}
  commentId: T:Grasshopper.DataTree{System.Int32}
  parent: Grasshopper
  definition: Grasshopper.DataTree`1
  name: DataTree<Int32>
  nameWithType: DataTree<Int32>
  fullName: Grasshopper.DataTree<System.Int32>
  nameWithType.vb: DataTree(Of Int32)
  fullName.vb: Grasshopper.DataTree(Of System.Int32)
  name.vb: DataTree(Of Int32)
  spec.csharp:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Grasshopper.DataTree`1
  commentId: T:Grasshopper.DataTree`1
  isExternal: true
  name: DataTree<T>
  nameWithType: DataTree<T>
  fullName: Grasshopper.DataTree<T>
  nameWithType.vb: DataTree(Of T)
  fullName.vb: Grasshopper.DataTree(Of T)
  name.vb: DataTree(Of T)
  spec.csharp:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grasshopper
  commentId: N:Grasshopper
  isExternal: true
  name: Grasshopper
  nameWithType: Grasshopper
  fullName: Grasshopper
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
  commentId: T:System.Collections.Generic.List{Rhino.Geometry.Vector3d}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3d>
  nameWithType: List<Vector3d>
  fullName: System.Collections.Generic.List<Rhino.Geometry.Vector3d>
  nameWithType.vb: List(Of Vector3d)
  fullName.vb: System.Collections.Generic.List(Of Rhino.Geometry.Vector3d)
  name.vb: List(Of Vector3d)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Rhino.Geometry.Box
  commentId: T:Rhino.Geometry.Box
  parent: Rhino.Geometry
  isExternal: true
  name: Box
  nameWithType: Box
  fullName: Rhino.Geometry.Box
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Rhino.Geometry
  commentId: N:Rhino.Geometry
  isExternal: true
  name: Rhino.Geometry
  nameWithType: Rhino.Geometry
  fullName: Rhino.Geometry
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AssemblerLib.Field.PopulateScalars*
  commentId: Overload:AssemblerLib.Field.PopulateScalars
  name: PopulateScalars
  nameWithType: Field.PopulateScalars
  fullName: AssemblerLib.Field.PopulateScalars
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AssemblerLib.Field.PopulateVectors*
  commentId: Overload:AssemblerLib.Field.PopulateVectors
  name: PopulateVectors
  nameWithType: Field.PopulateVectors
  fullName: AssemblerLib.Field.PopulateVectors
- uid: AssemblerLib.Field.PopulateField*
  commentId: Overload:AssemblerLib.Field.PopulateField
  name: PopulateField
  nameWithType: Field.PopulateField
  fullName: AssemblerLib.Field.PopulateField
- uid: AssemblerLib.Field.GenerateColorsByAttractors*
  commentId: Overload:AssemblerLib.Field.GenerateColorsByAttractors
  name: GenerateColorsByAttractors
  nameWithType: Field.GenerateColorsByAttractors
  fullName: AssemblerLib.Field.GenerateColorsByAttractors
- uid: System.Collections.Generic.List{System.Drawing.Color}
  commentId: T:System.Collections.Generic.List{System.Drawing.Color}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Color>
  nameWithType: List<Color>
  fullName: System.Collections.Generic.List<System.Drawing.Color>
  nameWithType.vb: List(Of Color)
  fullName.vb: System.Collections.Generic.List(Of System.Drawing.Color)
  name.vb: List(Of Color)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Drawing.Color
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Drawing.Color
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Field.GenerateScalarColors*
  commentId: Overload:AssemblerLib.Field.GenerateScalarColors
  name: GenerateScalarColors
  nameWithType: Field.GenerateScalarColors
  fullName: AssemblerLib.Field.GenerateScalarColors
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
- uid: AssemblerLib.Field.DistributeiWeightsScalar*
  commentId: Overload:AssemblerLib.Field.DistributeiWeightsScalar
  name: DistributeiWeightsScalar
  nameWithType: Field.DistributeiWeightsScalar
  fullName: AssemblerLib.Field.DistributeiWeightsScalar
- uid: AssemblerLib.Field.DistributeiWeights*
  commentId: Overload:AssemblerLib.Field.DistributeiWeights
  name: DistributeiWeights
  nameWithType: Field.DistributeiWeights
  fullName: AssemblerLib.Field.DistributeiWeights
- uid: AssemblerLib.Field.PopulateiWeights*
  commentId: Overload:AssemblerLib.Field.PopulateiWeights
  name: PopulateiWeights
  nameWithType: Field.PopulateiWeights
  fullName: AssemblerLib.Field.PopulateiWeights
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Field.GetClosestIndex*
  commentId: Overload:AssemblerLib.Field.GetClosestIndex
  name: GetClosestIndex
  nameWithType: Field.GetClosestIndex
  fullName: AssemblerLib.Field.GetClosestIndex
- uid: Rhino.Geometry.Point3d
  commentId: T:Rhino.Geometry.Point3d
  parent: Rhino.Geometry
  isExternal: true
  name: Point3d
  nameWithType: Point3d
  fullName: Rhino.Geometry.Point3d
- uid: AssemblerLib.Field.GetNeighbourIndexes*
  commentId: Overload:AssemblerLib.Field.GetNeighbourIndexes
  name: GetNeighbourIndexes
  nameWithType: Field.GetNeighbourIndexes
  fullName: AssemblerLib.Field.GetNeighbourIndexes
- uid: AssemblerLib.Field.GetClosestScalar*
  commentId: Overload:AssemblerLib.Field.GetClosestScalar
  name: GetClosestScalar
  nameWithType: Field.GetClosestScalar
  fullName: AssemblerLib.Field.GetClosestScalar
- uid: AssemblerLib.Field.GetClosestScalars*
  commentId: Overload:AssemblerLib.Field.GetClosestScalars
  name: GetClosestScalars
  nameWithType: Field.GetClosestScalars
  fullName: AssemblerLib.Field.GetClosestScalars
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AssemblerLib.Field.GetInterpolatedScalar*
  commentId: Overload:AssemblerLib.Field.GetInterpolatedScalar
  name: GetInterpolatedScalar
  nameWithType: Field.GetInterpolatedScalar
  fullName: AssemblerLib.Field.GetInterpolatedScalar
- uid: AssemblerLib.Field.GetNeighbourScalars*
  commentId: Overload:AssemblerLib.Field.GetNeighbourScalars
  name: GetNeighbourScalars
  nameWithType: Field.GetNeighbourScalars
  fullName: AssemblerLib.Field.GetNeighbourScalars
- uid: AssemblerLib.Field.GetClosestVector*
  commentId: Overload:AssemblerLib.Field.GetClosestVector
  name: GetClosestVector
  nameWithType: Field.GetClosestVector
  fullName: AssemblerLib.Field.GetClosestVector
- uid: Rhino.Geometry.Vector3d
  commentId: T:Rhino.Geometry.Vector3d
  parent: Rhino.Geometry
  isExternal: true
  name: Vector3d
  nameWithType: Vector3d
  fullName: Rhino.Geometry.Vector3d
- uid: AssemblerLib.Field.GetInterpolatedVector*
  commentId: Overload:AssemblerLib.Field.GetInterpolatedVector
  name: GetInterpolatedVector
  nameWithType: Field.GetInterpolatedVector
  fullName: AssemblerLib.Field.GetInterpolatedVector
- uid: AssemblerLib.Field.GetNeighbourVectors*
  commentId: Overload:AssemblerLib.Field.GetNeighbourVectors
  name: GetNeighbourVectors
  nameWithType: Field.GetNeighbourVectors
  fullName: AssemblerLib.Field.GetNeighbourVectors
- uid: AssemblerLib.Field.GetClosestVectors*
  commentId: Overload:AssemblerLib.Field.GetClosestVectors
  name: GetClosestVectors
  nameWithType: Field.GetClosestVectors
  fullName: AssemblerLib.Field.GetClosestVectors
- uid: Rhino.Geometry.Vector3d[]
  isExternal: true
  name: Vector3d[]
  nameWithType: Vector3d[]
  fullName: Rhino.Geometry.Vector3d[]
  nameWithType.vb: Vector3d()
  fullName.vb: Rhino.Geometry.Vector3d()
  name.vb: Vector3d()
  spec.csharp:
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AssemblerLib.Field.GetClosestiWeights*
  commentId: Overload:AssemblerLib.Field.GetClosestiWeights
  name: GetClosestiWeights
  nameWithType: Field.GetClosestiWeights
  fullName: AssemblerLib.Field.GetClosestiWeights
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AssemblerLib.Field.GetScalar*
  commentId: Overload:AssemblerLib.Field.GetScalar
  name: GetScalar
  nameWithType: Field.GetScalar
  fullName: AssemblerLib.Field.GetScalar
- uid: AssemblerLib.Field.GetScalars*
  commentId: Overload:AssemblerLib.Field.GetScalars
  name: GetScalars
  nameWithType: Field.GetScalars
  fullName: AssemblerLib.Field.GetScalars
- uid: AssemblerLib.Field.GetVector*
  commentId: Overload:AssemblerLib.Field.GetVector
  name: GetVector
  nameWithType: Field.GetVector
  fullName: AssemblerLib.Field.GetVector
- uid: AssemblerLib.Field.GetVectors*
  commentId: Overload:AssemblerLib.Field.GetVectors
  name: GetVectors
  nameWithType: Field.GetVectors
  fullName: AssemblerLib.Field.GetVectors
- uid: AssemblerLib.Field.GetiWeights*
  commentId: Overload:AssemblerLib.Field.GetiWeights
  name: GetiWeights
  nameWithType: Field.GetiWeights
  fullName: AssemblerLib.Field.GetiWeights
- uid: AssemblerLib.Field.GetPoints*
  commentId: Overload:AssemblerLib.Field.GetPoints
  name: GetPoints
  nameWithType: Field.GetPoints
  fullName: AssemblerLib.Field.GetPoints
- uid: Rhino.Geometry.Point3d[]
  isExternal: true
  name: Point3d[]
  nameWithType: Point3d[]
  fullName: Rhino.Geometry.Point3d[]
  nameWithType.vb: Point3d()
  fullName.vb: Rhino.Geometry.Point3d()
  name.vb: Point3d()
  spec.csharp:
  - uid: Rhino.Geometry.Point3d
    name: Point3d
    nameWithType: Point3d
    fullName: Rhino.Geometry.Point3d
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Rhino.Geometry.Point3d
    name: Point3d
    nameWithType: Point3d
    fullName: Rhino.Geometry.Point3d
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AssemblerLib.Field.GetGH_Points*
  commentId: Overload:AssemblerLib.Field.GetGH_Points
  name: GetGH_Points
  nameWithType: Field.GetGH_Points
  fullName: AssemblerLib.Field.GetGH_Points
- uid: Grasshopper.Kernel.Types.GH_Point[]
  isExternal: true
  name: GH_Point[]
  nameWithType: GH_Point[]
  fullName: Grasshopper.Kernel.Types.GH_Point[]
  nameWithType.vb: GH_Point()
  fullName.vb: Grasshopper.Kernel.Types.GH_Point()
  name.vb: GH_Point()
  spec.csharp:
  - uid: Grasshopper.Kernel.Types.GH_Point
    name: GH_Point
    nameWithType: GH_Point
    fullName: Grasshopper.Kernel.Types.GH_Point
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Grasshopper.Kernel.Types.GH_Point
    name: GH_Point
    nameWithType: GH_Point
    fullName: Grasshopper.Kernel.Types.GH_Point
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AssemblerLib.Field.GetGH_Scalars*
  commentId: Overload:AssemblerLib.Field.GetGH_Scalars
  name: GetGH_Scalars
  nameWithType: Field.GetGH_Scalars
  fullName: AssemblerLib.Field.GetGH_Scalars
- uid: Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Number}
  commentId: T:Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Number}
  parent: Grasshopper
  definition: Grasshopper.DataTree`1
  name: DataTree<GH_Number>
  nameWithType: DataTree<GH_Number>
  fullName: Grasshopper.DataTree<Grasshopper.Kernel.Types.GH_Number>
  nameWithType.vb: DataTree(Of GH_Number)
  fullName.vb: Grasshopper.DataTree(Of Grasshopper.Kernel.Types.GH_Number)
  name.vb: DataTree(Of GH_Number)
  spec.csharp:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grasshopper.Kernel.Types.GH_Number
    name: GH_Number
    nameWithType: GH_Number
    fullName: Grasshopper.Kernel.Types.GH_Number
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grasshopper.Kernel.Types.GH_Number
    name: GH_Number
    nameWithType: GH_Number
    fullName: Grasshopper.Kernel.Types.GH_Number
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Field.GetGH_Vectors*
  commentId: Overload:AssemblerLib.Field.GetGH_Vectors
  name: GetGH_Vectors
  nameWithType: Field.GetGH_Vectors
  fullName: AssemblerLib.Field.GetGH_Vectors
- uid: Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Vector}
  commentId: T:Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Vector}
  parent: Grasshopper
  definition: Grasshopper.DataTree`1
  name: DataTree<GH_Vector>
  nameWithType: DataTree<GH_Vector>
  fullName: Grasshopper.DataTree<Grasshopper.Kernel.Types.GH_Vector>
  nameWithType.vb: DataTree(Of GH_Vector)
  fullName.vb: Grasshopper.DataTree(Of Grasshopper.Kernel.Types.GH_Vector)
  name.vb: DataTree(Of GH_Vector)
  spec.csharp:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grasshopper.Kernel.Types.GH_Vector
    name: GH_Vector
    nameWithType: GH_Vector
    fullName: Grasshopper.Kernel.Types.GH_Vector
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grasshopper.Kernel.Types.GH_Vector
    name: GH_Vector
    nameWithType: GH_Vector
    fullName: Grasshopper.Kernel.Types.GH_Vector
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Field.GetGH_iWeights*
  commentId: Overload:AssemblerLib.Field.GetGH_iWeights
  name: GetGH_iWeights
  nameWithType: Field.GetGH_iWeights
  fullName: AssemblerLib.Field.GetGH_iWeights
- uid: Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Integer}
  commentId: T:Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Integer}
  parent: Grasshopper
  definition: Grasshopper.DataTree`1
  name: DataTree<GH_Integer>
  nameWithType: DataTree<GH_Integer>
  fullName: Grasshopper.DataTree<Grasshopper.Kernel.Types.GH_Integer>
  nameWithType.vb: DataTree(Of GH_Integer)
  fullName.vb: Grasshopper.DataTree(Of Grasshopper.Kernel.Types.GH_Integer)
  name.vb: DataTree(Of GH_Integer)
  spec.csharp:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grasshopper.Kernel.Types.GH_Integer
    name: GH_Integer
    nameWithType: GH_Integer
    fullName: Grasshopper.Kernel.Types.GH_Integer
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grasshopper.Kernel.Types.GH_Integer
    name: GH_Integer
    nameWithType: GH_Integer
    fullName: Grasshopper.Kernel.Types.GH_Integer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Field.ToString*
  commentId: Overload:AssemblerLib.Field.ToString
  name: ToString
  nameWithType: Field.ToString
  fullName: AssemblerLib.Field.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
