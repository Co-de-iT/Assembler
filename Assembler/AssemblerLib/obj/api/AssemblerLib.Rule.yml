### YamlMime:ManagedReference
items:
- uid: AssemblerLib.Rule
  commentId: T:AssemblerLib.Rule
  id: Rule
  parent: AssemblerLib
  children:
  - AssemblerLib.Rule.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)
  - AssemblerLib.Rule.#ctor(System.String,System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32})
  - AssemblerLib.Rule.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.Int32,System.Int32,System.Int32)
  - AssemblerLib.Rule.iWeight
  - AssemblerLib.Rule.receiverName
  - AssemblerLib.Rule.rH
  - AssemblerLib.Rule.rR
  - AssemblerLib.Rule.rRA
  - AssemblerLib.Rule.rT
  - AssemblerLib.Rule.senderName
  - AssemblerLib.Rule.sH
  - AssemblerLib.Rule.sT
  - AssemblerLib.Rule.ToString
  langs:
  - csharp
  - vb
  name: Rule
  nameWithType: Rule
  fullName: AssemblerLib.Rule
  type: Struct
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: Rule
    path: Rule.cs
    startLine: 8
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nStructure storing indexes to automate Assemblage operations\n"
  example: []
  syntax:
    content: public struct Rule
    content.vb: Public Structure Rule
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: AssemblerLib.Rule.senderName
  commentId: F:AssemblerLib.Rule.senderName
  id: senderName
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: senderName
  nameWithType: Rule.senderName
  fullName: AssemblerLib.Rule.senderName
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: senderName
    path: Rule.cs
    startLine: 13
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nSender object name\n"
  example: []
  syntax:
    content: public readonly string senderName
    return:
      type: System.String
    content.vb: Public ReadOnly senderName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AssemblerLib.Rule.receiverName
  commentId: F:AssemblerLib.Rule.receiverName
  id: receiverName
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: receiverName
  nameWithType: Rule.receiverName
  fullName: AssemblerLib.Rule.receiverName
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: receiverName
    path: Rule.cs
    startLine: 17
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nReceiver object name\n"
  example: []
  syntax:
    content: public readonly string receiverName
    return:
      type: System.String
    content.vb: Public ReadOnly receiverName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AssemblerLib.Rule.sT
  commentId: F:AssemblerLib.Rule.sT
  id: sT
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: sT
  nameWithType: Rule.sT
  fullName: AssemblerLib.Rule.sT
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: sT
    path: Rule.cs
    startLine: 21
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nsender object type\n"
  example: []
  syntax:
    content: public readonly int sT
    return:
      type: System.Int32
    content.vb: Public ReadOnly sT As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AssemblerLib.Rule.sH
  commentId: F:AssemblerLib.Rule.sH
  id: sH
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: sH
  nameWithType: Rule.sH
  fullName: AssemblerLib.Rule.sH
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: sH
    path: Rule.cs
    startLine: 25
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nsender handle index\n"
  example: []
  syntax:
    content: public readonly int sH
    return:
      type: System.Int32
    content.vb: Public ReadOnly sH As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AssemblerLib.Rule.rT
  commentId: F:AssemblerLib.Rule.rT
  id: rT
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: rT
  nameWithType: Rule.rT
  fullName: AssemblerLib.Rule.rT
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: rT
    path: Rule.cs
    startLine: 29
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nreceiver object type\n"
  example: []
  syntax:
    content: public readonly int rT
    return:
      type: System.Int32
    content.vb: Public ReadOnly rT As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AssemblerLib.Rule.rH
  commentId: F:AssemblerLib.Rule.rH
  id: rH
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: rH
  nameWithType: Rule.rH
  fullName: AssemblerLib.Rule.rH
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: rH
    path: Rule.cs
    startLine: 33
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nreceiver handle index\n"
  example: []
  syntax:
    content: public readonly int rH
    return:
      type: System.Int32
    content.vb: Public ReadOnly rH As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AssemblerLib.Rule.rR
  commentId: F:AssemblerLib.Rule.rR
  id: rR
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: rR
  nameWithType: Rule.rR
  fullName: AssemblerLib.Rule.rR
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: rR
    path: Rule.cs
    startLine: 37
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nreceiver rotation index\n"
  example: []
  syntax:
    content: public readonly int rR
    return:
      type: System.Int32
    content.vb: Public ReadOnly rR As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AssemblerLib.Rule.rRA
  commentId: F:AssemblerLib.Rule.rRA
  id: rRA
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: rRA
  nameWithType: Rule.rRA
  fullName: AssemblerLib.Rule.rRA
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: rRA
    path: Rule.cs
    startLine: 41
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nreceiver rotation angle (in degrees)\n"
  example: []
  syntax:
    content: public readonly double rRA
    return:
      type: System.Double
    content.vb: Public ReadOnly rRA As Double
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AssemblerLib.Rule.iWeight
  commentId: F:AssemblerLib.Rule.iWeight
  id: iWeight
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: iWeight
  nameWithType: Rule.iWeight
  fullName: AssemblerLib.Rule.iWeight
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: iWeight
    path: Rule.cs
    startLine: 45
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\ninteger weight\n"
  example: []
  syntax:
    content: public readonly int iWeight
    return:
      type: System.Int32
    content.vb: Public ReadOnly iWeight As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AssemblerLib.Rule.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.Int32,System.Int32,System.Int32)
  commentId: M:AssemblerLib.Rule.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.Int32,System.Int32,System.Int32)'
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: Rule(String, Int32, Int32, Int32, Double, String, Int32, Int32, Int32)
  nameWithType: Rule.Rule(String, Int32, Int32, Int32, Double, String, Int32, Int32, Int32)
  fullName: AssemblerLib.Rule.Rule(System.String, System.Int32, System.Int32, System.Int32, System.Double, System.String, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: .ctor
    path: Rule.cs
    startLine: 59
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConstructs a Rule from constituting parameters\n"
  example: []
  syntax:
    content: public Rule(string receiverName, int rT, int rH, int rR, double rRA, string senderName, int sT, int sH, int iWeight)
    parameters:
    - id: receiverName
      type: System.String
      description: ''
    - id: rT
      type: System.Int32
      description: ''
    - id: rH
      type: System.Int32
      description: ''
    - id: rR
      type: System.Int32
      description: ''
    - id: rRA
      type: System.Double
      description: ''
    - id: senderName
      type: System.String
      description: ''
    - id: sT
      type: System.Int32
      description: ''
    - id: sH
      type: System.Int32
      description: ''
    - id: iWeight
      type: System.Int32
      description: ''
    content.vb: Public Sub New(receiverName As String, rT As Integer, rH As Integer, rR As Integer, rRA As Double, senderName As String, sT As Integer, sH As Integer, iWeight As Integer)
  overload: AssemblerLib.Rule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Rule.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)
  commentId: M:AssemblerLib.Rule.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)'
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: Rule(Int32, Int32, Int32, Double, Int32, Int32)
  nameWithType: Rule.Rule(Int32, Int32, Int32, Double, Int32, Int32)
  fullName: AssemblerLib.Rule.Rule(System.Int32, System.Int32, System.Int32, System.Double, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: .ctor
    path: Rule.cs
    startLine: 81
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConstruct a Rule from basic parameters\n"
  example: []
  syntax:
    content: public Rule(int rT, int rH, int rR, double rRA, int sT, int sH)
    parameters:
    - id: rT
      type: System.Int32
      description: ''
    - id: rH
      type: System.Int32
      description: ''
    - id: rR
      type: System.Int32
      description: ''
    - id: rRA
      type: System.Double
      description: ''
    - id: sT
      type: System.Int32
      description: ''
    - id: sH
      type: System.Int32
      description: ''
    content.vb: Public Sub New(rT As Integer, rH As Integer, rR As Integer, rRA As Double, sT As Integer, sH As Integer)
  overload: AssemblerLib.Rule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AssemblerLib.Rule.#ctor(System.String,System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32})
  commentId: M:AssemblerLib.Rule.#ctor(System.String,System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32})
  id: '#ctor(System.String,System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32})'
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: Rule(String, List<AssemblyObject>, Dictionary<String, Int32>)
  nameWithType: Rule.Rule(String, List<AssemblyObject>, Dictionary<String, Int32>)
  fullName: AssemblerLib.Rule.Rule(System.String, System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.Collections.Generic.Dictionary<System.String, System.Int32>)
  type: Constructor
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: .ctor
    path: Rule.cs
    startLine: 92
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConstruct a Rule from a string, the AssemblyObject set and the Component Dictionary\n"
  example: []
  syntax:
    content: public Rule(string rString, List<AssemblyObject> AOset, Dictionary<string, int> componentDictionary)
    parameters:
    - id: rString
      type: System.String
      description: ''
    - id: AOset
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: ''
    - id: componentDictionary
      type: System.Collections.Generic.Dictionary{System.String,System.Int32}
      description: ''
    content.vb: Public Sub New(rString As String, AOset As List(Of AssemblyObject), componentDictionary As Dictionary(Of String, Integer))
  overload: AssemblerLib.Rule.#ctor*
  nameWithType.vb: Rule.Rule(String, List(Of AssemblyObject), Dictionary(Of String, Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AssemblerLib.Rule.Rule(System.String, System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.Collections.Generic.Dictionary(Of System.String, System.Int32))
  name.vb: Rule(String, List(Of AssemblyObject), Dictionary(Of String, Int32))
- uid: AssemblerLib.Rule.ToString
  commentId: M:AssemblerLib.Rule.ToString
  id: ToString
  parent: AssemblerLib.Rule
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Rule.ToString()
  fullName: AssemblerLib.Rule.ToString()
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
    id: ToString
    path: Rule.cs
    startLine: 119
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConverts a Rule into a corresponding string\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: AssemblerLib.Rule.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: AssemblerLib
  commentId: N:AssemblerLib
  name: AssemblerLib
  nameWithType: AssemblerLib
  fullName: AssemblerLib
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: AssemblerLib.Rule.#ctor*
  commentId: Overload:AssemblerLib.Rule.#ctor
  name: Rule
  nameWithType: Rule.Rule
  fullName: AssemblerLib.Rule.Rule
- uid: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
  commentId: T:System.Collections.Generic.List{AssemblerLib.AssemblyObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<AssemblyObject>
  nameWithType: List<AssemblyObject>
  fullName: System.Collections.Generic.List<AssemblerLib.AssemblyObject>
  nameWithType.vb: List(Of AssemblyObject)
  fullName.vb: System.Collections.Generic.List(Of AssemblerLib.AssemblyObject)
  name.vb: List(Of AssemblyObject)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AssemblerLib.AssemblyObject
    name: AssemblyObject
    nameWithType: AssemblyObject
    fullName: AssemblerLib.AssemblyObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AssemblerLib.AssemblyObject
    name: AssemblyObject
    nameWithType: AssemblyObject
    fullName: AssemblerLib.AssemblyObject
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Int32>
  nameWithType: Dictionary<String, Int32>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Int32>
  nameWithType.vb: Dictionary(Of String, Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Int32)
  name.vb: Dictionary(Of String, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Rule.ToString*
  commentId: Overload:AssemblerLib.Rule.ToString
  name: ToString
  nameWithType: Rule.ToString
  fullName: AssemblerLib.Rule.ToString
