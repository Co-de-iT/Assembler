### YamlMime:ManagedReference
items:
- uid: AssemblerLib.Utilities
  commentId: T:AssemblerLib.Utilities
  id: Utilities
  parent: AssemblerLib
  children:
  - AssemblerLib.Utilities.AbsoluteZCheck(AssemblerLib.AssemblyObject)
  - AssemblerLib.Utilities.AOTypePalette
  - AssemblerLib.Utilities.AppendToFile(System.String,System.String,System.String)
  - AssemblerLib.Utilities.AssemblageFromJSONdump(System.String)
  - AssemblerLib.Utilities.AssemblageToJSONdump(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
  - AssemblerLib.Utilities.AssemblageToJSONSmart(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
  - AssemblerLib.Utilities.AverageUnitized(Rhino.Geometry.Vector3d[])
  - AssemblerLib.Utilities.AverageUnitized(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  - AssemblerLib.Utilities.BuildDictionary(AssemblerLib.AssemblyObject[],System.Boolean)
  - AssemblerLib.Utilities.BuildHandlesHashSet(AssemblerLib.AssemblyObject[])
  - AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  - AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Mesh})
  - AssemblerLib.Utilities.Clone(AssemblerLib.Assemblage)
  - AssemblerLib.Utilities.Clone(AssemblerLib.AssemblyObject)
  - AssemblerLib.Utilities.Clone(AssemblerLib.Handle@)
  - AssemblerLib.Utilities.CloneDictionaryWithValues``2(System.Collections.Generic.Dictionary{``0,``1})
  - AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.AssemblyObject)
  - AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.Handle@)
  - AssemblerLib.Utilities.CollisionCheckAssemblage(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
  - AssemblerLib.Utilities.CollisionCheckAssemblageParallel(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
  - AssemblerLib.Utilities.CollisionCheckNeighbours(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  - AssemblerLib.Utilities.CollisionCheckPair(AssemblerLib.AssemblyObject,AssemblerLib.AssemblyObject)
  - AssemblerLib.Utilities.colorlist
  - AssemblerLib.Utilities.ComputeWeightedNormals(Rhino.Geometry.Mesh)
  - AssemblerLib.Utilities.DegreesToRadians(System.Double)
  - AssemblerLib.Utilities.densityGradient
  - AssemblerLib.Utilities.DeserializeAssemblage(System.String[])
  - AssemblerLib.Utilities.GetGHFilePath(Grasshopper.Kernel.GH_Component)
  - AssemblerLib.Utilities.GetSihouette(Rhino.Geometry.Mesh)
  - AssemblerLib.Utilities.GetUniqueVectors(Rhino.Geometry.Vector3d[],System.Double)
  - AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String})
  - AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String},Grasshopper.DataTree{System.String}@)
  - AssemblerLib.Utilities.historyGradient
  - AssemblerLib.Utilities.IsPointInMesh(Rhino.Geometry.Mesh,Rhino.Geometry.Point3d,System.Double)
  - AssemblerLib.Utilities.LerpColor(System.Drawing.Color,System.Drawing.Color,System.Double)
  - AssemblerLib.Utilities.MeshOffsetWeightedAngle(Rhino.Geometry.Mesh,System.Double)
  - AssemblerLib.Utilities.NormalizeRange(System.Collections.Generic.List{System.Double})
  - AssemblerLib.Utilities.NormalizeRange(System.Double[])
  - AssemblerLib.Utilities.NormalizeRanges(Grasshopper.DataTree{System.Double})
  - AssemblerLib.Utilities.NormalizeRanges(System.Double[][])
  - AssemblerLib.Utilities.ObstructionCheckAssemblage(AssemblerLib.Assemblage,System.Int32)
  - AssemblerLib.Utilities.ObstructionCheckList(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  - AssemblerLib.Utilities.RadiansToDegrees(System.Double)
  - AssemblerLib.Utilities.ReadFileByLines(System.String)
  - AssemblerLib.Utilities.ReadFileUnique(System.String)
  - AssemblerLib.Utilities.RenameKey``2(System.Collections.Generic.Dictionary{``0,``1},``0,``0)
  - AssemblerLib.Utilities.ResetSupports(AssemblerLib.AssemblyObject)
  - AssemblerLib.Utilities.RhinoAbsoluteTolerance
  - AssemblerLib.Utilities.RhinoAbsoluteToleranceSquared
  - AssemblerLib.Utilities.SaveStringsToFile(System.String,System.String,System.String[])
  - AssemblerLib.Utilities.SerializeAssemblage(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  - AssemblerLib.Utilities.SetCollisionMesh(AssemblerLib.AssemblyObject,Rhino.Geometry.Mesh)
  - AssemblerLib.Utilities.SetSupports(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Line},System.Int32)
  - AssemblerLib.Utilities.srPalette
  - AssemblerLib.Utilities.StartWatch(System.Diagnostics.Stopwatch)
  - AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  - AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.MeshEnvironment})
  - AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{Rhino.Geometry.Mesh})
  - AssemblerLib.Utilities.ToDataTree``1(``0[][])
  - AssemblerLib.Utilities.ToDataTree``1(System.Collections.Generic.List{``0[]})
  - AssemblerLib.Utilities.ToJaggedArray``1(Grasshopper.DataTree{``0})
  - AssemblerLib.Utilities.ToListOfArrays``1(Grasshopper.DataTree{``0})
  - AssemblerLib.Utilities.Triangulate(Rhino.Geometry.Mesh)
  - AssemblerLib.Utilities.zHeightGradient
  langs:
  - csharp
  - vb
  name: Utilities
  nameWithType: Utilities
  fullName: AssemblerLib.Utilities
  type: Class
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: Utilities
    path: Utilities.cs
    startLine: 22
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nA static Utilities class grouping some useful methods\n"
  example: []
  syntax:
    content: public static class Utilities
    content.vb: Public Module Utilities
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AssemblerLib.Utilities.RhinoAbsoluteTolerance
  commentId: F:AssemblerLib.Utilities.RhinoAbsoluteTolerance
  id: RhinoAbsoluteTolerance
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: RhinoAbsoluteTolerance
  nameWithType: Utilities.RhinoAbsoluteTolerance
  fullName: AssemblerLib.Utilities.RhinoAbsoluteTolerance
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: RhinoAbsoluteTolerance
    path: Utilities.cs
    startLine: 27
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nTolerance from Rhino file\n"
  example: []
  syntax:
    content: public static readonly double RhinoAbsoluteTolerance
    return:
      type: System.Double
    content.vb: Public Shared ReadOnly RhinoAbsoluteTolerance As Double
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AssemblerLib.Utilities.RhinoAbsoluteToleranceSquared
  commentId: F:AssemblerLib.Utilities.RhinoAbsoluteToleranceSquared
  id: RhinoAbsoluteToleranceSquared
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: RhinoAbsoluteToleranceSquared
  nameWithType: Utilities.RhinoAbsoluteToleranceSquared
  fullName: AssemblerLib.Utilities.RhinoAbsoluteToleranceSquared
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: RhinoAbsoluteToleranceSquared
    path: Utilities.cs
    startLine: 31
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nTolerance squared - for fast neighbour search\n"
  example: []
  syntax:
    content: public static readonly double RhinoAbsoluteToleranceSquared
    return:
      type: System.Double
    content.vb: Public Shared ReadOnly RhinoAbsoluteToleranceSquared As Double
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AssemblerLib.Utilities.historyGradient
  commentId: F:AssemblerLib.Utilities.historyGradient
  id: historyGradient
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: historyGradient
  nameWithType: Utilities.historyGradient
  fullName: AssemblerLib.Utilities.historyGradient
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: historyGradient
    path: Utilities.cs
    startLine: 33
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public static readonly GH_Gradient historyGradient
    return:
      type: Grasshopper.GUI.Gradient.GH_Gradient
    content.vb: Public Shared ReadOnly historyGradient As GH_Gradient
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AssemblerLib.Utilities.zHeightGradient
  commentId: F:AssemblerLib.Utilities.zHeightGradient
  id: zHeightGradient
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: zHeightGradient
  nameWithType: Utilities.zHeightGradient
  fullName: AssemblerLib.Utilities.zHeightGradient
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: zHeightGradient
    path: Utilities.cs
    startLine: 35
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public static readonly GH_Gradient zHeightGradient
    return:
      type: Grasshopper.GUI.Gradient.GH_Gradient
    content.vb: Public Shared ReadOnly zHeightGradient As GH_Gradient
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AssemblerLib.Utilities.densityGradient
  commentId: F:AssemblerLib.Utilities.densityGradient
  id: densityGradient
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: densityGradient
  nameWithType: Utilities.densityGradient
  fullName: AssemblerLib.Utilities.densityGradient
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: densityGradient
    path: Utilities.cs
    startLine: 37
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public static readonly GH_Gradient densityGradient
    return:
      type: Grasshopper.GUI.Gradient.GH_Gradient
    content.vb: Public Shared ReadOnly densityGradient As GH_Gradient
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AssemblerLib.Utilities.AOTypePalette
  commentId: F:AssemblerLib.Utilities.AOTypePalette
  id: AOTypePalette
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: AOTypePalette
  nameWithType: Utilities.AOTypePalette
  fullName: AssemblerLib.Utilities.AOTypePalette
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: AOTypePalette
    path: Utilities.cs
    startLine: 40
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public static readonly Color[] AOTypePalette
    return:
      type: System.Drawing.Color[]
    content.vb: Public Shared ReadOnly AOTypePalette As Color()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AssemblerLib.Utilities.srPalette
  commentId: F:AssemblerLib.Utilities.srPalette
  id: srPalette
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: srPalette
  nameWithType: Utilities.srPalette
  fullName: AssemblerLib.Utilities.srPalette
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: srPalette
    path: Utilities.cs
    startLine: 48
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public static readonly Color[] srPalette
    return:
      type: System.Drawing.Color[]
    content.vb: Public Shared ReadOnly srPalette As Color()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AssemblerLib.Utilities.colorlist
  commentId: F:AssemblerLib.Utilities.colorlist
  id: colorlist
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: colorlist
  nameWithType: Utilities.colorlist
  fullName: AssemblerLib.Utilities.colorlist
  type: Field
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: colorlist
    path: Utilities.cs
    startLine: 54
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public static readonly List<KnownColor> colorlist
    return:
      type: System.Collections.Generic.List{System.Drawing.KnownColor}
    content.vb: Public Shared ReadOnly colorlist As List(Of KnownColor)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AssemblerLib.Utilities.CollisionCheckAssemblage(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
  commentId: M:AssemblerLib.Utilities.CollisionCheckAssemblage(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
  id: CollisionCheckAssemblage(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: CollisionCheckAssemblage(Assemblage, AssemblyObject)
  nameWithType: Utilities.CollisionCheckAssemblage(Assemblage, AssemblyObject)
  fullName: AssemblerLib.Utilities.CollisionCheckAssemblage(AssemblerLib.Assemblage, AssemblerLib.AssemblyObject)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: CollisionCheckAssemblage
    path: Utilities.cs
    startLine: 65
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nCollision Check in the assemblage for a given <xref href=\"AssemblerLib.Assemblage\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static bool CollisionCheckAssemblage(Assemblage AOa, AssemblyObject sO)
    parameters:
    - id: AOa
      type: AssemblerLib.Assemblage
      description: The <xref href="AssemblerLib.Assemblage" data-throw-if-not-resolved="false"></xref> to check
    - id: sO
      type: AssemblerLib.AssemblyObject
      description: The sender <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function CollisionCheckAssemblage(AOa As Assemblage, sO As AssemblyObject) As Boolean
  overload: AssemblerLib.Utilities.CollisionCheckAssemblage*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.CollisionCheckAssemblageParallel(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
  commentId: M:AssemblerLib.Utilities.CollisionCheckAssemblageParallel(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
  id: CollisionCheckAssemblageParallel(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: CollisionCheckAssemblageParallel(Assemblage, AssemblyObject)
  nameWithType: Utilities.CollisionCheckAssemblageParallel(Assemblage, AssemblyObject)
  fullName: AssemblerLib.Utilities.CollisionCheckAssemblageParallel(AssemblerLib.Assemblage, AssemblerLib.AssemblyObject)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: CollisionCheckAssemblageParallel
    path: Utilities.cs
    startLine: 111
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nCollision Check in the assemblage for a given <xref href=\"AssemblerLib.Assemblage\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref> - Parallel version\nWorks but PAINFULLY SLOW\n"
  example: []
  syntax:
    content: public static bool CollisionCheckAssemblageParallel(Assemblage AOa, AssemblyObject sO)
    parameters:
    - id: AOa
      type: AssemblerLib.Assemblage
      description: The <xref href="AssemblerLib.Assemblage" data-throw-if-not-resolved="false"></xref> to check
    - id: sO
      type: AssemblerLib.AssemblyObject
      description: The sender <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function CollisionCheckAssemblageParallel(AOa As Assemblage, sO As AssemblyObject) As Boolean
  overload: AssemblerLib.Utilities.CollisionCheckAssemblageParallel*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.CollisionCheckNeighbours(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  commentId: M:AssemblerLib.Utilities.CollisionCheckNeighbours(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  id: CollisionCheckNeighbours(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: CollisionCheckNeighbours(AssemblyObject, List<AssemblyObject>)
  nameWithType: Utilities.CollisionCheckNeighbours(AssemblyObject, List<AssemblyObject>)
  fullName: AssemblerLib.Utilities.CollisionCheckNeighbours(AssemblerLib.AssemblyObject, System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: CollisionCheckNeighbours
    path: Utilities.cs
    startLine: 160
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nCollision Check in the <xref href=\"AssemblerLib.Assemblage\" data-throw-if-not-resolved=\"false\"></xref> for a given <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static bool CollisionCheckNeighbours(AssemblyObject AO, List<AssemblyObject> neighList)
    parameters:
    - id: AO
      type: AssemblerLib.AssemblyObject
      description: ''
    - id: neighList
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function CollisionCheckNeighbours(AO As AssemblyObject, neighList As List(Of AssemblyObject)) As Boolean
  overload: AssemblerLib.Utilities.CollisionCheckNeighbours*
  nameWithType.vb: Utilities.CollisionCheckNeighbours(AssemblyObject, List(Of AssemblyObject))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.CollisionCheckNeighbours(AssemblerLib.AssemblyObject, System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
  name.vb: CollisionCheckNeighbours(AssemblyObject, List(Of AssemblyObject))
- uid: AssemblerLib.Utilities.CollisionCheckPair(AssemblerLib.AssemblyObject,AssemblerLib.AssemblyObject)
  commentId: M:AssemblerLib.Utilities.CollisionCheckPair(AssemblerLib.AssemblyObject,AssemblerLib.AssemblyObject)
  id: CollisionCheckPair(AssemblerLib.AssemblyObject,AssemblerLib.AssemblyObject)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: CollisionCheckPair(AssemblyObject, AssemblyObject)
  nameWithType: Utilities.CollisionCheckPair(AssemblyObject, AssemblyObject)
  fullName: AssemblerLib.Utilities.CollisionCheckPair(AssemblerLib.AssemblyObject, AssemblerLib.AssemblyObject)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: CollisionCheckPair
    path: Utilities.cs
    startLine: 191
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nCollision Check between 2 <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static bool CollisionCheckPair(AssemblyObject receiver, AssemblyObject sender)
    parameters:
    - id: receiver
      type: AssemblerLib.AssemblyObject
      description: ''
    - id: sender
      type: AssemblerLib.AssemblyObject
      description: ''
    return:
      type: System.Boolean
      description: True if objects are colliding or one contains the other
    content.vb: Public Shared Function CollisionCheckPair(receiver As AssemblyObject, sender As AssemblyObject) As Boolean
  overload: AssemblerLib.Utilities.CollisionCheckPair*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.ObstructionCheckAssemblage(AssemblerLib.Assemblage,System.Int32)
  commentId: M:AssemblerLib.Utilities.ObstructionCheckAssemblage(AssemblerLib.Assemblage,System.Int32)
  id: ObstructionCheckAssemblage(AssemblerLib.Assemblage,System.Int32)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: ObstructionCheckAssemblage(Assemblage, Int32)
  nameWithType: Utilities.ObstructionCheckAssemblage(Assemblage, Int32)
  fullName: AssemblerLib.Utilities.ObstructionCheckAssemblage(AssemblerLib.Assemblage, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: ObstructionCheckAssemblage
    path: Utilities.cs
    startLine: 226
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nCheck obstruction status for an <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"AssemblerLib.Assemblage\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static bool ObstructionCheckAssemblage(Assemblage AOa, int AOindex)
    parameters:
    - id: AOa
      type: AssemblerLib.Assemblage
      description: ''
    - id: AOindex
      type: System.Int32
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function ObstructionCheckAssemblage(AOa As Assemblage, AOindex As Integer) As Boolean
  overload: AssemblerLib.Utilities.ObstructionCheckAssemblage*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.ObstructionCheckList(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  commentId: M:AssemblerLib.Utilities.ObstructionCheckList(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  id: ObstructionCheckList(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: ObstructionCheckList(List<AssemblyObject>)
  nameWithType: Utilities.ObstructionCheckList(List<AssemblyObject>)
  fullName: AssemblerLib.Utilities.ObstructionCheckList(System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: ObstructionCheckList
    path: Utilities.cs
    startLine: 334
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nCheck obstruction and <xref href=\"AssemblerLib.Handle\" data-throw-if-not-resolved=\"false\"></xref> Occupancy in a List of <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref>s\n"
  example: []
  syntax:
    content: public static bool ObstructionCheckList(List<AssemblyObject> AOList)
    parameters:
    - id: AOList
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: List of <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>s to check
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function ObstructionCheckList(AOList As List(Of AssemblyObject)) As Boolean
  overload: AssemblerLib.Utilities.ObstructionCheckList*
  nameWithType.vb: Utilities.ObstructionCheckList(List(Of AssemblyObject))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.ObstructionCheckList(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
  name.vb: ObstructionCheckList(List(Of AssemblyObject))
- uid: AssemblerLib.Utilities.Clone(AssemblerLib.Assemblage)
  commentId: M:AssemblerLib.Utilities.Clone(AssemblerLib.Assemblage)
  id: Clone(AssemblerLib.Assemblage)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: Clone(Assemblage)
  nameWithType: Utilities.Clone(Assemblage)
  fullName: AssemblerLib.Utilities.Clone(AssemblerLib.Assemblage)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: Clone
    path: Utilities.cs
    startLine: 427
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public static Assemblage Clone(Assemblage ass)
    parameters:
    - id: ass
      type: AssemblerLib.Assemblage
    return:
      type: AssemblerLib.Assemblage
    content.vb: Public Shared Function Clone(ass As Assemblage) As Assemblage
  overload: AssemblerLib.Utilities.Clone*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.BuildDictionary(AssemblerLib.AssemblyObject[],System.Boolean)
  commentId: M:AssemblerLib.Utilities.BuildDictionary(AssemblerLib.AssemblyObject[],System.Boolean)
  id: BuildDictionary(AssemblerLib.AssemblyObject[],System.Boolean)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: BuildDictionary(AssemblyObject[], Boolean)
  nameWithType: Utilities.BuildDictionary(AssemblyObject[], Boolean)
  fullName: AssemblerLib.Utilities.BuildDictionary(AssemblerLib.AssemblyObject[], System.Boolean)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: BuildDictionary
    path: Utilities.cs
    startLine: 475
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nBuilds the dictionary of AssemblyObjects\n"
  example: []
  syntax:
    content: public static Dictionary<string, int> BuildDictionary(AssemblyObject[] AOset, bool forceOrder)
    parameters:
    - id: AOset
      type: AssemblerLib.AssemblyObject[]
      description: the array of unique <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>s constituting the set
    - id: forceOrder
      type: System.Boolean
      description: forces the <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>s types to follow the array order
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Int32}
      description: ''
    content.vb: Public Shared Function BuildDictionary(AOset As AssemblyObject(), forceOrder As Boolean) As Dictionary(Of String, Integer)
  overload: AssemblerLib.Utilities.BuildDictionary*
  nameWithType.vb: Utilities.BuildDictionary(AssemblyObject(), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.BuildDictionary(AssemblerLib.AssemblyObject(), System.Boolean)
  name.vb: BuildDictionary(AssemblyObject(), Boolean)
- uid: AssemblerLib.Utilities.BuildHandlesHashSet(AssemblerLib.AssemblyObject[])
  commentId: M:AssemblerLib.Utilities.BuildHandlesHashSet(AssemblerLib.AssemblyObject[])
  id: BuildHandlesHashSet(AssemblerLib.AssemblyObject[])
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: BuildHandlesHashSet(AssemblyObject[])
  nameWithType: Utilities.BuildHandlesHashSet(AssemblyObject[])
  fullName: AssemblerLib.Utilities.BuildHandlesHashSet(AssemblerLib.AssemblyObject[])
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: BuildHandlesHashSet
    path: Utilities.cs
    startLine: 494
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nBuilds the Handles HashSet - for compatibility checks of loaded assemblages\n"
  example: []
  syntax:
    content: public static HashSet<int> BuildHandlesHashSet(AssemblyObject[] AOset)
    parameters:
    - id: AOset
      type: AssemblerLib.AssemblyObject[]
      description: the array of unique AssemblyObjects constituting the set
    return:
      type: System.Collections.Generic.HashSet{System.Int32}
      description: ''
    content.vb: Public Shared Function BuildHandlesHashSet(AOset As AssemblyObject()) As HashSet(Of Integer)
  overload: AssemblerLib.Utilities.BuildHandlesHashSet*
  nameWithType.vb: Utilities.BuildHandlesHashSet(AssemblyObject())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.BuildHandlesHashSet(AssemblerLib.AssemblyObject())
  name.vb: BuildHandlesHashSet(AssemblyObject())
- uid: AssemblerLib.Utilities.Clone(AssemblerLib.AssemblyObject)
  commentId: M:AssemblerLib.Utilities.Clone(AssemblerLib.AssemblyObject)
  id: Clone(AssemblerLib.AssemblyObject)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: Clone(AssemblyObject)
  nameWithType: Utilities.Clone(AssemblyObject)
  fullName: AssemblerLib.Utilities.Clone(AssemblerLib.AssemblyObject)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: Clone
    path: Utilities.cs
    startLine: 509
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nClones an AssemblyObject as an asset, without the connectivity information\n"
  example: []
  syntax:
    content: public static AssemblyObject Clone(AssemblyObject AO)
    parameters:
    - id: AO
      type: AssemblerLib.AssemblyObject
      description: ''
    return:
      type: AssemblerLib.AssemblyObject
      description: a cloned AssemblyObejct
    content.vb: Public Shared Function Clone(AO As AssemblyObject) As AssemblyObject
  overload: AssemblerLib.Utilities.Clone*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.AssemblyObject)
  commentId: M:AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.AssemblyObject)
  id: CloneWithConnectivity(AssemblerLib.AssemblyObject)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: CloneWithConnectivity(AssemblyObject)
  nameWithType: Utilities.CloneWithConnectivity(AssemblyObject)
  fullName: AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.AssemblyObject)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: CloneWithConnectivity
    path: Utilities.cs
    startLine: 554
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nDuplicates an AssemblyObject preserving connectivity information. Useful for previous assemblages and the Goo wrapper.\n"
  example: []
  syntax:
    content: public static AssemblyObject CloneWithConnectivity(AssemblyObject AO)
    parameters:
    - id: AO
      type: AssemblerLib.AssemblyObject
      description: The Original AssemblyObject
    return:
      type: AssemblerLib.AssemblyObject
      description: A duplicated AssemblyObject with the same connectivity of the source
    content.vb: Public Shared Function CloneWithConnectivity(AO As AssemblyObject) As AssemblyObject
  overload: AssemblerLib.Utilities.CloneWithConnectivity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.SetCollisionMesh(AssemblerLib.AssemblyObject,Rhino.Geometry.Mesh)
  commentId: M:AssemblerLib.Utilities.SetCollisionMesh(AssemblerLib.AssemblyObject,Rhino.Geometry.Mesh)
  id: SetCollisionMesh(AssemblerLib.AssemblyObject,Rhino.Geometry.Mesh)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: SetCollisionMesh(AssemblyObject, Mesh)
  nameWithType: Utilities.SetCollisionMesh(AssemblyObject, Mesh)
  fullName: AssemblerLib.Utilities.SetCollisionMesh(AssemblerLib.AssemblyObject, Rhino.Geometry.Mesh)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: SetCollisionMesh
    path: Utilities.cs
    startLine: 571
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nSet a new CollisionMesh for the AssemblyObject\n"
  example: []
  syntax:
    content: public static void SetCollisionMesh(AssemblyObject AO, Mesh newCollisionMesh)
    parameters:
    - id: AO
      type: AssemblerLib.AssemblyObject
      description: ''
    - id: newCollisionMesh
      type: Rhino.Geometry.Mesh
      description: ''
    content.vb: Public Shared Sub SetCollisionMesh(AO As AssemblyObject, newCollisionMesh As Mesh)
  overload: AssemblerLib.Utilities.SetCollisionMesh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.AbsoluteZCheck(AssemblerLib.AssemblyObject)
  commentId: M:AssemblerLib.Utilities.AbsoluteZCheck(AssemblerLib.AssemblyObject)
  id: AbsoluteZCheck(AssemblerLib.AssemblyObject)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: AbsoluteZCheck(AssemblyObject)
  nameWithType: Utilities.AbsoluteZCheck(AssemblyObject)
  fullName: AssemblerLib.Utilities.AbsoluteZCheck(AssemblerLib.AssemblyObject)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: AbsoluteZCheck
    path: Utilities.cs
    startLine: 585
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nPerforms a check for World Z-Axis orientation of the AssemblyObject\n"
  example: []
  syntax:
    content: public static bool AbsoluteZCheck(AssemblyObject AO)
    parameters:
    - id: AO
      type: AssemblerLib.AssemblyObject
      description: the <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref> to check
    return:
      type: System.Boolean
      description: true if the Z axis of the object Reference Plane is oriented along the World Z
    content.vb: Public Shared Function AbsoluteZCheck(AO As AssemblyObject) As Boolean
  overload: AssemblerLib.Utilities.AbsoluteZCheck*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.SetSupports(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Line},System.Int32)
  commentId: M:AssemblerLib.Utilities.SetSupports(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Line},System.Int32)
  id: SetSupports(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Line},System.Int32)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: SetSupports(AssemblyObject, List<Line>, Int32)
  nameWithType: Utilities.SetSupports(AssemblyObject, List<Line>, Int32)
  fullName: AssemblerLib.Utilities.SetSupports(AssemblerLib.AssemblyObject, System.Collections.Generic.List<Rhino.Geometry.Line>, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: SetSupports
    path: Utilities.cs
    startLine: 601
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nAdd Supports to the AssemblyObject - returns true if successful\n"
  example: []
  syntax:
    content: public static bool SetSupports(AssemblyObject AO, List<Line> lines, int minSupports)
    parameters:
    - id: AO
      type: AssemblerLib.AssemblyObject
      description: ''
    - id: lines
      type: System.Collections.Generic.List{Rhino.Geometry.Line}
      description: ''
    - id: minSupports
      type: System.Int32
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function SetSupports(AO As AssemblyObject, lines As List(Of Line), minSupports As Integer) As Boolean
  overload: AssemblerLib.Utilities.SetSupports*
  nameWithType.vb: Utilities.SetSupports(AssemblyObject, List(Of Line), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.SetSupports(AssemblerLib.AssemblyObject, System.Collections.Generic.List(Of Rhino.Geometry.Line), System.Int32)
  name.vb: SetSupports(AssemblyObject, List(Of Line), Int32)
- uid: AssemblerLib.Utilities.ResetSupports(AssemblerLib.AssemblyObject)
  commentId: M:AssemblerLib.Utilities.ResetSupports(AssemblerLib.AssemblyObject)
  id: ResetSupports(AssemblerLib.AssemblyObject)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: ResetSupports(AssemblyObject)
  nameWithType: Utilities.ResetSupports(AssemblyObject)
  fullName: AssemblerLib.Utilities.ResetSupports(AssemblerLib.AssemblyObject)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: ResetSupports
    path: Utilities.cs
    startLine: 619
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nResets <xref href=\"AssemblerLib.Support\" data-throw-if-not-resolved=\"false\"></xref>s for an <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static void ResetSupports(AssemblyObject AO)
    parameters:
    - id: AO
      type: AssemblerLib.AssemblyObject
      description: ''
    content.vb: Public Shared Sub ResetSupports(AO As AssemblyObject)
  overload: AssemblerLib.Utilities.ResetSupports*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  commentId: M:AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  id: CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: CheckSupport(AssemblyObject, List<AssemblyObject>)
  nameWithType: Utilities.CheckSupport(AssemblyObject, List<AssemblyObject>)
  fullName: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject, System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: CheckSupport
    path: Utilities.cs
    startLine: 633
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nCheck if the object is supported by a list of neighbouring AssemblyObjects\n"
  example: []
  syntax:
    content: public static bool CheckSupport(AssemblyObject AO, List<AssemblyObject> neighbours)
    parameters:
    - id: AO
      type: AssemblerLib.AssemblyObject
      description: ''
    - id: neighbours
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function CheckSupport(AO As AssemblyObject, neighbours As List(Of AssemblyObject)) As Boolean
  overload: AssemblerLib.Utilities.CheckSupport*
  nameWithType.vb: Utilities.CheckSupport(AssemblyObject, List(Of AssemblyObject))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject, System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
  name.vb: CheckSupport(AssemblyObject, List(Of AssemblyObject))
- uid: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Mesh})
  commentId: M:AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Mesh})
  id: CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Mesh})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: CheckSupport(AssemblyObject, List<Mesh>)
  nameWithType: Utilities.CheckSupport(AssemblyObject, List<Mesh>)
  fullName: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject, System.Collections.Generic.List<Rhino.Geometry.Mesh>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: CheckSupport
    path: Utilities.cs
    startLine: 666
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nCheck if the object is supported by a list of neighbouring Meshes\n"
  example: []
  syntax:
    content: public static bool CheckSupport(AssemblyObject AO, List<Mesh> neighMeshes)
    parameters:
    - id: AO
      type: AssemblerLib.AssemblyObject
      description: ''
    - id: neighMeshes
      type: System.Collections.Generic.List{Rhino.Geometry.Mesh}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function CheckSupport(AO As AssemblyObject, neighMeshes As List(Of Mesh)) As Boolean
  overload: AssemblerLib.Utilities.CheckSupport*
  nameWithType.vb: Utilities.CheckSupport(AssemblyObject, List(Of Mesh))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject, System.Collections.Generic.List(Of Rhino.Geometry.Mesh))
  name.vb: CheckSupport(AssemblyObject, List(Of Mesh))
- uid: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  commentId: M:AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  id: SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: SupportIntersect(Support, List<AssemblyObject>)
  nameWithType: Utilities.SupportIntersect(Support, List<AssemblyObject>)
  fullName: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: SupportIntersect
    path: Utilities.cs
    startLine: 698
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nCheck intersection of a Support with a list of AssemblyObjects\n"
  example: []
  syntax:
    content: public static bool SupportIntersect(Support s, List<AssemblyObject> neighbours)
    parameters:
    - id: s
      type: AssemblerLib.Support
      description: ''
    - id: neighbours
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function SupportIntersect(s As Support, neighbours As List(Of AssemblyObject)) As Boolean
  overload: AssemblerLib.Utilities.SupportIntersect*
  nameWithType.vb: Utilities.SupportIntersect(Support, List(Of AssemblyObject))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
  name.vb: SupportIntersect(Support, List(Of AssemblyObject))
- uid: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.MeshEnvironment})
  commentId: M:AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.MeshEnvironment})
  id: SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.MeshEnvironment})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: SupportIntersect(Support, List<MeshEnvironment>)
  nameWithType: Utilities.SupportIntersect(Support, List<MeshEnvironment>)
  fullName: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List<AssemblerLib.MeshEnvironment>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: SupportIntersect
    path: Utilities.cs
    startLine: 735
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nCheck intersection of a Support with a list of MeshEnvironment\n"
  example: []
  syntax:
    content: public static bool SupportIntersect(Support s, List<MeshEnvironment> envMeshes)
    parameters:
    - id: s
      type: AssemblerLib.Support
      description: ''
    - id: envMeshes
      type: System.Collections.Generic.List{AssemblerLib.MeshEnvironment}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function SupportIntersect(s As Support, envMeshes As List(Of MeshEnvironment)) As Boolean
  overload: AssemblerLib.Utilities.SupportIntersect*
  nameWithType.vb: Utilities.SupportIntersect(Support, List(Of MeshEnvironment))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List(Of AssemblerLib.MeshEnvironment))
  name.vb: SupportIntersect(Support, List(Of MeshEnvironment))
- uid: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{Rhino.Geometry.Mesh})
  commentId: M:AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{Rhino.Geometry.Mesh})
  id: SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{Rhino.Geometry.Mesh})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: SupportIntersect(Support, List<Mesh>)
  nameWithType: Utilities.SupportIntersect(Support, List<Mesh>)
  fullName: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List<Rhino.Geometry.Mesh>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: SupportIntersect
    path: Utilities.cs
    startLine: 767
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nCheck intersection of a Support with a list of Meshes\n"
  example: []
  syntax:
    content: public static bool SupportIntersect(Support s, List<Mesh> meshes)
    parameters:
    - id: s
      type: AssemblerLib.Support
      description: ''
    - id: meshes
      type: System.Collections.Generic.List{Rhino.Geometry.Mesh}
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function SupportIntersect(s As Support, meshes As List(Of Mesh)) As Boolean
  overload: AssemblerLib.Utilities.SupportIntersect*
  nameWithType.vb: Utilities.SupportIntersect(Support, List(Of Mesh))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List(Of Rhino.Geometry.Mesh))
  name.vb: SupportIntersect(Support, List(Of Mesh))
- uid: AssemblerLib.Utilities.Clone(AssemblerLib.Handle@)
  commentId: M:AssemblerLib.Utilities.Clone(AssemblerLib.Handle@)
  id: Clone(AssemblerLib.Handle@)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: Clone(ref Handle)
  nameWithType: Utilities.Clone(ref Handle)
  fullName: AssemblerLib.Utilities.Clone(ref AssemblerLib.Handle)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: Clone
    path: Utilities.cs
    startLine: 804
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nClones a Handle\n"
  example: []
  syntax:
    content: public static Handle Clone(ref Handle handle)
    parameters:
    - id: handle
      type: AssemblerLib.Handle
      description: ''
    return:
      type: AssemblerLib.Handle
      description: a cloned Handle
    content.vb: Public Shared Function Clone(ByRef handle As Handle) As Handle
  overload: AssemblerLib.Utilities.Clone*
  nameWithType.vb: Utilities.Clone(ByRef Handle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.Clone(ByRef AssemblerLib.Handle)
  name.vb: Clone(ByRef Handle)
- uid: AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.Handle@)
  commentId: M:AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.Handle@)
  id: CloneWithConnectivity(AssemblerLib.Handle@)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: CloneWithConnectivity(ref Handle)
  nameWithType: Utilities.CloneWithConnectivity(ref Handle)
  fullName: AssemblerLib.Utilities.CloneWithConnectivity(ref AssemblerLib.Handle)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: CloneWithConnectivity
    path: Utilities.cs
    startLine: 828
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nDuplicates a Handle preserving connectivity information\n"
  example: []
  syntax:
    content: public static Handle CloneWithConnectivity(ref Handle handle)
    parameters:
    - id: handle
      type: AssemblerLib.Handle
      description: ''
    return:
      type: AssemblerLib.Handle
      description: a duplicated Handle with the same connectivity
    content.vb: Public Shared Function CloneWithConnectivity(ByRef handle As Handle) As Handle
  overload: AssemblerLib.Utilities.CloneWithConnectivity*
  nameWithType.vb: Utilities.CloneWithConnectivity(ByRef Handle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.CloneWithConnectivity(ByRef AssemblerLib.Handle)
  name.vb: CloneWithConnectivity(ByRef Handle)
- uid: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String},Grasshopper.DataTree{System.String}@)
  commentId: M:AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String},Grasshopper.DataTree{System.String}@)
  id: HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String},Grasshopper.DataTree{System.String}@)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: HeuristicsRulesFromString(List<AssemblyObject>, Dictionary<String, Int32>, List<String>, out DataTree<String>)
  nameWithType: Utilities.HeuristicsRulesFromString(List<AssemblyObject>, Dictionary<String, Int32>, List<String>, out DataTree<String>)
  fullName: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.Collections.Generic.Dictionary<System.String, System.Int32>, System.Collections.Generic.List<System.String>, out Grasshopper.DataTree<System.String>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: HeuristicsRulesFromString
    path: Utilities.cs
    startLine: 858
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nReturns a list of Rules from a heuristics string, outputs also a Data Tree of the rules strings\n"
  example: []
  syntax:
    content: public static List<Rule> HeuristicsRulesFromString(List<AssemblyObject> AOset, Dictionary<string, int> AOCatalog, List<string> heuristics, out DataTree<string> heuristicsTree)
    parameters:
    - id: AOset
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: ''
    - id: AOCatalog
      type: System.Collections.Generic.Dictionary{System.String,System.Int32}
      description: ''
    - id: heuristics
      type: System.Collections.Generic.List{System.String}
      description: ''
    - id: heuristicsTree
      type: Grasshopper.DataTree{System.String}
      description: ''
    return:
      type: System.Collections.Generic.List{AssemblerLib.Rule}
      description: ''
    content.vb: Public Shared Function HeuristicsRulesFromString(AOset As List(Of AssemblyObject), AOCatalog As Dictionary(Of String, Integer), heuristics As List(Of String), ByRef heuristicsTree As DataTree(Of String)) As List(Of Rule)
  overload: AssemblerLib.Utilities.HeuristicsRulesFromString*
  nameWithType.vb: Utilities.HeuristicsRulesFromString(List(Of AssemblyObject), Dictionary(Of String, Int32), List(Of String), ByRef DataTree(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.Collections.Generic.Dictionary(Of System.String, System.Int32), System.Collections.Generic.List(Of System.String), ByRef Grasshopper.DataTree(Of System.String))
  name.vb: HeuristicsRulesFromString(List(Of AssemblyObject), Dictionary(Of String, Int32), List(Of String), ByRef DataTree(Of String))
- uid: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String})
  commentId: M:AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String})
  id: HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: HeuristicsRulesFromString(List<AssemblyObject>, Dictionary<String, Int32>, List<String>)
  nameWithType: Utilities.HeuristicsRulesFromString(List<AssemblyObject>, Dictionary<String, Int32>, List<String>)
  fullName: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.Collections.Generic.Dictionary<System.String, System.Int32>, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: HeuristicsRulesFromString
    path: Utilities.cs
    startLine: 876
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nReturns a list of Rules from a heuristics string\n"
  example: []
  syntax:
    content: public static List<Rule> HeuristicsRulesFromString(List<AssemblyObject> AOset, Dictionary<string, int> AOCatalog, List<string> heuristics)
    parameters:
    - id: AOset
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: ''
    - id: AOCatalog
      type: System.Collections.Generic.Dictionary{System.String,System.Int32}
      description: ''
    - id: heuristics
      type: System.Collections.Generic.List{System.String}
      description: ''
    return:
      type: System.Collections.Generic.List{AssemblerLib.Rule}
      description: ''
    content.vb: Public Shared Function HeuristicsRulesFromString(AOset As List(Of AssemblyObject), AOCatalog As Dictionary(Of String, Integer), heuristics As List(Of String)) As List(Of Rule)
  overload: AssemblerLib.Utilities.HeuristicsRulesFromString*
  nameWithType.vb: Utilities.HeuristicsRulesFromString(List(Of AssemblyObject), Dictionary(Of String, Int32), List(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.Collections.Generic.Dictionary(Of System.String, System.Int32), System.Collections.Generic.List(Of System.String))
  name.vb: HeuristicsRulesFromString(List(Of AssemblyObject), Dictionary(Of String, Int32), List(Of String))
- uid: AssemblerLib.Utilities.AssemblageFromJSONdump(System.String)
  commentId: M:AssemblerLib.Utilities.AssemblageFromJSONdump(System.String)
  id: AssemblageFromJSONdump(System.String)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: AssemblageFromJSONdump(String)
  nameWithType: Utilities.AssemblageFromJSONdump(String)
  fullName: AssemblerLib.Utilities.AssemblageFromJSONdump(System.String)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: AssemblageFromJSONdump
    path: Utilities.cs
    startLine: 943
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nRebuilds and Assemblage from a JSON dump\n"
  example: []
  syntax:
    content: public static List<AssemblyObject> AssemblageFromJSONdump(string path)
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: An Assemblage as list of AssemblyObject
    content.vb: Public Shared Function AssemblageFromJSONdump(path As String) As List(Of AssemblyObject)
  overload: AssemblerLib.Utilities.AssemblageFromJSONdump*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.AssemblageToJSONdump(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
  commentId: M:AssemblerLib.Utilities.AssemblageToJSONdump(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
  id: AssemblageToJSONdump(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: AssemblageToJSONdump(List<AssemblyObject>, String, String)
  nameWithType: Utilities.AssemblageToJSONdump(List<AssemblyObject>, String, String)
  fullName: AssemblerLib.Utilities.AssemblageToJSONdump(System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: AssemblageToJSONdump
    path: Utilities.cs
    startLine: 955
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nSaves an Assemblage as a JSON file dump - every object is serialized in its entirety\n"
  example: []
  syntax:
    content: public static string AssemblageToJSONdump(List<AssemblyObject> assemblage, string path, string name)
    parameters:
    - id: assemblage
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: ''
    - id: path
      type: System.String
      description: ''
    - id: name
      type: System.String
      description: ''
    return:
      type: System.String
      description: File name (with full path) of the saved assemblage
    content.vb: Public Shared Function AssemblageToJSONdump(assemblage As List(Of AssemblyObject), path As String, name As String) As String
  overload: AssemblerLib.Utilities.AssemblageToJSONdump*
  nameWithType.vb: Utilities.AssemblageToJSONdump(List(Of AssemblyObject), String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.AssemblageToJSONdump(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.String, System.String)
  name.vb: AssemblageToJSONdump(List(Of AssemblyObject), String, String)
- uid: AssemblerLib.Utilities.AssemblageToJSONSmart(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
  commentId: M:AssemblerLib.Utilities.AssemblageToJSONSmart(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
  id: AssemblageToJSONSmart(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: AssemblageToJSONSmart(List<AssemblyObject>, String, String)
  nameWithType: Utilities.AssemblageToJSONSmart(List<AssemblyObject>, String, String)
  fullName: AssemblerLib.Utilities.AssemblageToJSONSmart(System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: AssemblageToJSONSmart
    path: Utilities.cs
    startLine: 980
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nTO-DO - COMPLETE THIS METHOD\n"
  example: []
  syntax:
    content: public static void AssemblageToJSONSmart(List<AssemblyObject> assemblage, string path, string name)
    parameters:
    - id: assemblage
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: ''
    - id: path
      type: System.String
      description: ''
    - id: name
      type: System.String
      description: ''
    content.vb: Public Shared Sub AssemblageToJSONSmart(assemblage As List(Of AssemblyObject), path As String, name As String)
  overload: AssemblerLib.Utilities.AssemblageToJSONSmart*
  nameWithType.vb: Utilities.AssemblageToJSONSmart(List(Of AssemblyObject), String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.AssemblageToJSONSmart(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.String, System.String)
  name.vb: AssemblageToJSONSmart(List(Of AssemblyObject), String, String)
- uid: AssemblerLib.Utilities.ReadFileUnique(System.String)
  commentId: M:AssemblerLib.Utilities.ReadFileUnique(System.String)
  id: ReadFileUnique(System.String)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: ReadFileUnique(String)
  nameWithType: Utilities.ReadFileUnique(String)
  fullName: AssemblerLib.Utilities.ReadFileUnique(System.String)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: ReadFileUnique
    path: Utilities.cs
    startLine: 1026
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nReads a file as a unique string\n"
  example: []
  syntax:
    content: public static string ReadFileUnique(string path)
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function ReadFileUnique(path As String) As String
  overload: AssemblerLib.Utilities.ReadFileUnique*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.ReadFileByLines(System.String)
  commentId: M:AssemblerLib.Utilities.ReadFileByLines(System.String)
  id: ReadFileByLines(System.String)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: ReadFileByLines(String)
  nameWithType: Utilities.ReadFileByLines(String)
  fullName: AssemblerLib.Utilities.ReadFileByLines(System.String)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: ReadFileByLines
    path: Utilities.cs
    startLine: 1036
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nReads a file by line\n"
  example: []
  syntax:
    content: public static string[] ReadFileByLines(string path)
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: System.String[]
      description: ''
    content.vb: Public Shared Function ReadFileByLines(path As String) As String()
  overload: AssemblerLib.Utilities.ReadFileByLines*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.SaveStringsToFile(System.String,System.String,System.String[])
  commentId: M:AssemblerLib.Utilities.SaveStringsToFile(System.String,System.String,System.String[])
  id: SaveStringsToFile(System.String,System.String,System.String[])
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: SaveStringsToFile(String, String, String[])
  nameWithType: Utilities.SaveStringsToFile(String, String, String[])
  fullName: AssemblerLib.Utilities.SaveStringsToFile(System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: SaveStringsToFile
    path: Utilities.cs
    startLine: 1047
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nSaves an array of strings to a file in a given path\n"
  example: []
  syntax:
    content: public static void SaveStringsToFile(string directory, string fileName, string[] data)
    parameters:
    - id: directory
      type: System.String
      description: ''
    - id: fileName
      type: System.String
      description: ''
    - id: data
      type: System.String[]
      description: ''
    content.vb: Public Shared Sub SaveStringsToFile(directory As String, fileName As String, data As String())
  overload: AssemblerLib.Utilities.SaveStringsToFile*
  nameWithType.vb: Utilities.SaveStringsToFile(String, String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.SaveStringsToFile(System.String, System.String, System.String())
  name.vb: SaveStringsToFile(String, String, String())
- uid: AssemblerLib.Utilities.AppendToFile(System.String,System.String,System.String)
  commentId: M:AssemblerLib.Utilities.AppendToFile(System.String,System.String,System.String)
  id: AppendToFile(System.String,System.String,System.String)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: AppendToFile(String, String, String)
  nameWithType: Utilities.AppendToFile(String, String, String)
  fullName: AssemblerLib.Utilities.AppendToFile(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: AppendToFile
    path: Utilities.cs
    startLine: 1057
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public static void AppendToFile(string directory, string fileName, string data)
    parameters:
    - id: directory
      type: System.String
    - id: fileName
      type: System.String
    - id: data
      type: System.String
    content.vb: Public Shared Sub AppendToFile(directory As String, fileName As String, data As String)
  overload: AssemblerLib.Utilities.AppendToFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.GetGHFilePath(Grasshopper.Kernel.GH_Component)
  commentId: M:AssemblerLib.Utilities.GetGHFilePath(Grasshopper.Kernel.GH_Component)
  id: GetGHFilePath(Grasshopper.Kernel.GH_Component)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: GetGHFilePath(GH_Component)
  nameWithType: Utilities.GetGHFilePath(GH_Component)
  fullName: AssemblerLib.Utilities.GetGHFilePath(Grasshopper.Kernel.GH_Component)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: GetGHFilePath
    path: Utilities.cs
    startLine: 1070
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nGets the GH File Path when called from a component\n"
  example: []
  syntax:
    content: public static string GetGHFilePath(GH_Component caller)
    parameters:
    - id: caller
      type: Grasshopper.Kernel.GH_Component
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function GetGHFilePath(caller As GH_Component) As String
  overload: AssemblerLib.Utilities.GetGHFilePath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.SerializeAssemblage(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  commentId: M:AssemblerLib.Utilities.SerializeAssemblage(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  id: SerializeAssemblage(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: SerializeAssemblage(List<AssemblyObject>)
  nameWithType: Utilities.SerializeAssemblage(List<AssemblyObject>)
  fullName: AssemblerLib.Utilities.SerializeAssemblage(System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: SerializeAssemblage
    path: Utilities.cs
    startLine: 1092
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nSerializes an assemblage into a string array for subsequent file saving\n"
  example: []
  syntax:
    content: public static string[] SerializeAssemblage(List<AssemblyObject> assemblage)
    parameters:
    - id: assemblage
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: ''
    return:
      type: System.String[]
      description: ''
    content.vb: Public Shared Function SerializeAssemblage(assemblage As List(Of AssemblyObject)) As String()
  overload: AssemblerLib.Utilities.SerializeAssemblage*
  nameWithType.vb: Utilities.SerializeAssemblage(List(Of AssemblyObject))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.SerializeAssemblage(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
  name.vb: SerializeAssemblage(List(Of AssemblyObject))
- uid: AssemblerLib.Utilities.DeserializeAssemblage(System.String[])
  commentId: M:AssemblerLib.Utilities.DeserializeAssemblage(System.String[])
  id: DeserializeAssemblage(System.String[])
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: DeserializeAssemblage(String[])
  nameWithType: Utilities.DeserializeAssemblage(String[])
  fullName: AssemblerLib.Utilities.DeserializeAssemblage(System.String[])
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: DeserializeAssemblage
    path: Utilities.cs
    startLine: 1114
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nDeserializes a string array into an AssemblyObject assemblage after file loading\n"
  example: []
  syntax:
    content: public static List<AssemblyObject> DeserializeAssemblage(string[] AOjson)
    parameters:
    - id: AOjson
      type: System.String[]
      description: ''
    return:
      type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      description: ''
    content.vb: Public Shared Function DeserializeAssemblage(AOjson As String()) As List(Of AssemblyObject)
  overload: AssemblerLib.Utilities.DeserializeAssemblage*
  nameWithType.vb: Utilities.DeserializeAssemblage(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.DeserializeAssemblage(System.String())
  name.vb: DeserializeAssemblage(String())
- uid: AssemblerLib.Utilities.IsPointInMesh(Rhino.Geometry.Mesh,Rhino.Geometry.Point3d,System.Double)
  commentId: M:AssemblerLib.Utilities.IsPointInMesh(Rhino.Geometry.Mesh,Rhino.Geometry.Point3d,System.Double)
  id: IsPointInMesh(Rhino.Geometry.Mesh,Rhino.Geometry.Point3d,System.Double)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: IsPointInMesh(Mesh, Point3d, Double)
  nameWithType: Utilities.IsPointInMesh(Mesh, Point3d, Double)
  fullName: AssemblerLib.Utilities.IsPointInMesh(Rhino.Geometry.Mesh, Rhino.Geometry.Point3d, System.Double)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: IsPointInMesh
    path: Utilities.cs
    startLine: 1140
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nChecks if point P is inside a Mesh by checking angle of projection vector with face normal\n"
  remarks: This returns some false positives - use Mesh.IsPointInside() native function instead
  example: []
  syntax:
    content: public static bool IsPointInMesh(Mesh mesh, Point3d testPoint, double searchDist)
    parameters:
    - id: mesh
      type: Rhino.Geometry.Mesh
    - id: testPoint
      type: Rhino.Geometry.Point3d
      description: the point to check
    - id: searchDist
      type: System.Double
      description: maximum distance for inclusion check
    return:
      type: System.Boolean
      description: true if point is inside the mesh
    content.vb: Public Shared Function IsPointInMesh(mesh As Mesh, testPoint As Point3d, searchDist As Double) As Boolean
  overload: AssemblerLib.Utilities.IsPointInMesh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.MeshOffsetWeightedAngle(Rhino.Geometry.Mesh,System.Double)
  commentId: M:AssemblerLib.Utilities.MeshOffsetWeightedAngle(Rhino.Geometry.Mesh,System.Double)
  id: MeshOffsetWeightedAngle(Rhino.Geometry.Mesh,System.Double)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: MeshOffsetWeightedAngle(Mesh, Double)
  nameWithType: Utilities.MeshOffsetWeightedAngle(Mesh, Double)
  fullName: AssemblerLib.Utilities.MeshOffsetWeightedAngle(Rhino.Geometry.Mesh, System.Double)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: MeshOffsetWeightedAngle
    path: Utilities.cs
    startLine: 1156
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nImproves Mesh Offset using a bespoke method for Mesh normal calculation, based on face angle weighing\nreference: https://stackoverflow.com/questions/25100120/how-does-blender-calculate-vertex-normals\nand: http://www.bytehazard.com/articles/vertnorm.html\n"
  remarks: This method generates better offset meshes in most cases (concave, convex, comples shapes, etc.)
  example: []
  syntax:
    content: public static Mesh MeshOffsetWeightedAngle(Mesh mesh, double offsetDistance)
    parameters:
    - id: mesh
      type: Rhino.Geometry.Mesh
      description: ''
    - id: offsetDistance
      type: System.Double
      description: ''
    return:
      type: Rhino.Geometry.Mesh
      description: An offset Mesh
    content.vb: Public Shared Function MeshOffsetWeightedAngle(mesh As Mesh, offsetDistance As Double) As Mesh
  overload: AssemblerLib.Utilities.MeshOffsetWeightedAngle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.ComputeWeightedNormals(Rhino.Geometry.Mesh)
  commentId: M:AssemblerLib.Utilities.ComputeWeightedNormals(Rhino.Geometry.Mesh)
  id: ComputeWeightedNormals(Rhino.Geometry.Mesh)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: ComputeWeightedNormals(Mesh)
  nameWithType: Utilities.ComputeWeightedNormals(Mesh)
  fullName: AssemblerLib.Utilities.ComputeWeightedNormals(Rhino.Geometry.Mesh)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: ComputeWeightedNormals
    path: Utilities.cs
    startLine: 1192
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nComputes Mesh normals weighted by the face angle at each vertex\nMesh weighted normals implemented from the tips at the folowing pages:\nhttps://stackoverflow.com/questions/25100120/how-does-blender-calculate-vertex-normals\nhttp://www.bytehazard.com/articles/vertnorm.html\n"
  example: []
  syntax:
    content: public static Vector3d[] ComputeWeightedNormals(Mesh mesh)
    parameters:
    - id: mesh
      type: Rhino.Geometry.Mesh
      description: ''
    return:
      type: Rhino.Geometry.Vector3d[]
      description: Weighted Normals as a Vector3d array
    content.vb: Public Shared Function ComputeWeightedNormals(mesh As Mesh) As Vector3d()
  overload: AssemblerLib.Utilities.ComputeWeightedNormals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.GetSihouette(Rhino.Geometry.Mesh)
  commentId: M:AssemblerLib.Utilities.GetSihouette(Rhino.Geometry.Mesh)
  id: GetSihouette(Rhino.Geometry.Mesh)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: GetSihouette(Mesh)
  nameWithType: Utilities.GetSihouette(Mesh)
  fullName: AssemblerLib.Utilities.GetSihouette(Rhino.Geometry.Mesh)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: GetSihouette
    path: Utilities.cs
    startLine: 1260
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public static GH_Line[] GetSihouette(Mesh M)
    parameters:
    - id: M
      type: Rhino.Geometry.Mesh
    return:
      type: Grasshopper.Kernel.Types.GH_Line[]
    content.vb: Public Shared Function GetSihouette(M As Mesh) As GH_Line()
  overload: AssemblerLib.Utilities.GetSihouette*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.Triangulate(Rhino.Geometry.Mesh)
  commentId: M:AssemblerLib.Utilities.Triangulate(Rhino.Geometry.Mesh)
  id: Triangulate(Rhino.Geometry.Mesh)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: Triangulate(Mesh)
  nameWithType: Utilities.Triangulate(Mesh)
  fullName: AssemblerLib.Utilities.Triangulate(Rhino.Geometry.Mesh)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: Triangulate
    path: Utilities.cs
    startLine: 1294
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nTrinagulate a Mesh splitting quad faces along the shortest diagonal\n"
  example: []
  syntax:
    content: public static Mesh Triangulate(Mesh inputMesh)
    parameters:
    - id: inputMesh
      type: Rhino.Geometry.Mesh
      description: ''
    return:
      type: Rhino.Geometry.Mesh
      description: a Mesh with triangular faces only
    content.vb: Public Shared Function Triangulate(inputMesh As Mesh) As Mesh
  overload: AssemblerLib.Utilities.Triangulate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.AverageUnitized(Rhino.Geometry.Vector3d[])
  commentId: M:AssemblerLib.Utilities.AverageUnitized(Rhino.Geometry.Vector3d[])
  id: AverageUnitized(Rhino.Geometry.Vector3d[])
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: AverageUnitized(Vector3d[])
  nameWithType: Utilities.AverageUnitized(Vector3d[])
  fullName: AssemblerLib.Utilities.AverageUnitized(Rhino.Geometry.Vector3d[])
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: AverageUnitized
    path: Utilities.cs
    startLine: 1339
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nAverage Unitized Vector from a Vector Array - unitizes vector result at each step\nUseful for Vertex normal calculations\n"
  example: []
  syntax:
    content: public static Vector3d AverageUnitized(Vector3d[] vectors)
    parameters:
    - id: vectors
      type: Rhino.Geometry.Vector3d[]
      description: ''
    return:
      type: Rhino.Geometry.Vector3d
      description: The average normalized vector
    content.vb: Public Shared Function AverageUnitized(vectors As Vector3d()) As Vector3d
  overload: AssemblerLib.Utilities.AverageUnitized*
  nameWithType.vb: Utilities.AverageUnitized(Vector3d())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.AverageUnitized(Rhino.Geometry.Vector3d())
  name.vb: AverageUnitized(Vector3d())
- uid: AssemblerLib.Utilities.AverageUnitized(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  commentId: M:AssemblerLib.Utilities.AverageUnitized(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  id: AverageUnitized(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: AverageUnitized(List<Vector3d>)
  nameWithType: Utilities.AverageUnitized(List<Vector3d>)
  fullName: AssemblerLib.Utilities.AverageUnitized(System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: AverageUnitized
    path: Utilities.cs
    startLine: 1357
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nAverage Unitized Vector from a Vector List - unitizes vector result at each step\nUseful for Vertex normal calculations\n"
  example: []
  syntax:
    content: public static Vector3d AverageUnitized(List<Vector3d> vectors)
    parameters:
    - id: vectors
      type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
      description: ''
    return:
      type: Rhino.Geometry.Vector3d
      description: The average normalized
    content.vb: Public Shared Function AverageUnitized(vectors As List(Of Vector3d)) As Vector3d
  overload: AssemblerLib.Utilities.AverageUnitized*
  nameWithType.vb: Utilities.AverageUnitized(List(Of Vector3d))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.AverageUnitized(System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
  name.vb: AverageUnitized(List(Of Vector3d))
- uid: AssemblerLib.Utilities.GetUniqueVectors(Rhino.Geometry.Vector3d[],System.Double)
  commentId: M:AssemblerLib.Utilities.GetUniqueVectors(Rhino.Geometry.Vector3d[],System.Double)
  id: GetUniqueVectors(Rhino.Geometry.Vector3d[],System.Double)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: GetUniqueVectors(Vector3d[], Double)
  nameWithType: Utilities.GetUniqueVectors(Vector3d[], Double)
  fullName: AssemblerLib.Utilities.GetUniqueVectors(Rhino.Geometry.Vector3d[], System.Double)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: GetUniqueVectors
    path: Utilities.cs
    startLine: 1375
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nRemoves duplicate vectors (within tolerance) from an array, returing only unique vectors\n"
  example: []
  syntax:
    content: public static Vector3d[] GetUniqueVectors(Vector3d[] vectors, double angleTolerance)
    parameters:
    - id: vectors
      type: Rhino.Geometry.Vector3d[]
      description: ''
    - id: angleTolerance
      type: System.Double
      description: ''
    return:
      type: Rhino.Geometry.Vector3d[]
      description: Array of unique vectors
    content.vb: Public Shared Function GetUniqueVectors(vectors As Vector3d(), angleTolerance As Double) As Vector3d()
  overload: AssemblerLib.Utilities.GetUniqueVectors*
  nameWithType.vb: Utilities.GetUniqueVectors(Vector3d(), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.GetUniqueVectors(Rhino.Geometry.Vector3d(), System.Double)
  name.vb: GetUniqueVectors(Vector3d(), Double)
- uid: AssemblerLib.Utilities.LerpColor(System.Drawing.Color,System.Drawing.Color,System.Double)
  commentId: M:AssemblerLib.Utilities.LerpColor(System.Drawing.Color,System.Drawing.Color,System.Double)
  id: LerpColor(System.Drawing.Color,System.Drawing.Color,System.Double)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: LerpColor(Color, Color, Double)
  nameWithType: Utilities.LerpColor(Color, Color, Double)
  fullName: AssemblerLib.Utilities.LerpColor(System.Drawing.Color, System.Drawing.Color, System.Double)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: LerpColor
    path: Utilities.cs
    startLine: 1411
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nLinear interpolate between colors\n"
  example: []
  syntax:
    content: public static Color LerpColor(Color a, Color b, double t)
    parameters:
    - id: a
      type: System.Drawing.Color
      description: ''
    - id: b
      type: System.Drawing.Color
      description: ''
    - id: t
      type: System.Double
      description: ''
    return:
      type: System.Drawing.Color
      description: ''
    content.vb: Public Shared Function LerpColor(a As Color, b As Color, t As Double) As Color
  overload: AssemblerLib.Utilities.LerpColor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.DegreesToRadians(System.Double)
  commentId: M:AssemblerLib.Utilities.DegreesToRadians(System.Double)
  id: DegreesToRadians(System.Double)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: DegreesToRadians(Double)
  nameWithType: Utilities.DegreesToRadians(Double)
  fullName: AssemblerLib.Utilities.DegreesToRadians(System.Double)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: DegreesToRadians
    path: Utilities.cs
    startLine: 1429
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConverts an angle in degrees to radians\n"
  example: []
  syntax:
    content: public static double DegreesToRadians(double angle)
    parameters:
    - id: angle
      type: System.Double
      description: The angle to convert (in degrees)
    return:
      type: System.Double
      description: ''
    content.vb: Public Shared Function DegreesToRadians(angle As Double) As Double
  overload: AssemblerLib.Utilities.DegreesToRadians*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.RadiansToDegrees(System.Double)
  commentId: M:AssemblerLib.Utilities.RadiansToDegrees(System.Double)
  id: RadiansToDegrees(System.Double)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: RadiansToDegrees(Double)
  nameWithType: Utilities.RadiansToDegrees(Double)
  fullName: AssemblerLib.Utilities.RadiansToDegrees(System.Double)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: RadiansToDegrees
    path: Utilities.cs
    startLine: 1439
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConverts an angle in radians to degrees\n"
  example: []
  syntax:
    content: public static double RadiansToDegrees(double angle)
    parameters:
    - id: angle
      type: System.Double
      description: The angle to convert (in radians)
    return:
      type: System.Double
      description: ''
    content.vb: Public Shared Function RadiansToDegrees(angle As Double) As Double
  overload: AssemblerLib.Utilities.RadiansToDegrees*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AssemblerLib.Utilities.NormalizeRange(System.Double[])
  commentId: M:AssemblerLib.Utilities.NormalizeRange(System.Double[])
  id: NormalizeRange(System.Double[])
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: NormalizeRange(Double[])
  nameWithType: Utilities.NormalizeRange(Double[])
  fullName: AssemblerLib.Utilities.NormalizeRange(System.Double[])
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: NormalizeRange
    path: Utilities.cs
    startLine: 1449
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nNormalizes an array of real numbers\n"
  example: []
  syntax:
    content: public static double[] NormalizeRange(double[] values)
    parameters:
    - id: values
      type: System.Double[]
      description: ''
    return:
      type: System.Double[]
      description: ''
    content.vb: Public Shared Function NormalizeRange(values As Double()) As Double()
  overload: AssemblerLib.Utilities.NormalizeRange*
  nameWithType.vb: Utilities.NormalizeRange(Double())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.NormalizeRange(System.Double())
  name.vb: NormalizeRange(Double())
- uid: AssemblerLib.Utilities.NormalizeRange(System.Collections.Generic.List{System.Double})
  commentId: M:AssemblerLib.Utilities.NormalizeRange(System.Collections.Generic.List{System.Double})
  id: NormalizeRange(System.Collections.Generic.List{System.Double})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: NormalizeRange(List<Double>)
  nameWithType: Utilities.NormalizeRange(List<Double>)
  fullName: AssemblerLib.Utilities.NormalizeRange(System.Collections.Generic.List<System.Double>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: NormalizeRange
    path: Utilities.cs
    startLine: 1471
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nNormalizes a List of real numbers\n"
  example: []
  syntax:
    content: public static List<double> NormalizeRange(List<double> values)
    parameters:
    - id: values
      type: System.Collections.Generic.List{System.Double}
      description: ''
    return:
      type: System.Collections.Generic.List{System.Double}
      description: ''
    content.vb: Public Shared Function NormalizeRange(values As List(Of Double)) As List(Of Double)
  overload: AssemblerLib.Utilities.NormalizeRange*
  nameWithType.vb: Utilities.NormalizeRange(List(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.NormalizeRange(System.Collections.Generic.List(Of System.Double))
  name.vb: NormalizeRange(List(Of Double))
- uid: AssemblerLib.Utilities.NormalizeRanges(System.Double[][])
  commentId: M:AssemblerLib.Utilities.NormalizeRanges(System.Double[][])
  id: NormalizeRanges(System.Double[][])
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: NormalizeRanges(Double[][])
  nameWithType: Utilities.NormalizeRanges(Double[][])
  fullName: AssemblerLib.Utilities.NormalizeRanges(System.Double[][])
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: NormalizeRanges
    path: Utilities.cs
    startLine: 1493
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nNormalizes a Jagged array of real numbers\n"
  example: []
  syntax:
    content: public static double[][] NormalizeRanges(double[][] values)
    parameters:
    - id: values
      type: System.Double[][]
      description: ''
    return:
      type: System.Double[][]
      description: ''
    content.vb: Public Shared Function NormalizeRanges(values As Double()()) As Double()()
  overload: AssemblerLib.Utilities.NormalizeRanges*
  nameWithType.vb: Utilities.NormalizeRanges(Double()())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.NormalizeRanges(System.Double()())
  name.vb: NormalizeRanges(Double()())
- uid: AssemblerLib.Utilities.NormalizeRanges(Grasshopper.DataTree{System.Double})
  commentId: M:AssemblerLib.Utilities.NormalizeRanges(Grasshopper.DataTree{System.Double})
  id: NormalizeRanges(Grasshopper.DataTree{System.Double})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: NormalizeRanges(DataTree<Double>)
  nameWithType: Utilities.NormalizeRanges(DataTree<Double>)
  fullName: AssemblerLib.Utilities.NormalizeRanges(Grasshopper.DataTree<System.Double>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: NormalizeRanges
    path: Utilities.cs
    startLine: 1535
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nNormalizes a DataTree of real numbers\n"
  example: []
  syntax:
    content: public static DataTree<double> NormalizeRanges(DataTree<double> values)
    parameters:
    - id: values
      type: Grasshopper.DataTree{System.Double}
      description: ''
    return:
      type: Grasshopper.DataTree{System.Double}
      description: ''
    content.vb: Public Shared Function NormalizeRanges(values As DataTree(Of Double)) As DataTree(Of Double)
  overload: AssemblerLib.Utilities.NormalizeRanges*
  nameWithType.vb: Utilities.NormalizeRanges(DataTree(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.NormalizeRanges(Grasshopper.DataTree(Of System.Double))
  name.vb: NormalizeRanges(DataTree(Of Double))
- uid: AssemblerLib.Utilities.ToDataTree``1(``0[][])
  commentId: M:AssemblerLib.Utilities.ToDataTree``1(``0[][])
  id: ToDataTree``1(``0[][])
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: ToDataTree<T>(T[][])
  nameWithType: Utilities.ToDataTree<T>(T[][])
  fullName: AssemblerLib.Utilities.ToDataTree<T>(T[][])
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: ToDataTree
    path: Utilities.cs
    startLine: 1556
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConverts a jagged array into a DataTree of the same type\n"
  example: []
  syntax:
    content: public static DataTree<T> ToDataTree<T>(T[][] jArray)
    parameters:
    - id: jArray
      type: '{T}[][]'
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: Grasshopper.DataTree{{T}}
      description: ''
    content.vb: Public Shared Function ToDataTree(Of T)(jArray As T()()) As DataTree(Of T)
  overload: AssemblerLib.Utilities.ToDataTree*
  nameWithType.vb: Utilities.ToDataTree(Of T)(T()())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.ToDataTree(Of T)(T()())
  name.vb: ToDataTree(Of T)(T()())
- uid: AssemblerLib.Utilities.ToDataTree``1(System.Collections.Generic.List{``0[]})
  commentId: M:AssemblerLib.Utilities.ToDataTree``1(System.Collections.Generic.List{``0[]})
  id: ToDataTree``1(System.Collections.Generic.List{``0[]})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: ToDataTree<T>(List<T[]>)
  nameWithType: Utilities.ToDataTree<T>(List<T[]>)
  fullName: AssemblerLib.Utilities.ToDataTree<T>(System.Collections.Generic.List<T[]>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: ToDataTree
    path: Utilities.cs
    startLine: 1572
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConverts a list of arrays into a DataTree of the same type\n"
  example: []
  syntax:
    content: public static DataTree<T> ToDataTree<T>(List<T[]> arraysList)
    parameters:
    - id: arraysList
      type: System.Collections.Generic.List{{T}[]}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: Grasshopper.DataTree{{T}}
      description: ''
    content.vb: Public Shared Function ToDataTree(Of T)(arraysList As List(Of T())) As DataTree(Of T)
  overload: AssemblerLib.Utilities.ToDataTree*
  nameWithType.vb: Utilities.ToDataTree(Of T)(List(Of T()))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.ToDataTree(Of T)(System.Collections.Generic.List(Of T()))
  name.vb: ToDataTree(Of T)(List(Of T()))
- uid: AssemblerLib.Utilities.ToJaggedArray``1(Grasshopper.DataTree{``0})
  commentId: M:AssemblerLib.Utilities.ToJaggedArray``1(Grasshopper.DataTree{``0})
  id: ToJaggedArray``1(Grasshopper.DataTree{``0})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: ToJaggedArray<T>(DataTree<T>)
  nameWithType: Utilities.ToJaggedArray<T>(DataTree<T>)
  fullName: AssemblerLib.Utilities.ToJaggedArray<T>(Grasshopper.DataTree<T>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: ToJaggedArray
    path: Utilities.cs
    startLine: 1588
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConverts a DataTree into a jagged array of the same type\\nThe array length is equal to the number of branches, regardless of paths\n"
  example: []
  syntax:
    content: public static T[][] ToJaggedArray<T>(DataTree<T> tree)
    parameters:
    - id: tree
      type: Grasshopper.DataTree{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}[][]'
      description: ''
    content.vb: Public Shared Function ToJaggedArray(Of T)(tree As DataTree(Of T)) As T()()
  overload: AssemblerLib.Utilities.ToJaggedArray*
  nameWithType.vb: Utilities.ToJaggedArray(Of T)(DataTree(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.ToJaggedArray(Of T)(Grasshopper.DataTree(Of T))
  name.vb: ToJaggedArray(Of T)(DataTree(Of T))
- uid: AssemblerLib.Utilities.ToListOfArrays``1(Grasshopper.DataTree{``0})
  commentId: M:AssemblerLib.Utilities.ToListOfArrays``1(Grasshopper.DataTree{``0})
  id: ToListOfArrays``1(Grasshopper.DataTree{``0})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: ToListOfArrays<T>(DataTree<T>)
  nameWithType: Utilities.ToListOfArrays<T>(DataTree<T>)
  fullName: AssemblerLib.Utilities.ToListOfArrays<T>(Grasshopper.DataTree<T>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: ToListOfArrays
    path: Utilities.cs
    startLine: 1605
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nConverts a DataTree into a list of arrays of the same type\\nThe list count is equal to the number of branches, regardless of paths\n"
  example: []
  syntax:
    content: public static List<T[]> ToListOfArrays<T>(DataTree<T> tree)
    parameters:
    - id: tree
      type: Grasshopper.DataTree{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}[]}
      description: ''
    content.vb: Public Shared Function ToListOfArrays(Of T)(tree As DataTree(Of T)) As List(Of T())
  overload: AssemblerLib.Utilities.ToListOfArrays*
  nameWithType.vb: Utilities.ToListOfArrays(Of T)(DataTree(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.ToListOfArrays(Of T)(Grasshopper.DataTree(Of T))
  name.vb: ToListOfArrays(Of T)(DataTree(Of T))
- uid: AssemblerLib.Utilities.CloneDictionaryWithValues``2(System.Collections.Generic.Dictionary{``0,``1})
  commentId: M:AssemblerLib.Utilities.CloneDictionaryWithValues``2(System.Collections.Generic.Dictionary{``0,``1})
  id: CloneDictionaryWithValues``2(System.Collections.Generic.Dictionary{``0,``1})
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: CloneDictionaryWithValues<TKey, TValue>(Dictionary<TKey, TValue>)
  nameWithType: Utilities.CloneDictionaryWithValues<TKey, TValue>(Dictionary<TKey, TValue>)
  fullName: AssemblerLib.Utilities.CloneDictionaryWithValues<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: CloneDictionaryWithValues
    path: Utilities.cs
    startLine: 1623
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nClones a Dictionary and its values - as seen here: https://stackoverflow.com/questions/139592/what-is-the-best-way-to-clone-deep-copy-a-net-generic-dictionarystring-t\n"
  example: []
  syntax:
    content: public static Dictionary<TKey, TValue> CloneDictionaryWithValues<TKey, TValue>(Dictionary<TKey, TValue> original)
    parameters:
    - id: original
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: ''
    content.vb: Public Shared Function CloneDictionaryWithValues(Of TKey, TValue)(original As Dictionary(Of TKey, TValue)) As Dictionary(Of TKey, TValue)
  overload: AssemblerLib.Utilities.CloneDictionaryWithValues*
  nameWithType.vb: Utilities.CloneDictionaryWithValues(Of TKey, TValue)(Dictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.CloneDictionaryWithValues(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: CloneDictionaryWithValues(Of TKey, TValue)(Dictionary(Of TKey, TValue))
- uid: AssemblerLib.Utilities.RenameKey``2(System.Collections.Generic.Dictionary{``0,``1},``0,``0)
  commentId: M:AssemblerLib.Utilities.RenameKey``2(System.Collections.Generic.Dictionary{``0,``1},``0,``0)
  id: RenameKey``2(System.Collections.Generic.Dictionary{``0,``1},``0,``0)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: RenameKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TKey)
  nameWithType: Utilities.RenameKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TKey)
  fullName: AssemblerLib.Utilities.RenameKey<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TKey)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: RenameKey
    path: Utilities.cs
    startLine: 1642
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  summary: "\nRenames a key in a Dictionary - as seen here: https://stackoverflow.com/questions/6499334/best-way-to-change-dictionary-key\n"
  example: []
  syntax:
    content: public static bool RenameKey<TKey, TValue>(Dictionary<TKey, TValue> dictionary, TKey fromKey, TKey toKey)
    parameters:
    - id: dictionary
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: ''
    - id: fromKey
      type: '{TKey}'
      description: ''
    - id: toKey
      type: '{TKey}'
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: System.Boolean
      description: true if successful
    content.vb: Public Shared Function RenameKey(Of TKey, TValue)(dictionary As Dictionary(Of TKey, TValue), fromKey As TKey, toKey As TKey) As Boolean
  overload: AssemblerLib.Utilities.RenameKey*
  nameWithType.vb: Utilities.RenameKey(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TKey)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AssemblerLib.Utilities.RenameKey(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TKey)
  name.vb: RenameKey(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TKey)
- uid: AssemblerLib.Utilities.StartWatch(System.Diagnostics.Stopwatch)
  commentId: M:AssemblerLib.Utilities.StartWatch(System.Diagnostics.Stopwatch)
  id: StartWatch(System.Diagnostics.Stopwatch)
  parent: AssemblerLib.Utilities
  langs:
  - csharp
  - vb
  name: StartWatch(Stopwatch)
  nameWithType: Utilities.StartWatch(Stopwatch)
  fullName: AssemblerLib.Utilities.StartWatch(System.Diagnostics.Stopwatch)
  type: Method
  source:
    remote:
      path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
    id: StartWatch
    path: Utilities.cs
    startLine: 1655
  assemblies:
  - AssemblerLib
  namespace: AssemblerLib
  syntax:
    content: public static long StartWatch(Stopwatch stopWatch)
    parameters:
    - id: stopWatch
      type: System.Diagnostics.Stopwatch
    return:
      type: System.Int64
    content.vb: Public Shared Function StartWatch(stopWatch As Stopwatch) As Long
  overload: AssemblerLib.Utilities.StartWatch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AssemblerLib
  commentId: N:AssemblerLib
  name: AssemblerLib
  nameWithType: AssemblerLib
  fullName: AssemblerLib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Grasshopper.GUI.Gradient.GH_Gradient
  commentId: T:Grasshopper.GUI.Gradient.GH_Gradient
  parent: Grasshopper.GUI.Gradient
  isExternal: true
  name: GH_Gradient
  nameWithType: GH_Gradient
  fullName: Grasshopper.GUI.Gradient.GH_Gradient
- uid: Grasshopper.GUI.Gradient
  commentId: N:Grasshopper.GUI.Gradient
  isExternal: true
  name: Grasshopper.GUI.Gradient
  nameWithType: Grasshopper.GUI.Gradient
  fullName: Grasshopper.GUI.Gradient
- uid: System.Drawing.Color[]
  isExternal: true
  name: Color[]
  nameWithType: Color[]
  fullName: System.Drawing.Color[]
  nameWithType.vb: Color()
  fullName.vb: System.Drawing.Color()
  name.vb: Color()
  spec.csharp:
  - uid: System.Drawing.Color
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Drawing.Color
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{System.Drawing.KnownColor}
  commentId: T:System.Collections.Generic.List{System.Drawing.KnownColor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<KnownColor>
  nameWithType: List<KnownColor>
  fullName: System.Collections.Generic.List<System.Drawing.KnownColor>
  nameWithType.vb: List(Of KnownColor)
  fullName.vb: System.Collections.Generic.List(Of System.Drawing.KnownColor)
  name.vb: List(Of KnownColor)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Drawing.KnownColor
    name: KnownColor
    nameWithType: KnownColor
    fullName: System.Drawing.KnownColor
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Drawing.KnownColor
    name: KnownColor
    nameWithType: KnownColor
    fullName: System.Drawing.KnownColor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AssemblerLib.Assemblage
  commentId: T:AssemblerLib.Assemblage
  parent: AssemblerLib
  name: Assemblage
  nameWithType: Assemblage
  fullName: AssemblerLib.Assemblage
- uid: AssemblerLib.AssemblyObject
  commentId: T:AssemblerLib.AssemblyObject
  parent: AssemblerLib
  name: AssemblyObject
  nameWithType: AssemblyObject
  fullName: AssemblerLib.AssemblyObject
- uid: AssemblerLib.Utilities.CollisionCheckAssemblage*
  commentId: Overload:AssemblerLib.Utilities.CollisionCheckAssemblage
  name: CollisionCheckAssemblage
  nameWithType: Utilities.CollisionCheckAssemblage
  fullName: AssemblerLib.Utilities.CollisionCheckAssemblage
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AssemblerLib.Utilities.CollisionCheckAssemblageParallel*
  commentId: Overload:AssemblerLib.Utilities.CollisionCheckAssemblageParallel
  name: CollisionCheckAssemblageParallel
  nameWithType: Utilities.CollisionCheckAssemblageParallel
  fullName: AssemblerLib.Utilities.CollisionCheckAssemblageParallel
- uid: AssemblerLib.Utilities.CollisionCheckNeighbours*
  commentId: Overload:AssemblerLib.Utilities.CollisionCheckNeighbours
  name: CollisionCheckNeighbours
  nameWithType: Utilities.CollisionCheckNeighbours
  fullName: AssemblerLib.Utilities.CollisionCheckNeighbours
- uid: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
  commentId: T:System.Collections.Generic.List{AssemblerLib.AssemblyObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<AssemblyObject>
  nameWithType: List<AssemblyObject>
  fullName: System.Collections.Generic.List<AssemblerLib.AssemblyObject>
  nameWithType.vb: List(Of AssemblyObject)
  fullName.vb: System.Collections.Generic.List(Of AssemblerLib.AssemblyObject)
  name.vb: List(Of AssemblyObject)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AssemblerLib.AssemblyObject
    name: AssemblyObject
    nameWithType: AssemblyObject
    fullName: AssemblerLib.AssemblyObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AssemblerLib.AssemblyObject
    name: AssemblyObject
    nameWithType: AssemblyObject
    fullName: AssemblerLib.AssemblyObject
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Utilities.CollisionCheckPair*
  commentId: Overload:AssemblerLib.Utilities.CollisionCheckPair
  name: CollisionCheckPair
  nameWithType: Utilities.CollisionCheckPair
  fullName: AssemblerLib.Utilities.CollisionCheckPair
- uid: AssemblerLib.Utilities.ObstructionCheckAssemblage*
  commentId: Overload:AssemblerLib.Utilities.ObstructionCheckAssemblage
  name: ObstructionCheckAssemblage
  nameWithType: Utilities.ObstructionCheckAssemblage
  fullName: AssemblerLib.Utilities.ObstructionCheckAssemblage
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AssemblerLib.Handle
  commentId: T:AssemblerLib.Handle
  parent: AssemblerLib
  name: Handle
  nameWithType: Handle
  fullName: AssemblerLib.Handle
- uid: AssemblerLib.Utilities.ObstructionCheckList*
  commentId: Overload:AssemblerLib.Utilities.ObstructionCheckList
  name: ObstructionCheckList
  nameWithType: Utilities.ObstructionCheckList
  fullName: AssemblerLib.Utilities.ObstructionCheckList
- uid: AssemblerLib.Utilities.Clone*
  commentId: Overload:AssemblerLib.Utilities.Clone
  name: Clone
  nameWithType: Utilities.Clone
  fullName: AssemblerLib.Utilities.Clone
- uid: AssemblerLib.Utilities.BuildDictionary*
  commentId: Overload:AssemblerLib.Utilities.BuildDictionary
  name: BuildDictionary
  nameWithType: Utilities.BuildDictionary
  fullName: AssemblerLib.Utilities.BuildDictionary
- uid: AssemblerLib.AssemblyObject[]
  isExternal: true
  name: AssemblyObject[]
  nameWithType: AssemblyObject[]
  fullName: AssemblerLib.AssemblyObject[]
  nameWithType.vb: AssemblyObject()
  fullName.vb: AssemblerLib.AssemblyObject()
  name.vb: AssemblyObject()
  spec.csharp:
  - uid: AssemblerLib.AssemblyObject
    name: AssemblyObject
    nameWithType: AssemblyObject
    fullName: AssemblerLib.AssemblyObject
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AssemblerLib.AssemblyObject
    name: AssemblyObject
    nameWithType: AssemblyObject
    fullName: AssemblerLib.AssemblyObject
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.Dictionary{System.String,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Int32>
  nameWithType: Dictionary<String, Int32>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Int32>
  nameWithType.vb: Dictionary(Of String, Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Int32)
  name.vb: Dictionary(Of String, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Utilities.BuildHandlesHashSet*
  commentId: Overload:AssemblerLib.Utilities.BuildHandlesHashSet
  name: BuildHandlesHashSet
  nameWithType: Utilities.BuildHandlesHashSet
  fullName: AssemblerLib.Utilities.BuildHandlesHashSet
- uid: System.Collections.Generic.HashSet{System.Int32}
  commentId: T:System.Collections.Generic.HashSet{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<Int32>
  nameWithType: HashSet<Int32>
  fullName: System.Collections.Generic.HashSet<System.Int32>
  nameWithType.vb: HashSet(Of Int32)
  fullName.vb: System.Collections.Generic.HashSet(Of System.Int32)
  name.vb: HashSet(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Utilities.CloneWithConnectivity*
  commentId: Overload:AssemblerLib.Utilities.CloneWithConnectivity
  name: CloneWithConnectivity
  nameWithType: Utilities.CloneWithConnectivity
  fullName: AssemblerLib.Utilities.CloneWithConnectivity
- uid: AssemblerLib.Utilities.SetCollisionMesh*
  commentId: Overload:AssemblerLib.Utilities.SetCollisionMesh
  name: SetCollisionMesh
  nameWithType: Utilities.SetCollisionMesh
  fullName: AssemblerLib.Utilities.SetCollisionMesh
- uid: Rhino.Geometry.Mesh
  commentId: T:Rhino.Geometry.Mesh
  parent: Rhino.Geometry
  isExternal: true
  name: Mesh
  nameWithType: Mesh
  fullName: Rhino.Geometry.Mesh
- uid: Rhino.Geometry
  commentId: N:Rhino.Geometry
  isExternal: true
  name: Rhino.Geometry
  nameWithType: Rhino.Geometry
  fullName: Rhino.Geometry
- uid: AssemblerLib.Utilities.AbsoluteZCheck*
  commentId: Overload:AssemblerLib.Utilities.AbsoluteZCheck
  name: AbsoluteZCheck
  nameWithType: Utilities.AbsoluteZCheck
  fullName: AssemblerLib.Utilities.AbsoluteZCheck
- uid: AssemblerLib.Utilities.SetSupports*
  commentId: Overload:AssemblerLib.Utilities.SetSupports
  name: SetSupports
  nameWithType: Utilities.SetSupports
  fullName: AssemblerLib.Utilities.SetSupports
- uid: System.Collections.Generic.List{Rhino.Geometry.Line}
  commentId: T:System.Collections.Generic.List{Rhino.Geometry.Line}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Line>
  nameWithType: List<Line>
  fullName: System.Collections.Generic.List<Rhino.Geometry.Line>
  nameWithType.vb: List(Of Line)
  fullName.vb: System.Collections.Generic.List(Of Rhino.Geometry.Line)
  name.vb: List(Of Line)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rhino.Geometry.Line
    name: Line
    nameWithType: Line
    fullName: Rhino.Geometry.Line
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rhino.Geometry.Line
    name: Line
    nameWithType: Line
    fullName: Rhino.Geometry.Line
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Support
  commentId: T:AssemblerLib.Support
  parent: AssemblerLib
  name: Support
  nameWithType: Support
  fullName: AssemblerLib.Support
- uid: AssemblerLib.Utilities.ResetSupports*
  commentId: Overload:AssemblerLib.Utilities.ResetSupports
  name: ResetSupports
  nameWithType: Utilities.ResetSupports
  fullName: AssemblerLib.Utilities.ResetSupports
- uid: AssemblerLib.Utilities.CheckSupport*
  commentId: Overload:AssemblerLib.Utilities.CheckSupport
  name: CheckSupport
  nameWithType: Utilities.CheckSupport
  fullName: AssemblerLib.Utilities.CheckSupport
- uid: System.Collections.Generic.List{Rhino.Geometry.Mesh}
  commentId: T:System.Collections.Generic.List{Rhino.Geometry.Mesh}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Mesh>
  nameWithType: List<Mesh>
  fullName: System.Collections.Generic.List<Rhino.Geometry.Mesh>
  nameWithType.vb: List(Of Mesh)
  fullName.vb: System.Collections.Generic.List(Of Rhino.Geometry.Mesh)
  name.vb: List(Of Mesh)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rhino.Geometry.Mesh
    name: Mesh
    nameWithType: Mesh
    fullName: Rhino.Geometry.Mesh
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rhino.Geometry.Mesh
    name: Mesh
    nameWithType: Mesh
    fullName: Rhino.Geometry.Mesh
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Utilities.SupportIntersect*
  commentId: Overload:AssemblerLib.Utilities.SupportIntersect
  name: SupportIntersect
  nameWithType: Utilities.SupportIntersect
  fullName: AssemblerLib.Utilities.SupportIntersect
- uid: System.Collections.Generic.List{AssemblerLib.MeshEnvironment}
  commentId: T:System.Collections.Generic.List{AssemblerLib.MeshEnvironment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MeshEnvironment>
  nameWithType: List<MeshEnvironment>
  fullName: System.Collections.Generic.List<AssemblerLib.MeshEnvironment>
  nameWithType.vb: List(Of MeshEnvironment)
  fullName.vb: System.Collections.Generic.List(Of AssemblerLib.MeshEnvironment)
  name.vb: List(Of MeshEnvironment)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AssemblerLib.MeshEnvironment
    name: MeshEnvironment
    nameWithType: MeshEnvironment
    fullName: AssemblerLib.MeshEnvironment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AssemblerLib.MeshEnvironment
    name: MeshEnvironment
    nameWithType: MeshEnvironment
    fullName: AssemblerLib.MeshEnvironment
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Utilities.HeuristicsRulesFromString*
  commentId: Overload:AssemblerLib.Utilities.HeuristicsRulesFromString
  name: HeuristicsRulesFromString
  nameWithType: Utilities.HeuristicsRulesFromString
  fullName: AssemblerLib.Utilities.HeuristicsRulesFromString
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Grasshopper.DataTree{System.String}
  commentId: T:Grasshopper.DataTree{System.String}
  parent: Grasshopper
  definition: Grasshopper.DataTree`1
  name: DataTree<String>
  nameWithType: DataTree<String>
  fullName: Grasshopper.DataTree<System.String>
  nameWithType.vb: DataTree(Of String)
  fullName.vb: Grasshopper.DataTree(Of System.String)
  name.vb: DataTree(Of String)
  spec.csharp:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{AssemblerLib.Rule}
  commentId: T:System.Collections.Generic.List{AssemblerLib.Rule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Rule>
  nameWithType: List<Rule>
  fullName: System.Collections.Generic.List<AssemblerLib.Rule>
  nameWithType.vb: List(Of Rule)
  fullName.vb: System.Collections.Generic.List(Of AssemblerLib.Rule)
  name.vb: List(Of Rule)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AssemblerLib.Rule
    name: Rule
    nameWithType: Rule
    fullName: AssemblerLib.Rule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AssemblerLib.Rule
    name: Rule
    nameWithType: Rule
    fullName: AssemblerLib.Rule
  - name: )
    nameWithType: )
    fullName: )
- uid: Grasshopper.DataTree`1
  commentId: T:Grasshopper.DataTree`1
  isExternal: true
  name: DataTree<T>
  nameWithType: DataTree<T>
  fullName: Grasshopper.DataTree<T>
  nameWithType.vb: DataTree(Of T)
  fullName.vb: Grasshopper.DataTree(Of T)
  name.vb: DataTree(Of T)
  spec.csharp:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grasshopper
  commentId: N:Grasshopper
  isExternal: true
  name: Grasshopper
  nameWithType: Grasshopper
  fullName: Grasshopper
- uid: AssemblerLib.Utilities.AssemblageFromJSONdump*
  commentId: Overload:AssemblerLib.Utilities.AssemblageFromJSONdump
  name: AssemblageFromJSONdump
  nameWithType: Utilities.AssemblageFromJSONdump
  fullName: AssemblerLib.Utilities.AssemblageFromJSONdump
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AssemblerLib.Utilities.AssemblageToJSONdump*
  commentId: Overload:AssemblerLib.Utilities.AssemblageToJSONdump
  name: AssemblageToJSONdump
  nameWithType: Utilities.AssemblageToJSONdump
  fullName: AssemblerLib.Utilities.AssemblageToJSONdump
- uid: AssemblerLib.Utilities.AssemblageToJSONSmart*
  commentId: Overload:AssemblerLib.Utilities.AssemblageToJSONSmart
  name: AssemblageToJSONSmart
  nameWithType: Utilities.AssemblageToJSONSmart
  fullName: AssemblerLib.Utilities.AssemblageToJSONSmart
- uid: AssemblerLib.Utilities.ReadFileUnique*
  commentId: Overload:AssemblerLib.Utilities.ReadFileUnique
  name: ReadFileUnique
  nameWithType: Utilities.ReadFileUnique
  fullName: AssemblerLib.Utilities.ReadFileUnique
- uid: AssemblerLib.Utilities.ReadFileByLines*
  commentId: Overload:AssemblerLib.Utilities.ReadFileByLines
  name: ReadFileByLines
  nameWithType: Utilities.ReadFileByLines
  fullName: AssemblerLib.Utilities.ReadFileByLines
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AssemblerLib.Utilities.SaveStringsToFile*
  commentId: Overload:AssemblerLib.Utilities.SaveStringsToFile
  name: SaveStringsToFile
  nameWithType: Utilities.SaveStringsToFile
  fullName: AssemblerLib.Utilities.SaveStringsToFile
- uid: AssemblerLib.Utilities.AppendToFile*
  commentId: Overload:AssemblerLib.Utilities.AppendToFile
  name: AppendToFile
  nameWithType: Utilities.AppendToFile
  fullName: AssemblerLib.Utilities.AppendToFile
- uid: AssemblerLib.Utilities.GetGHFilePath*
  commentId: Overload:AssemblerLib.Utilities.GetGHFilePath
  name: GetGHFilePath
  nameWithType: Utilities.GetGHFilePath
  fullName: AssemblerLib.Utilities.GetGHFilePath
- uid: Grasshopper.Kernel.GH_Component
  commentId: T:Grasshopper.Kernel.GH_Component
  parent: Grasshopper.Kernel
  isExternal: true
  name: GH_Component
  nameWithType: GH_Component
  fullName: Grasshopper.Kernel.GH_Component
- uid: Grasshopper.Kernel
  commentId: N:Grasshopper.Kernel
  isExternal: true
  name: Grasshopper.Kernel
  nameWithType: Grasshopper.Kernel
  fullName: Grasshopper.Kernel
- uid: AssemblerLib.Utilities.SerializeAssemblage*
  commentId: Overload:AssemblerLib.Utilities.SerializeAssemblage
  name: SerializeAssemblage
  nameWithType: Utilities.SerializeAssemblage
  fullName: AssemblerLib.Utilities.SerializeAssemblage
- uid: AssemblerLib.Utilities.DeserializeAssemblage*
  commentId: Overload:AssemblerLib.Utilities.DeserializeAssemblage
  name: DeserializeAssemblage
  nameWithType: Utilities.DeserializeAssemblage
  fullName: AssemblerLib.Utilities.DeserializeAssemblage
- uid: AssemblerLib.Utilities.IsPointInMesh*
  commentId: Overload:AssemblerLib.Utilities.IsPointInMesh
  name: IsPointInMesh
  nameWithType: Utilities.IsPointInMesh
  fullName: AssemblerLib.Utilities.IsPointInMesh
- uid: Rhino.Geometry.Point3d
  commentId: T:Rhino.Geometry.Point3d
  parent: Rhino.Geometry
  isExternal: true
  name: Point3d
  nameWithType: Point3d
  fullName: Rhino.Geometry.Point3d
- uid: AssemblerLib.Utilities.MeshOffsetWeightedAngle*
  commentId: Overload:AssemblerLib.Utilities.MeshOffsetWeightedAngle
  name: MeshOffsetWeightedAngle
  nameWithType: Utilities.MeshOffsetWeightedAngle
  fullName: AssemblerLib.Utilities.MeshOffsetWeightedAngle
- uid: AssemblerLib.Utilities.ComputeWeightedNormals*
  commentId: Overload:AssemblerLib.Utilities.ComputeWeightedNormals
  name: ComputeWeightedNormals
  nameWithType: Utilities.ComputeWeightedNormals
  fullName: AssemblerLib.Utilities.ComputeWeightedNormals
- uid: Rhino.Geometry.Vector3d[]
  isExternal: true
  name: Vector3d[]
  nameWithType: Vector3d[]
  fullName: Rhino.Geometry.Vector3d[]
  nameWithType.vb: Vector3d()
  fullName.vb: Rhino.Geometry.Vector3d()
  name.vb: Vector3d()
  spec.csharp:
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AssemblerLib.Utilities.GetSihouette*
  commentId: Overload:AssemblerLib.Utilities.GetSihouette
  name: GetSihouette
  nameWithType: Utilities.GetSihouette
  fullName: AssemblerLib.Utilities.GetSihouette
- uid: Grasshopper.Kernel.Types.GH_Line[]
  isExternal: true
  name: GH_Line[]
  nameWithType: GH_Line[]
  fullName: Grasshopper.Kernel.Types.GH_Line[]
  nameWithType.vb: GH_Line()
  fullName.vb: Grasshopper.Kernel.Types.GH_Line()
  name.vb: GH_Line()
  spec.csharp:
  - uid: Grasshopper.Kernel.Types.GH_Line
    name: GH_Line
    nameWithType: GH_Line
    fullName: Grasshopper.Kernel.Types.GH_Line
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Grasshopper.Kernel.Types.GH_Line
    name: GH_Line
    nameWithType: GH_Line
    fullName: Grasshopper.Kernel.Types.GH_Line
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AssemblerLib.Utilities.Triangulate*
  commentId: Overload:AssemblerLib.Utilities.Triangulate
  name: Triangulate
  nameWithType: Utilities.Triangulate
  fullName: AssemblerLib.Utilities.Triangulate
- uid: AssemblerLib.Utilities.AverageUnitized*
  commentId: Overload:AssemblerLib.Utilities.AverageUnitized
  name: AverageUnitized
  nameWithType: Utilities.AverageUnitized
  fullName: AssemblerLib.Utilities.AverageUnitized
- uid: Rhino.Geometry.Vector3d
  commentId: T:Rhino.Geometry.Vector3d
  parent: Rhino.Geometry
  isExternal: true
  name: Vector3d
  nameWithType: Vector3d
  fullName: Rhino.Geometry.Vector3d
- uid: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
  commentId: T:System.Collections.Generic.List{Rhino.Geometry.Vector3d}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3d>
  nameWithType: List<Vector3d>
  fullName: System.Collections.Generic.List<Rhino.Geometry.Vector3d>
  nameWithType.vb: List(Of Vector3d)
  fullName.vb: System.Collections.Generic.List(Of Rhino.Geometry.Vector3d)
  name.vb: List(Of Vector3d)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rhino.Geometry.Vector3d
    name: Vector3d
    nameWithType: Vector3d
    fullName: Rhino.Geometry.Vector3d
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Utilities.GetUniqueVectors*
  commentId: Overload:AssemblerLib.Utilities.GetUniqueVectors
  name: GetUniqueVectors
  nameWithType: Utilities.GetUniqueVectors
  fullName: AssemblerLib.Utilities.GetUniqueVectors
- uid: AssemblerLib.Utilities.LerpColor*
  commentId: Overload:AssemblerLib.Utilities.LerpColor
  name: LerpColor
  nameWithType: Utilities.LerpColor
  fullName: AssemblerLib.Utilities.LerpColor
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
- uid: AssemblerLib.Utilities.DegreesToRadians*
  commentId: Overload:AssemblerLib.Utilities.DegreesToRadians
  name: DegreesToRadians
  nameWithType: Utilities.DegreesToRadians
  fullName: AssemblerLib.Utilities.DegreesToRadians
- uid: AssemblerLib.Utilities.RadiansToDegrees*
  commentId: Overload:AssemblerLib.Utilities.RadiansToDegrees
  name: RadiansToDegrees
  nameWithType: Utilities.RadiansToDegrees
  fullName: AssemblerLib.Utilities.RadiansToDegrees
- uid: AssemblerLib.Utilities.NormalizeRange*
  commentId: Overload:AssemblerLib.Utilities.NormalizeRange
  name: NormalizeRange
  nameWithType: Utilities.NormalizeRange
  fullName: AssemblerLib.Utilities.NormalizeRange
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Utilities.NormalizeRanges*
  commentId: Overload:AssemblerLib.Utilities.NormalizeRanges
  name: NormalizeRanges
  nameWithType: Utilities.NormalizeRanges
  fullName: AssemblerLib.Utilities.NormalizeRanges
- uid: System.Double[][]
  isExternal: true
  name: Double[][]
  nameWithType: Double[][]
  fullName: System.Double[][]
  nameWithType.vb: Double()()
  fullName.vb: System.Double()()
  name.vb: Double()()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Grasshopper.DataTree{System.Double}
  commentId: T:Grasshopper.DataTree{System.Double}
  parent: Grasshopper
  definition: Grasshopper.DataTree`1
  name: DataTree<Double>
  nameWithType: DataTree<Double>
  fullName: Grasshopper.DataTree<System.Double>
  nameWithType.vb: DataTree(Of Double)
  fullName.vb: Grasshopper.DataTree(Of System.Double)
  name.vb: DataTree(Of Double)
  spec.csharp:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Utilities.ToDataTree*
  commentId: Overload:AssemblerLib.Utilities.ToDataTree
  name: ToDataTree
  nameWithType: Utilities.ToDataTree
  fullName: AssemblerLib.Utilities.ToDataTree
- uid: '{T}[][]'
  isExternal: true
  name: T[][]
  nameWithType: T[][]
  fullName: T[][]
  nameWithType.vb: T()()
  fullName.vb: T()()
  name.vb: T()()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Grasshopper.DataTree{{T}}
  commentId: T:Grasshopper.DataTree{``0}
  parent: Grasshopper
  definition: Grasshopper.DataTree`1
  name: DataTree<T>
  nameWithType: DataTree<T>
  fullName: Grasshopper.DataTree<T>
  nameWithType.vb: DataTree(Of T)
  fullName.vb: Grasshopper.DataTree(Of T)
  name.vb: DataTree(Of T)
  spec.csharp:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grasshopper.DataTree`1
    name: DataTree
    nameWithType: DataTree
    fullName: Grasshopper.DataTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{T}[]}
  commentId: T:System.Collections.Generic.List{``0[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T[]>
  nameWithType: List<T[]>
  fullName: System.Collections.Generic.List<T[]>
  nameWithType.vb: List(Of T())
  fullName.vb: System.Collections.Generic.List(Of T())
  name.vb: List(Of T())
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Utilities.ToJaggedArray*
  commentId: Overload:AssemblerLib.Utilities.ToJaggedArray
  name: ToJaggedArray
  nameWithType: Utilities.ToJaggedArray
  fullName: AssemblerLib.Utilities.ToJaggedArray
- uid: AssemblerLib.Utilities.ToListOfArrays*
  commentId: Overload:AssemblerLib.Utilities.ToListOfArrays
  name: ToListOfArrays
  nameWithType: Utilities.ToListOfArrays
  fullName: AssemblerLib.Utilities.ToListOfArrays
- uid: AssemblerLib.Utilities.CloneDictionaryWithValues*
  commentId: Overload:AssemblerLib.Utilities.CloneDictionaryWithValues
  name: CloneDictionaryWithValues
  nameWithType: Utilities.CloneDictionaryWithValues
  fullName: AssemblerLib.Utilities.CloneDictionaryWithValues
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AssemblerLib.Utilities.RenameKey*
  commentId: Overload:AssemblerLib.Utilities.RenameKey
  name: RenameKey
  nameWithType: Utilities.RenameKey
  fullName: AssemblerLib.Utilities.RenameKey
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: AssemblerLib.Utilities.StartWatch*
  commentId: Overload:AssemblerLib.Utilities.StartWatch
  name: StartWatch
  nameWithType: Utilities.StartWatch
  fullName: AssemblerLib.Utilities.StartWatch
- uid: System.Diagnostics.Stopwatch
  commentId: T:System.Diagnostics.Stopwatch
  parent: System.Diagnostics
  isExternal: true
  name: Stopwatch
  nameWithType: Stopwatch
  fullName: System.Diagnostics.Stopwatch
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics
  commentId: N:System.Diagnostics
  isExternal: true
  name: System.Diagnostics
  nameWithType: System.Diagnostics
  fullName: System.Diagnostics
