id: AssemblerLib
language: CSharp
name:
  Default: AssemblerLib
qualifiedName:
  Default: AssemblerLib
type: Assembly
modifiers: {}
items:
- id: AssemblerLib
  commentId: N:AssemblerLib
  language: CSharp
  name:
    CSharp: AssemblerLib
    VB: AssemblerLib
  nameWithType:
    CSharp: AssemblerLib
    VB: AssemblerLib
  qualifiedName:
    CSharp: AssemblerLib
    VB: AssemblerLib
  type: Namespace
  assemblies:
  - AssemblerLib
  modifiers: {}
  items:
  - id: AssemblerLib.AssemblyObject
    commentId: T:AssemblerLib.AssemblyObject
    language: CSharp
    name:
      CSharp: AssemblyObject
      VB: AssemblyObject
    nameWithType:
      CSharp: AssemblyObject
      VB: AssemblyObject
    qualifiedName:
      CSharp: AssemblerLib.AssemblyObject
      VB: AssemblerLib.AssemblyObject
    type: Class
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
      id: AssemblyObject
      path: AssemblyObject.cs
      startLine: 11
    summary: "\nAssemblage Object with extended connectivity and collision-check properties\n"
    example: []
    syntax:
      content:
        CSharp: public class AssemblyObject
        VB: Public Class AssemblyObject
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: AssemblerLib.AssemblyObject.children
      commentId: F:AssemblerLib.AssemblyObject.children
      language: CSharp
      name:
        CSharp: children
        VB: children
      nameWithType:
        CSharp: AssemblyObject.children
        VB: AssemblyObject.children
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.children
        VB: AssemblerLib.AssemblyObject.children
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: children
        path: AssemblyObject.cs
        startLine: 17
      summary: "\nList of optional children objects (for composite object)\n"
      example: []
      syntax:
        content:
          CSharp: public List<AssemblyObject> children
          VB: Public children As List(Of AssemblyObject)
        return:
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.collisionMesh
      commentId: F:AssemblerLib.AssemblyObject.collisionMesh
      language: CSharp
      name:
        CSharp: collisionMesh
        VB: collisionMesh
      nameWithType:
        CSharp: AssemblyObject.collisionMesh
        VB: AssemblyObject.collisionMesh
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.collisionMesh
        VB: AssemblerLib.AssemblyObject.collisionMesh
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: collisionMesh
        path: AssemblyObject.cs
        startLine: 21
      summary: "\nA Mesh for collision detections\n"
      example: []
      syntax:
        content:
          CSharp: public Mesh collisionMesh
          VB: Public collisionMesh As Mesh
        return:
          type: Rhino.Geometry.Mesh
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.offsetMesh
      commentId: F:AssemblerLib.AssemblyObject.offsetMesh
      language: CSharp
      name:
        CSharp: offsetMesh
        VB: offsetMesh
      nameWithType:
        CSharp: AssemblyObject.offsetMesh
        VB: AssemblyObject.offsetMesh
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.offsetMesh
        VB: AssemblerLib.AssemblyObject.offsetMesh
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: offsetMesh
        path: AssemblyObject.cs
        startLine: 25
      summary: "\nA Mesh for avoiding false positives in collision detection (overlaps)\n"
      example: []
      syntax:
        content:
          CSharp: public Mesh offsetMesh
          VB: Public offsetMesh As Mesh
        return:
          type: Rhino.Geometry.Mesh
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.referencePlane
      commentId: F:AssemblerLib.AssemblyObject.referencePlane
      language: CSharp
      name:
        CSharp: referencePlane
        VB: referencePlane
      nameWithType:
        CSharp: AssemblyObject.referencePlane
        VB: AssemblyObject.referencePlane
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.referencePlane
        VB: AssemblerLib.AssemblyObject.referencePlane
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: referencePlane
        path: AssemblyObject.cs
        startLine: 29
      summary: "\nReference Plane for the AssemblyObject\n"
      example: []
      syntax:
        content:
          CSharp: public Plane referencePlane
          VB: Public referencePlane As Plane
        return:
          type: Rhino.Geometry.Plane
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.handles
      commentId: F:AssemblerLib.AssemblyObject.handles
      language: CSharp
      name:
        CSharp: handles
        VB: handles
      nameWithType:
        CSharp: AssemblyObject.handles
        VB: AssemblyObject.handles
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.handles
        VB: AssemblerLib.AssemblyObject.handles
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: handles
        path: AssemblyObject.cs
        startLine: 33
      summary: "\nHandles for connectivity and assemblage operations\n"
      example: []
      syntax:
        content:
          CSharp: public Handle[] handles
          VB: Public handles As Handle()
        return:
          type: AssemblerLib.Handle[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.direction
      commentId: F:AssemblerLib.AssemblyObject.direction
      language: CSharp
      name:
        CSharp: direction
        VB: direction
      nameWithType:
        CSharp: AssemblyObject.direction
        VB: AssemblyObject.direction
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.direction
        VB: AssemblerLib.AssemblyObject.direction
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: direction
        path: AssemblyObject.cs
        startLine: 37
      summary: "\nDirection Vector - for vector field generation/interaction\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3d direction
          VB: Public direction As Vector3d
        return:
          type: Rhino.Geometry.Vector3d
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.supports
      commentId: F:AssemblerLib.AssemblyObject.supports
      language: CSharp
      name:
        CSharp: supports
        VB: supports
      nameWithType:
        CSharp: AssemblyObject.supports
        VB: AssemblyObject.supports
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.supports
        VB: AssemblerLib.AssemblyObject.supports
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: supports
        path: AssemblyObject.cs
        startLine: 41
      summary: "\nSupports\n"
      example: []
      syntax:
        content:
          CSharp: public List<Support> supports
          VB: Public supports As List(Of Support)
        return:
          type: System.Collections.Generic.List{AssemblerLib.Support}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.minSupports
      commentId: F:AssemblerLib.AssemblyObject.minSupports
      language: CSharp
      name:
        CSharp: minSupports
        VB: minSupports
      nameWithType:
        CSharp: AssemblyObject.minSupports
        VB: AssemblyObject.minSupports
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.minSupports
        VB: AssemblerLib.AssemblyObject.minSupports
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: minSupports
        path: AssemblyObject.cs
        startLine: 45
      summary: "\nn. of minimum connected Supports to consider the object supported\n"
      example: []
      syntax:
        content:
          CSharp: public int minSupports
          VB: Public minSupports As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.supported
      commentId: F:AssemblerLib.AssemblyObject.supported
      language: CSharp
      name:
        CSharp: supported
        VB: supported
      nameWithType:
        CSharp: AssemblyObject.supported
        VB: AssemblyObject.supported
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.supported
        VB: AssemblerLib.AssemblyObject.supported
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: supported
        path: AssemblyObject.cs
        startLine: 49
      summary: "\nTrue if minimum amount of required supports are connected\n"
      example: []
      syntax:
        content:
          CSharp: public bool supported
          VB: Public supported As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.type
      commentId: F:AssemblerLib.AssemblyObject.type
      language: CSharp
      name:
        CSharp: type
        VB: type
      nameWithType:
        CSharp: AssemblyObject.type
        VB: AssemblyObject.type
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.type
        VB: AssemblerLib.AssemblyObject.type
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: type
        path: AssemblyObject.cs
        startLine: 53
      summary: "\nAssemblyObject id - identifies a unique object type\n"
      example: []
      syntax:
        content:
          CSharp: public int type
          VB: Public type As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.name
      commentId: F:AssemblerLib.AssemblyObject.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: AssemblyObject.name
        VB: AssemblyObject.name
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.name
        VB: AssemblerLib.AssemblyObject.name
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: name
        path: AssemblyObject.cs
        startLine: 57
      summary: "\nAssemblyObject name\n"
      example: []
      syntax:
        content:
          CSharp: public string name
          VB: Public name As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.AInd
      commentId: P:AssemblerLib.AssemblyObject.AInd
      language: CSharp
      name:
        CSharp: AInd
        VB: AInd
      nameWithType:
        CSharp: AssemblyObject.AInd
        VB: AssemblyObject.AInd
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.AInd
        VB: AssemblerLib.AssemblyObject.AInd
      type: Property
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: AInd
        path: AssemblyObject.cs
        startLine: 61
      summary: "\nAssemblyObject unique index in an assemblage\n"
      example: []
      syntax:
        content:
          CSharp: public int AInd { get; set; }
          VB: Public Property AInd As Integer
        parameters: []
        return:
          type: System.Int32
      overload: AssemblerLib.AssemblyObject.AInd*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.occludedNeighbours
      commentId: F:AssemblerLib.AssemblyObject.occludedNeighbours
      language: CSharp
      name:
        CSharp: occludedNeighbours
        VB: occludedNeighbours
      nameWithType:
        CSharp: AssemblyObject.occludedNeighbours
        VB: AssemblyObject.occludedNeighbours
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.occludedNeighbours
        VB: AssemblerLib.AssemblyObject.occludedNeighbours
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: occludedNeighbours
        path: AssemblyObject.cs
        startLine: 67
      summary: "\nList of tuples containing object index and handle index occluded by this object\n"
      example: []
      syntax:
        content:
          CSharp: public List<int[]> occludedNeighbours
          VB: Public occludedNeighbours As List(Of Integer())
        return:
          type: System.Collections.Generic.List{System.Int32[]}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.collisionRadius
      commentId: F:AssemblerLib.AssemblyObject.collisionRadius
      language: CSharp
      name:
        CSharp: collisionRadius
        VB: collisionRadius
      nameWithType:
        CSharp: AssemblyObject.collisionRadius
        VB: AssemblyObject.collisionRadius
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.collisionRadius
        VB: AssemblerLib.AssemblyObject.collisionRadius
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: collisionRadius
        path: AssemblyObject.cs
        startLine: 71
      summary: "\nCollision radius for collision checks with neighbour AssemblyObjects\n"
      example: []
      syntax:
        content:
          CSharp: public double collisionRadius
          VB: Public collisionRadius As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.weight
      commentId: F:AssemblerLib.AssemblyObject.weight
      language: CSharp
      name:
        CSharp: weight
        VB: weight
      nameWithType:
        CSharp: AssemblyObject.weight
        VB: AssemblyObject.weight
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.weight
        VB: AssemblerLib.AssemblyObject.weight
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: weight
        path: AssemblyObject.cs
        startLine: 75
      summary: "\nScalar value for density evaluation or scalar field generation/interaction\n"
      example: []
      syntax:
        content:
          CSharp: public double weight
          VB: Public weight As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.iWeight
      commentId: F:AssemblerLib.AssemblyObject.iWeight
      language: CSharp
      name:
        CSharp: iWeight
        VB: iWeight
      nameWithType:
        CSharp: AssemblyObject.iWeight
        VB: AssemblyObject.iWeight
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.iWeight
        VB: AssemblerLib.AssemblyObject.iWeight
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: iWeight
        path: AssemblyObject.cs
        startLine: 79
      summary: "\nInteger Weight for Weighted Random choice (to be implemented) or other weight-based operations\n"
      example: []
      syntax:
        content:
          CSharp: public int iWeight
          VB: Public iWeight As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.absoluteZLock
      commentId: F:AssemblerLib.AssemblyObject.absoluteZLock
      language: CSharp
      name:
        CSharp: absoluteZLock
        VB: absoluteZLock
      nameWithType:
        CSharp: AssemblyObject.absoluteZLock
        VB: AssemblyObject.absoluteZLock
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.absoluteZLock
        VB: AssemblerLib.AssemblyObject.absoluteZLock
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: absoluteZLock
        path: AssemblyObject.cs
        startLine: 83
      summary: "\nTrue to force the object&apos;s reference plane Z axys parallel to the World&apos;s Z axis\n"
      example: []
      syntax:
        content:
          CSharp: public bool absoluteZLock
          VB: Public absoluteZLock As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.#ctor
      commentId: M:AssemblerLib.AssemblyObject.#ctor
      language: CSharp
      name:
        CSharp: AssemblyObject()
        VB: AssemblyObject()
      nameWithType:
        CSharp: AssemblyObject.AssemblyObject()
        VB: AssemblyObject.AssemblyObject()
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.AssemblyObject()
        VB: AssemblerLib.AssemblyObject.AssemblyObject()
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: .ctor
        path: AssemblyObject.cs
        startLine: 96
      summary: "\nempty constructor\n"
      example: []
      syntax:
        content:
          CSharp: public AssemblyObject()
          VB: Public Sub New
      overload: AssemblerLib.AssemblyObject.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.#ctor(Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,AssemblerLib.Handle[],Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,System.Int32,System.Collections.Generic.List{System.Int32[]},System.Double,System.String,System.Int32,System.Double,System.Int32,System.Collections.Generic.List{AssemblerLib.Support},System.Int32,System.Boolean,System.Boolean,System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.List{System.Int32[]})
      commentId: M:AssemblerLib.AssemblyObject.#ctor(Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,AssemblerLib.Handle[],Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,System.Int32,System.Collections.Generic.List{System.Int32[]},System.Double,System.String,System.Int32,System.Double,System.Int32,System.Collections.Generic.List{AssemblerLib.Support},System.Int32,System.Boolean,System.Boolean,System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.List{System.Int32[]})
      language: CSharp
      name:
        CSharp: AssemblyObject(Mesh, Mesh, Handle[], Plane, Vector3d, Int32, List<Int32[]>, Double, String, Int32, Double, Int32, List<Support>, Int32, Boolean, Boolean, List<AssemblyObject>, List<Int32[]>)
        VB: AssemblyObject(Mesh, Mesh, Handle(), Plane, Vector3d, Int32, List(Of Int32()), Double, String, Int32, Double, Int32, List(Of Support), Int32, Boolean, Boolean, List(Of AssemblyObject), List(Of Int32()))
      nameWithType:
        CSharp: AssemblyObject.AssemblyObject(Mesh, Mesh, Handle[], Plane, Vector3d, Int32, List<Int32[]>, Double, String, Int32, Double, Int32, List<Support>, Int32, Boolean, Boolean, List<AssemblyObject>, List<Int32[]>)
        VB: AssemblyObject.AssemblyObject(Mesh, Mesh, Handle(), Plane, Vector3d, Int32, List(Of Int32()), Double, String, Int32, Double, Int32, List(Of Support), Int32, Boolean, Boolean, List(Of AssemblyObject), List(Of Int32()))
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.AssemblyObject(Rhino.Geometry.Mesh, Rhino.Geometry.Mesh, AssemblerLib.Handle[], Rhino.Geometry.Plane, Rhino.Geometry.Vector3d, System.Int32, System.Collections.Generic.List<System.Int32[]>, System.Double, System.String, System.Int32, System.Double, System.Int32, System.Collections.Generic.List<AssemblerLib.Support>, System.Int32, System.Boolean, System.Boolean, System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.Collections.Generic.List<System.Int32[]>)
        VB: AssemblerLib.AssemblyObject.AssemblyObject(Rhino.Geometry.Mesh, Rhino.Geometry.Mesh, AssemblerLib.Handle(), Rhino.Geometry.Plane, Rhino.Geometry.Vector3d, System.Int32, System.Collections.Generic.List(Of System.Int32()), System.Double, System.String, System.Int32, System.Double, System.Int32, System.Collections.Generic.List(Of AssemblerLib.Support), System.Int32, System.Boolean, System.Boolean, System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.Collections.Generic.List(Of System.Int32()))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: .ctor
        path: AssemblyObject.cs
        startLine: 130
      summary: "\nConstructor used for JSON deserialization\nThis constructor DOES NOT execute a deep copy of data\nIf you need to duplicate an AssemblyObject use the Utilities.Clone method\nor Utilities.CloneWithConnectivity method\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [JsonConstructor]

            public AssemblyObject(Mesh collisionMesh, Mesh offsetMesh, Handle[] handles, Plane referencePlane, Vector3d direction, int aInd, List<int[]> occludedNeighbours, double collisionRadius, string name, int type, double weight, int iWeight, List<Support> supports, int minSupports, bool supported, bool absoluteZLock, List<AssemblyObject> children, List<int[]> handleMap)
          VB: >-
            <JsonConstructor>

            Public Sub New(collisionMesh As Mesh, offsetMesh As Mesh, handles As Handle(), referencePlane As Plane, direction As Vector3d, aInd As Integer, occludedNeighbours As List(Of Integer()), collisionRadius As Double, name As String, type As Integer, weight As Double, iWeight As Integer, supports As List(Of Support), minSupports As Integer, supported As Boolean, absoluteZLock As Boolean, children As List(Of AssemblyObject), handleMap As List(Of Integer()))
        parameters:
        - id: collisionMesh
          type: Rhino.Geometry.Mesh
          description: ''
        - id: offsetMesh
          type: Rhino.Geometry.Mesh
          description: ''
        - id: handles
          type: AssemblerLib.Handle[]
          description: ''
        - id: referencePlane
          type: Rhino.Geometry.Plane
          description: ''
        - id: direction
          type: Rhino.Geometry.Vector3d
          description: ''
        - id: aInd
          type: System.Int32
          description: ''
        - id: occludedNeighbours
          type: System.Collections.Generic.List{System.Int32[]}
          description: ''
        - id: collisionRadius
          type: System.Double
          description: ''
        - id: name
          type: System.String
          description: ''
        - id: type
          type: System.Int32
          description: ''
        - id: weight
          type: System.Double
          description: ''
        - id: iWeight
          type: System.Int32
          description: ''
        - id: supports
          type: System.Collections.Generic.List{AssemblerLib.Support}
          description: ''
        - id: minSupports
          type: System.Int32
          description: ''
        - id: supported
          type: System.Boolean
          description: ''
        - id: absoluteZLock
          type: System.Boolean
          description: ''
        - id: children
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        - id: handleMap
          type: System.Collections.Generic.List{System.Int32[]}
          description: ''
      overload: AssemblerLib.AssemblyObject.#ctor*
      attributes:
      - type: Newtonsoft.Json.JsonConstructorAttribute
        ctor: Newtonsoft.Json.JsonConstructorAttribute.#ctor
        arguments: []
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.#ctor(Rhino.Geometry.Mesh,AssemblerLib.Handle[],Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,System.String,System.Int32,System.Double,System.Int32,System.Collections.Generic.List{AssemblerLib.Support},System.Int32,System.Boolean)
      commentId: M:AssemblerLib.AssemblyObject.#ctor(Rhino.Geometry.Mesh,AssemblerLib.Handle[],Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,System.String,System.Int32,System.Double,System.Int32,System.Collections.Generic.List{AssemblerLib.Support},System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: AssemblyObject(Mesh, Handle[], Plane, Vector3d, String, Int32, Double, Int32, List<Support>, Int32, Boolean)
        VB: AssemblyObject(Mesh, Handle(), Plane, Vector3d, String, Int32, Double, Int32, List(Of Support), Int32, Boolean)
      nameWithType:
        CSharp: AssemblyObject.AssemblyObject(Mesh, Handle[], Plane, Vector3d, String, Int32, Double, Int32, List<Support>, Int32, Boolean)
        VB: AssemblyObject.AssemblyObject(Mesh, Handle(), Plane, Vector3d, String, Int32, Double, Int32, List(Of Support), Int32, Boolean)
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.AssemblyObject(Rhino.Geometry.Mesh, AssemblerLib.Handle[], Rhino.Geometry.Plane, Rhino.Geometry.Vector3d, System.String, System.Int32, System.Double, System.Int32, System.Collections.Generic.List<AssemblerLib.Support>, System.Int32, System.Boolean)
        VB: AssemblerLib.AssemblyObject.AssemblyObject(Rhino.Geometry.Mesh, AssemblerLib.Handle(), Rhino.Geometry.Plane, Rhino.Geometry.Vector3d, System.String, System.Int32, System.Double, System.Int32, System.Collections.Generic.List(Of AssemblerLib.Support), System.Int32, System.Boolean)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: .ctor
        path: AssemblyObject.cs
        startLine: 169
      summary: "\nBuilds an AssemblyObject from all required parameters\n"
      example: []
      syntax:
        content:
          CSharp: public AssemblyObject(Mesh collisionMesh, Handle[] handles, Plane referencePlane, Vector3d direction, string name, int type, double weight, int iWeight, List<Support> supports, int minSupports, bool absoluteZLock)
          VB: Public Sub New(collisionMesh As Mesh, handles As Handle(), referencePlane As Plane, direction As Vector3d, name As String, type As Integer, weight As Double, iWeight As Integer, supports As List(Of Support), minSupports As Integer, absoluteZLock As Boolean)
        parameters:
        - id: collisionMesh
          type: Rhino.Geometry.Mesh
          description: Mesh for collision calculation
        - id: handles
          type: AssemblerLib.Handle[]
          description: handles for assemblage
        - id: referencePlane
          type: Rhino.Geometry.Plane
          description: reference Plane
        - id: direction
          type: Rhino.Geometry.Vector3d
          description: direction for Vector field interaction
        - id: name
          type: System.String
          description: object type name
        - id: type
          type: System.Int32
          description: object type id
        - id: weight
          type: System.Double
          description: scalar for density operations or field interactions
        - id: iWeight
          type: System.Int32
          description: integer Weight for Weighted Random choice
        - id: supports
          type: System.Collections.Generic.List{AssemblerLib.Support}
          description: list of supports
        - id: minSupports
          type: System.Int32
          description: minimum n. of supports required
        - id: absoluteZLock
          type: System.Boolean
          description: lock orientation of Z axis to World Z axis
      overload: AssemblerLib.AssemblyObject.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.#ctor(Rhino.Geometry.Mesh,Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,System.String,System.Int32,System.Double,System.Boolean,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      commentId: M:AssemblerLib.AssemblyObject.#ctor(Rhino.Geometry.Mesh,Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,System.String,System.Int32,System.Double,System.Boolean,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      language: CSharp
      name:
        CSharp: AssemblyObject(Mesh, Plane, Vector3d, String, Int32, Double, Boolean, List<AssemblyObject>)
        VB: AssemblyObject(Mesh, Plane, Vector3d, String, Int32, Double, Boolean, List(Of AssemblyObject))
      nameWithType:
        CSharp: AssemblyObject.AssemblyObject(Mesh, Plane, Vector3d, String, Int32, Double, Boolean, List<AssemblyObject>)
        VB: AssemblyObject.AssemblyObject(Mesh, Plane, Vector3d, String, Int32, Double, Boolean, List(Of AssemblyObject))
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.AssemblyObject(Rhino.Geometry.Mesh, Rhino.Geometry.Plane, Rhino.Geometry.Vector3d, System.String, System.Int32, System.Double, System.Boolean, System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
        VB: AssemblerLib.AssemblyObject.AssemblyObject(Rhino.Geometry.Mesh, Rhino.Geometry.Plane, Rhino.Geometry.Vector3d, System.String, System.Int32, System.Double, System.Boolean, System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: .ctor
        path: AssemblyObject.cs
        startLine: 226
      summary: "\nBuilds a composite AssemblyObject from a list of children and a custom collisionMesh\n"
      example: []
      syntax:
        content:
          CSharp: public AssemblyObject(Mesh collisionMesh, Plane referencePlane, Vector3d direction, string name, int type, double weight, bool absoluteZLock, List<AssemblyObject> children)
          VB: Public Sub New(collisionMesh As Mesh, referencePlane As Plane, direction As Vector3d, name As String, type As Integer, weight As Double, absoluteZLock As Boolean, children As List(Of AssemblyObject))
        parameters:
        - id: collisionMesh
          type: Rhino.Geometry.Mesh
          description: ''
        - id: referencePlane
          type: Rhino.Geometry.Plane
          description: ''
        - id: direction
          type: Rhino.Geometry.Vector3d
          description: ''
        - id: name
          type: System.String
          description: ''
        - id: type
          type: System.Int32
          description: ''
        - id: weight
          type: System.Double
          description: ''
        - id: absoluteZLock
          type: System.Boolean
          description: ''
        - id: children
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
      overload: AssemblerLib.AssemblyObject.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.#ctor(Rhino.Geometry.Mesh,AssemblerLib.Handle[],Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,System.String,System.Int32,System.Double,System.Boolean,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      commentId: M:AssemblerLib.AssemblyObject.#ctor(Rhino.Geometry.Mesh,AssemblerLib.Handle[],Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,System.String,System.Int32,System.Double,System.Boolean,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      language: CSharp
      name:
        CSharp: AssemblyObject(Mesh, Handle[], Plane, Vector3d, String, Int32, Double, Boolean, List<AssemblyObject>)
        VB: AssemblyObject(Mesh, Handle(), Plane, Vector3d, String, Int32, Double, Boolean, List(Of AssemblyObject))
      nameWithType:
        CSharp: AssemblyObject.AssemblyObject(Mesh, Handle[], Plane, Vector3d, String, Int32, Double, Boolean, List<AssemblyObject>)
        VB: AssemblyObject.AssemblyObject(Mesh, Handle(), Plane, Vector3d, String, Int32, Double, Boolean, List(Of AssemblyObject))
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.AssemblyObject(Rhino.Geometry.Mesh, AssemblerLib.Handle[], Rhino.Geometry.Plane, Rhino.Geometry.Vector3d, System.String, System.Int32, System.Double, System.Boolean, System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
        VB: AssemblerLib.AssemblyObject.AssemblyObject(Rhino.Geometry.Mesh, AssemblerLib.Handle(), Rhino.Geometry.Plane, Rhino.Geometry.Vector3d, System.String, System.Int32, System.Double, System.Boolean, System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: .ctor
        path: AssemblyObject.cs
        startLine: 252
      summary: "\nBuilds a composite AssemblyObject from a list of children, a custom collisionMesh, and a custom set of Handles\n"
      example: []
      syntax:
        content:
          CSharp: public AssemblyObject(Mesh collisionMesh, Handle[] handles, Plane referencePlane, Vector3d direction, string name, int type, double weight, bool absoluteZLock, List<AssemblyObject> children)
          VB: Public Sub New(collisionMesh As Mesh, handles As Handle(), referencePlane As Plane, direction As Vector3d, name As String, type As Integer, weight As Double, absoluteZLock As Boolean, children As List(Of AssemblyObject))
        parameters:
        - id: collisionMesh
          type: Rhino.Geometry.Mesh
          description: ''
        - id: handles
          type: AssemblerLib.Handle[]
          description: ''
        - id: referencePlane
          type: Rhino.Geometry.Plane
          description: ''
        - id: direction
          type: Rhino.Geometry.Vector3d
          description: ''
        - id: name
          type: System.String
          description: ''
        - id: type
          type: System.Int32
          description: ''
        - id: weight
          type: System.Double
          description: ''
        - id: absoluteZLock
          type: System.Boolean
          description: ''
        - id: children
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
      overload: AssemblerLib.AssemblyObject.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.Transform(Rhino.Geometry.Transform)
      commentId: M:AssemblerLib.AssemblyObject.Transform(Rhino.Geometry.Transform)
      language: CSharp
      name:
        CSharp: Transform(Transform)
        VB: Transform(Transform)
      nameWithType:
        CSharp: AssemblyObject.Transform(Transform)
        VB: AssemblyObject.Transform(Transform)
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.Transform(Rhino.Geometry.Transform)
        VB: AssemblerLib.AssemblyObject.Transform(Rhino.Geometry.Transform)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: Transform
        path: AssemblyObject.cs
        startLine: 285
      summary: "\nTransform AssemblyObject using a generic Transformation\n"
      example: []
      syntax:
        content:
          CSharp: public void Transform(Transform xForm)
          VB: Public Sub Transform(xForm As Transform)
        parameters:
        - id: xForm
          type: Rhino.Geometry.Transform
          description: The Transformation to apply
      overload: AssemblerLib.AssemblyObject.Transform*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.AssemblyObject.UpdateHandle(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)
      commentId: M:AssemblerLib.AssemblyObject.UpdateHandle(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)
      language: CSharp
      name:
        CSharp: UpdateHandle(Int32, Int32, Int32, Int32, Double)
        VB: UpdateHandle(Int32, Int32, Int32, Int32, Double)
      nameWithType:
        CSharp: AssemblyObject.UpdateHandle(Int32, Int32, Int32, Int32, Double)
        VB: AssemblyObject.UpdateHandle(Int32, Int32, Int32, Int32, Double)
      qualifiedName:
        CSharp: AssemblerLib.AssemblyObject.UpdateHandle(System.Int32, System.Int32, System.Int32, System.Int32, System.Double)
        VB: AssemblerLib.AssemblyObject.UpdateHandle(System.Int32, System.Int32, System.Int32, System.Int32, System.Double)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/AssemblyObject.cs
        id: UpdateHandle
        path: AssemblyObject.cs
        startLine: 308
      syntax:
        content:
          CSharp: public void UpdateHandle(int handleIndex, int occupancy, int neighbourObject, int neighbourHandle, double weight)
          VB: Public Sub UpdateHandle(handleIndex As Integer, occupancy As Integer, neighbourObject As Integer, neighbourHandle As Integer, weight As Double)
        parameters:
        - id: handleIndex
          type: System.Int32
        - id: occupancy
          type: System.Int32
        - id: neighbourObject
          type: System.Int32
        - id: neighbourHandle
          type: System.Int32
        - id: weight
          type: System.Double
      overload: AssemblerLib.AssemblyObject.UpdateHandle*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: AssemblerLib.ExogenousSettings
    commentId: T:AssemblerLib.ExogenousSettings
    language: CSharp
    name:
      CSharp: ExogenousSettings
      VB: ExogenousSettings
    nameWithType:
      CSharp: ExogenousSettings
      VB: ExogenousSettings
    qualifiedName:
      CSharp: AssemblerLib.ExogenousSettings
      VB: AssemblerLib.ExogenousSettings
    type: Struct
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/ExogenousSettings.cs
      id: ExogenousSettings
      path: ExogenousSettings.cs
      startLine: 5
    syntax:
      content:
        CSharp: public struct ExogenousSettings
        VB: Public Structure ExogenousSettings
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: AssemblerLib.ExogenousSettings.environmentMeshes
      commentId: F:AssemblerLib.ExogenousSettings.environmentMeshes
      language: CSharp
      name:
        CSharp: environmentMeshes
        VB: environmentMeshes
      nameWithType:
        CSharp: ExogenousSettings.environmentMeshes
        VB: ExogenousSettings.environmentMeshes
      qualifiedName:
        CSharp: AssemblerLib.ExogenousSettings.environmentMeshes
        VB: AssemblerLib.ExogenousSettings.environmentMeshes
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/ExogenousSettings.cs
        id: environmentMeshes
        path: ExogenousSettings.cs
        startLine: 7
      syntax:
        content:
          CSharp: public List<Mesh> environmentMeshes
          VB: Public environmentMeshes As List(Of Mesh)
        return:
          type: System.Collections.Generic.List{Rhino.Geometry.Mesh}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.ExogenousSettings.environmentMode
      commentId: F:AssemblerLib.ExogenousSettings.environmentMode
      language: CSharp
      name:
        CSharp: environmentMode
        VB: environmentMode
      nameWithType:
        CSharp: ExogenousSettings.environmentMode
        VB: ExogenousSettings.environmentMode
      qualifiedName:
        CSharp: AssemblerLib.ExogenousSettings.environmentMode
        VB: AssemblerLib.ExogenousSettings.environmentMode
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/ExogenousSettings.cs
        id: environmentMode
        path: ExogenousSettings.cs
        startLine: 8
      syntax:
        content:
          CSharp: public int environmentMode
          VB: Public environmentMode As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.ExogenousSettings.field
      commentId: F:AssemblerLib.ExogenousSettings.field
      language: CSharp
      name:
        CSharp: field
        VB: field
      nameWithType:
        CSharp: ExogenousSettings.field
        VB: ExogenousSettings.field
      qualifiedName:
        CSharp: AssemblerLib.ExogenousSettings.field
        VB: AssemblerLib.ExogenousSettings.field
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/ExogenousSettings.cs
        id: field
        path: ExogenousSettings.cs
        startLine: 9
      syntax:
        content:
          CSharp: public Field field
          VB: Public field As Field
        return:
          type: AssemblerLib.Field
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.ExogenousSettings.fieldScalarThreshold
      commentId: F:AssemblerLib.ExogenousSettings.fieldScalarThreshold
      language: CSharp
      name:
        CSharp: fieldScalarThreshold
        VB: fieldScalarThreshold
      nameWithType:
        CSharp: ExogenousSettings.fieldScalarThreshold
        VB: ExogenousSettings.fieldScalarThreshold
      qualifiedName:
        CSharp: AssemblerLib.ExogenousSettings.fieldScalarThreshold
        VB: AssemblerLib.ExogenousSettings.fieldScalarThreshold
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/ExogenousSettings.cs
        id: fieldScalarThreshold
        path: ExogenousSettings.cs
        startLine: 10
      syntax:
        content:
          CSharp: public double fieldScalarThreshold
          VB: Public fieldScalarThreshold As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.ExogenousSettings.sandBox
      commentId: F:AssemblerLib.ExogenousSettings.sandBox
      language: CSharp
      name:
        CSharp: sandBox
        VB: sandBox
      nameWithType:
        CSharp: ExogenousSettings.sandBox
        VB: ExogenousSettings.sandBox
      qualifiedName:
        CSharp: AssemblerLib.ExogenousSettings.sandBox
        VB: AssemblerLib.ExogenousSettings.sandBox
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/ExogenousSettings.cs
        id: sandBox
        path: ExogenousSettings.cs
        startLine: 11
      syntax:
        content:
          CSharp: public Box sandBox
          VB: Public sandBox As Box
        return:
          type: Rhino.Geometry.Box
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.ExogenousSettings.#ctor(System.Collections.Generic.List{Rhino.Geometry.Mesh},System.Int32,AssemblerLib.Field,System.Double,Rhino.Geometry.Box)
      commentId: M:AssemblerLib.ExogenousSettings.#ctor(System.Collections.Generic.List{Rhino.Geometry.Mesh},System.Int32,AssemblerLib.Field,System.Double,Rhino.Geometry.Box)
      language: CSharp
      name:
        CSharp: ExogenousSettings(List<Mesh>, Int32, Field, Double, Box)
        VB: ExogenousSettings(List(Of Mesh), Int32, Field, Double, Box)
      nameWithType:
        CSharp: ExogenousSettings.ExogenousSettings(List<Mesh>, Int32, Field, Double, Box)
        VB: ExogenousSettings.ExogenousSettings(List(Of Mesh), Int32, Field, Double, Box)
      qualifiedName:
        CSharp: AssemblerLib.ExogenousSettings.ExogenousSettings(System.Collections.Generic.List<Rhino.Geometry.Mesh>, System.Int32, AssemblerLib.Field, System.Double, Rhino.Geometry.Box)
        VB: AssemblerLib.ExogenousSettings.ExogenousSettings(System.Collections.Generic.List(Of Rhino.Geometry.Mesh), System.Int32, AssemblerLib.Field, System.Double, Rhino.Geometry.Box)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/ExogenousSettings.cs
        id: .ctor
        path: ExogenousSettings.cs
        startLine: 13
      syntax:
        content:
          CSharp: public ExogenousSettings(List<Mesh> environmentMeshes, int environmentMode, Field field, double fieldScalarThreshold, Box sandBox)
          VB: Public Sub New(environmentMeshes As List(Of Mesh), environmentMode As Integer, field As Field, fieldScalarThreshold As Double, sandBox As Box)
        parameters:
        - id: environmentMeshes
          type: System.Collections.Generic.List{Rhino.Geometry.Mesh}
        - id: environmentMode
          type: System.Int32
        - id: field
          type: AssemblerLib.Field
        - id: fieldScalarThreshold
          type: System.Double
        - id: sandBox
          type: Rhino.Geometry.Box
      overload: AssemblerLib.ExogenousSettings.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: AssemblerLib.Field
    commentId: T:AssemblerLib.Field
    language: CSharp
    name:
      CSharp: Field
      VB: Field
    nameWithType:
      CSharp: Field
      VB: Field
    qualifiedName:
      CSharp: AssemblerLib.Field
      VB: AssemblerLib.Field
    type: Class
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
      id: Field
      path: Field.cs
      startLine: 15
    summary: "\nStores spatially-distributed scalar, vector and integer weights values\n"
    example: []
    syntax:
      content:
        CSharp: public class Field
        VB: Public Class Field
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: AssemblerLib.Field.tensors
      commentId: F:AssemblerLib.Field.tensors
      language: CSharp
      name:
        CSharp: tensors
        VB: tensors
      nameWithType:
        CSharp: Field.tensors
        VB: Field.tensors
      qualifiedName:
        CSharp: AssemblerLib.Field.tensors
        VB: AssemblerLib.Field.tensors
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: tensors
        path: Field.cs
        startLine: 20
      summary: "\nArray of Tensor points in the field\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor[] tensors
          VB: Public tensors As Tensor()
        return:
          type: AssemblerLib.Tensor[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.topology
      commentId: F:AssemblerLib.Field.topology
      language: CSharp
      name:
        CSharp: topology
        VB: topology
      nameWithType:
        CSharp: Field.topology
        VB: Field.topology
      qualifiedName:
        CSharp: AssemblerLib.Field.topology
        VB: AssemblerLib.Field.topology
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: topology
        path: Field.cs
        startLine: 36
      summary: "\nNeighbour index array - for future implementation\n"
      example: []
      syntax:
        content:
          CSharp: public int[][] topology
          VB: Public topology As Integer()()
        return:
          type: System.Int32[][]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.colors
      commentId: F:AssemblerLib.Field.colors
      language: CSharp
      name:
        CSharp: colors
        VB: colors
      nameWithType:
        CSharp: Field.colors
        VB: Field.colors
      qualifiedName:
        CSharp: AssemblerLib.Field.colors
        VB: AssemblerLib.Field.colors
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: colors
        path: Field.cs
        startLine: 40
      summary: "\nField points color - for display purposes only\n"
      example: []
      syntax:
        content:
          CSharp: public Color[] colors
          VB: Public colors As Color()
        return:
          type: System.Drawing.Color[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.#ctor(AssemblerLib.Field)
      commentId: M:AssemblerLib.Field.#ctor(AssemblerLib.Field)
      language: CSharp
      name:
        CSharp: Field(Field)
        VB: Field(Field)
      nameWithType:
        CSharp: Field.Field(Field)
        VB: Field.Field(Field)
      qualifiedName:
        CSharp: AssemblerLib.Field.Field(AssemblerLib.Field)
        VB: AssemblerLib.Field.Field(AssemblerLib.Field)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: .ctor
        path: Field.cs
        startLine: 52
      summary: "\nConstruct a Field from another Field (copy)\n"
      example: []
      syntax:
        content:
          CSharp: public Field(Field otherField)
          VB: Public Sub New(otherField As Field)
        parameters:
        - id: otherField
          type: AssemblerLib.Field
          description: ''
      overload: AssemblerLib.Field.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
      commentId: M:AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
      language: CSharp
      name:
        CSharp: Field(List<Point3d>, DataTree<Double>, DataTree<Vector3d>, DataTree<Int32>)
        VB: Field(List(Of Point3d), DataTree(Of Double), DataTree(Of Vector3d), DataTree(Of Int32))
      nameWithType:
        CSharp: Field.Field(List<Point3d>, DataTree<Double>, DataTree<Vector3d>, DataTree<Int32>)
        VB: Field.Field(List(Of Point3d), DataTree(Of Double), DataTree(Of Vector3d), DataTree(Of Int32))
      qualifiedName:
        CSharp: AssemblerLib.Field.Field(System.Collections.Generic.List<Rhino.Geometry.Point3d>, Grasshopper.DataTree<System.Double>, Grasshopper.DataTree<Rhino.Geometry.Vector3d>, Grasshopper.DataTree<System.Int32>)
        VB: AssemblerLib.Field.Field(System.Collections.Generic.List(Of Rhino.Geometry.Point3d), Grasshopper.DataTree(Of System.Double), Grasshopper.DataTree(Of Rhino.Geometry.Vector3d), Grasshopper.DataTree(Of System.Int32))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: .ctor
        path: Field.cs
        startLine: 71
      summary: "\nConstruct a Field from a List of Point3d, DataTrees for scalar and vector (multiple values per point), and a DataTree for topology (neighbours map)\n"
      example: []
      syntax:
        content:
          CSharp: public Field(List<Point3d> points, DataTree<double> scalars, DataTree<Vector3d> vectors, DataTree<int> topology)
          VB: Public Sub New(points As List(Of Point3d), scalars As DataTree(Of Double), vectors As DataTree(Of Vector3d), topology As DataTree(Of Integer))
        parameters:
        - id: points
          type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
          description: ''
        - id: scalars
          type: Grasshopper.DataTree{System.Double}
          description: ''
        - id: vectors
          type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
          description: ''
        - id: topology
          type: Grasshopper.DataTree{System.Int32}
          description: ''
      overload: AssemblerLib.Field.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})
      commentId: M:AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})
      language: CSharp
      name:
        CSharp: Field(List<Point3d>, DataTree<Double>, DataTree<Vector3d>)
        VB: Field(List(Of Point3d), DataTree(Of Double), DataTree(Of Vector3d))
      nameWithType:
        CSharp: Field.Field(List<Point3d>, DataTree<Double>, DataTree<Vector3d>)
        VB: Field.Field(List(Of Point3d), DataTree(Of Double), DataTree(Of Vector3d))
      qualifiedName:
        CSharp: AssemblerLib.Field.Field(System.Collections.Generic.List<Rhino.Geometry.Point3d>, Grasshopper.DataTree<System.Double>, Grasshopper.DataTree<Rhino.Geometry.Vector3d>)
        VB: AssemblerLib.Field.Field(System.Collections.Generic.List(Of Rhino.Geometry.Point3d), Grasshopper.DataTree(Of System.Double), Grasshopper.DataTree(Of Rhino.Geometry.Vector3d))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: .ctor
        path: Field.cs
        startLine: 94
      summary: "\nConstruct a Field from a List of Point3d, and DataTrees for scalar and vector values (multiple values per point)\n"
      example: []
      syntax:
        content:
          CSharp: public Field(List<Point3d> points, DataTree<double> scalar, DataTree<Vector3d> vector)
          VB: Public Sub New(points As List(Of Point3d), scalar As DataTree(Of Double), vector As DataTree(Of Vector3d))
        parameters:
        - id: points
          type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
          description: ''
        - id: scalar
          type: Grasshopper.DataTree{System.Double}
          description: ''
        - id: vector
          type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
          description: ''
      overload: AssemblerLib.Field.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
      commentId: M:AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
      language: CSharp
      name:
        CSharp: Field(List<Point3d>, List<Double>, List<Vector3d>, DataTree<Int32>)
        VB: Field(List(Of Point3d), List(Of Double), List(Of Vector3d), DataTree(Of Int32))
      nameWithType:
        CSharp: Field.Field(List<Point3d>, List<Double>, List<Vector3d>, DataTree<Int32>)
        VB: Field.Field(List(Of Point3d), List(Of Double), List(Of Vector3d), DataTree(Of Int32))
      qualifiedName:
        CSharp: AssemblerLib.Field.Field(System.Collections.Generic.List<Rhino.Geometry.Point3d>, System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>, Grasshopper.DataTree<System.Int32>)
        VB: AssemblerLib.Field.Field(System.Collections.Generic.List(Of Rhino.Geometry.Point3d), System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d), Grasshopper.DataTree(Of System.Int32))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: .ctor
        path: Field.cs
        startLine: 104
      summary: "\nConstruct a Field from a List of Point3d, Lists for scalar and vector (single values per point), and a DataTree for topology (neighbours map)\n"
      example: []
      syntax:
        content:
          CSharp: public Field(List<Point3d> points, List<double> scalar, List<Vector3d> vector, DataTree<int> topology)
          VB: Public Sub New(points As List(Of Point3d), scalar As List(Of Double), vector As List(Of Vector3d), topology As DataTree(Of Integer))
        parameters:
        - id: points
          type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
          description: ''
        - id: scalar
          type: System.Collections.Generic.List{System.Double}
          description: ''
        - id: vector
          type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
          description: ''
        - id: topology
          type: Grasshopper.DataTree{System.Int32}
          description: ''
      overload: AssemblerLib.Field.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      commentId: M:AssemblerLib.Field.#ctor(System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      language: CSharp
      name:
        CSharp: Field(List<Point3d>, List<Double>, List<Vector3d>)
        VB: Field(List(Of Point3d), List(Of Double), List(Of Vector3d))
      nameWithType:
        CSharp: Field.Field(List<Point3d>, List<Double>, List<Vector3d>)
        VB: Field.Field(List(Of Point3d), List(Of Double), List(Of Vector3d))
      qualifiedName:
        CSharp: AssemblerLib.Field.Field(System.Collections.Generic.List<Rhino.Geometry.Point3d>, System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
        VB: AssemblerLib.Field.Field(System.Collections.Generic.List(Of Rhino.Geometry.Point3d), System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: .ctor
        path: Field.cs
        startLine: 127
      summary: "\nConstruct a Field from a List of Point3d, and Lists for scalar and vector (single values per point)\n"
      example: []
      syntax:
        content:
          CSharp: public Field(List<Point3d> points, List<double> scalar, List<Vector3d> vector)
          VB: Public Sub New(points As List(Of Point3d), scalar As List(Of Double), vector As List(Of Vector3d))
        parameters:
        - id: points
          type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
          description: ''
        - id: scalar
          type: System.Collections.Generic.List{System.Double}
          description: ''
        - id: vector
          type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
          description: ''
      overload: AssemblerLib.Field.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Double,System.Double,System.Double)
      commentId: M:AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Field(Box, Double, Double, Double)
        VB: Field(Box, Double, Double, Double)
      nameWithType:
        CSharp: Field.Field(Box, Double, Double, Double)
        VB: Field.Field(Box, Double, Double, Double)
      qualifiedName:
        CSharp: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Double, System.Double, System.Double)
        VB: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Double, System.Double, System.Double)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: .ctor
        path: Field.cs
        startLine: 141
      summary: "\nconstructs an empty field from a Box, with individual resolutions in X, Y, and Z\n"
      example: []
      syntax:
        content:
          CSharp: public Field(Box b, double resX, double resY, double resZ)
          VB: Public Sub New(b As Box, resX As Double, resY As Double, resZ As Double)
        parameters:
        - id: b
          type: Rhino.Geometry.Box
          description: ''
        - id: resX
          type: System.Double
          description: ''
        - id: resY
          type: System.Double
          description: ''
        - id: resZ
          type: System.Double
          description: ''
      overload: AssemblerLib.Field.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Double)
      commentId: M:AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Double)
      language: CSharp
      name:
        CSharp: Field(Box, Double)
        VB: Field(Box, Double)
      nameWithType:
        CSharp: Field.Field(Box, Double)
        VB: Field.Field(Box, Double)
      qualifiedName:
        CSharp: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Double)
        VB: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Double)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: .ctor
        path: Field.cs
        startLine: 158
      summary: "\nconstructs an empty field from a Box, with single resolution\n"
      example: []
      syntax:
        content:
          CSharp: public Field(Box b, double res)
          VB: Public Sub New(b As Box, res As Double)
        parameters:
        - id: b
          type: Rhino.Geometry.Box
          description: ''
        - id: res
          type: System.Double
          description: ''
      overload: AssemblerLib.Field.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Int32,System.Int32,System.Int32)
      commentId: M:AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Field(Box, Int32, Int32, Int32)
        VB: Field(Box, Int32, Int32, Int32)
      nameWithType:
        CSharp: Field.Field(Box, Int32, Int32, Int32)
        VB: Field.Field(Box, Int32, Int32, Int32)
      qualifiedName:
        CSharp: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Int32, System.Int32, System.Int32)
        VB: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Int32, System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: .ctor
        path: Field.cs
        startLine: 168
      summary: "\nconstructs an empty field from a Box, with individual number of points in X, Y, and Z\n"
      example: []
      syntax:
        content:
          CSharp: public Field(Box b, int nX, int nY, int nZ)
          VB: Public Sub New(b As Box, nX As Integer, nY As Integer, nZ As Integer)
        parameters:
        - id: b
          type: Rhino.Geometry.Box
          description: ''
        - id: nX
          type: System.Int32
          description: ''
        - id: nY
          type: System.Int32
          description: ''
        - id: nZ
          type: System.Int32
          description: ''
      overload: AssemblerLib.Field.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Int32)
      commentId: M:AssemblerLib.Field.#ctor(Rhino.Geometry.Box,System.Int32)
      language: CSharp
      name:
        CSharp: Field(Box, Int32)
        VB: Field(Box, Int32)
      nameWithType:
        CSharp: Field.Field(Box, Int32)
        VB: Field.Field(Box, Int32)
      qualifiedName:
        CSharp: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Int32)
        VB: AssemblerLib.Field.Field(Rhino.Geometry.Box, System.Int32)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: .ctor
        path: Field.cs
        startLine: 178
      summary: "\nconstructs an empty field from a Box, with n points on the largest dimension and according numbers on other\n"
      example: []
      syntax:
        content:
          CSharp: public Field(Box b, int n)
          VB: Public Sub New(b As Box, n As Integer)
        parameters:
        - id: b
          type: Rhino.Geometry.Box
          description: ''
        - id: n
          type: System.Int32
          description: ''
      overload: AssemblerLib.Field.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.#ctor(Rhino.Geometry.Mesh,Rhino.Geometry.Plane,System.Int32)
      commentId: M:AssemblerLib.Field.#ctor(Rhino.Geometry.Mesh,Rhino.Geometry.Plane,System.Int32)
      language: CSharp
      name:
        CSharp: Field(Mesh, Plane, Int32)
        VB: Field(Mesh, Plane, Int32)
      nameWithType:
        CSharp: Field.Field(Mesh, Plane, Int32)
        VB: Field.Field(Mesh, Plane, Int32)
      qualifiedName:
        CSharp: AssemblerLib.Field.Field(Rhino.Geometry.Mesh, Rhino.Geometry.Plane, System.Int32)
        VB: AssemblerLib.Field.Field(Rhino.Geometry.Mesh, Rhino.Geometry.Plane, System.Int32)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: .ctor
        path: Field.cs
        startLine: 209
      summary: "\nconstructs an empty field from a Mesh and an orientation plane, with n points on the largest dimension and according numbers on other\n"
      example: []
      syntax:
        content:
          CSharp: public Field(Mesh M, Plane P, int n)
          VB: Public Sub New(M As Mesh, P As Plane, n As Integer)
        parameters:
        - id: M
          type: Rhino.Geometry.Mesh
          description: ''
        - id: P
          type: Rhino.Geometry.Plane
          description: ''
        - id: n
          type: System.Int32
          description: ''
      overload: AssemblerLib.Field.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.#ctor(Rhino.Geometry.Mesh,Rhino.Geometry.Plane,System.Int32,System.Int32,System.Int32)
      commentId: M:AssemblerLib.Field.#ctor(Rhino.Geometry.Mesh,Rhino.Geometry.Plane,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Field(Mesh, Plane, Int32, Int32, Int32)
        VB: Field(Mesh, Plane, Int32, Int32, Int32)
      nameWithType:
        CSharp: Field.Field(Mesh, Plane, Int32, Int32, Int32)
        VB: Field.Field(Mesh, Plane, Int32, Int32, Int32)
      qualifiedName:
        CSharp: AssemblerLib.Field.Field(Rhino.Geometry.Mesh, Rhino.Geometry.Plane, System.Int32, System.Int32, System.Int32)
        VB: AssemblerLib.Field.Field(Rhino.Geometry.Mesh, Rhino.Geometry.Plane, System.Int32, System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: .ctor
        path: Field.cs
        startLine: 220
      summary: "\nconstructs an empty field from a Mesh and an orientation plane, with individual number of points in X, Y, and Z\n"
      example: []
      syntax:
        content:
          CSharp: public Field(Mesh M, Plane P, int nX, int nY, int nZ)
          VB: Public Sub New(M As Mesh, P As Plane, nX As Integer, nY As Integer, nZ As Integer)
        parameters:
        - id: M
          type: Rhino.Geometry.Mesh
          description: ''
        - id: P
          type: Rhino.Geometry.Plane
          description: ''
        - id: nX
          type: System.Int32
          description: ''
        - id: nY
          type: System.Int32
          description: ''
        - id: nZ
          type: System.Int32
          description: ''
      overload: AssemblerLib.Field.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.PopulateScalars(System.Collections.Generic.List{System.Double})
      commentId: M:AssemblerLib.Field.PopulateScalars(System.Collections.Generic.List{System.Double})
      language: CSharp
      name:
        CSharp: PopulateScalars(List<Double>)
        VB: PopulateScalars(List(Of Double))
      nameWithType:
        CSharp: Field.PopulateScalars(List<Double>)
        VB: Field.PopulateScalars(List(Of Double))
      qualifiedName:
        CSharp: AssemblerLib.Field.PopulateScalars(System.Collections.Generic.List<System.Double>)
        VB: AssemblerLib.Field.PopulateScalars(System.Collections.Generic.List(Of System.Double))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: PopulateScalars
        path: Field.cs
        startLine: 256
      summary: "\nPopulate Field with scalar values - 1 value per Field point\n"
      example: []
      syntax:
        content:
          CSharp: public bool PopulateScalars(List<double> scalarValues)
          VB: Public Function PopulateScalars(scalarValues As List(Of Double)) As Boolean
        parameters:
        - id: scalarValues
          type: System.Collections.Generic.List{System.Double}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Field.PopulateScalars*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.PopulateScalars(Grasshopper.DataTree{System.Double})
      commentId: M:AssemblerLib.Field.PopulateScalars(Grasshopper.DataTree{System.Double})
      language: CSharp
      name:
        CSharp: PopulateScalars(DataTree<Double>)
        VB: PopulateScalars(DataTree(Of Double))
      nameWithType:
        CSharp: Field.PopulateScalars(DataTree<Double>)
        VB: Field.PopulateScalars(DataTree(Of Double))
      qualifiedName:
        CSharp: AssemblerLib.Field.PopulateScalars(Grasshopper.DataTree<System.Double>)
        VB: AssemblerLib.Field.PopulateScalars(Grasshopper.DataTree(Of System.Double))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: PopulateScalars
        path: Field.cs
        startLine: 275
      summary: "\nPopulate Field with scalar values - multiple values per Field point\n"
      example: []
      syntax:
        content:
          CSharp: public bool PopulateScalars(DataTree<double> scalarValues)
          VB: Public Function PopulateScalars(scalarValues As DataTree(Of Double)) As Boolean
        parameters:
        - id: scalarValues
          type: Grasshopper.DataTree{System.Double}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Field.PopulateScalars*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.PopulateVectors(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      commentId: M:AssemblerLib.Field.PopulateVectors(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      language: CSharp
      name:
        CSharp: PopulateVectors(List<Vector3d>)
        VB: PopulateVectors(List(Of Vector3d))
      nameWithType:
        CSharp: Field.PopulateVectors(List<Vector3d>)
        VB: Field.PopulateVectors(List(Of Vector3d))
      qualifiedName:
        CSharp: AssemblerLib.Field.PopulateVectors(System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
        VB: AssemblerLib.Field.PopulateVectors(System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: PopulateVectors
        path: Field.cs
        startLine: 296
      summary: "\nPopulate Field with vector values - 1 value per Field point\n"
      example: []
      syntax:
        content:
          CSharp: public bool PopulateVectors(List<Vector3d> vectorValues)
          VB: Public Function PopulateVectors(vectorValues As List(Of Vector3d)) As Boolean
        parameters:
        - id: vectorValues
          type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Field.PopulateVectors*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.PopulateVectors(Grasshopper.DataTree{Rhino.Geometry.Vector3d})
      commentId: M:AssemblerLib.Field.PopulateVectors(Grasshopper.DataTree{Rhino.Geometry.Vector3d})
      language: CSharp
      name:
        CSharp: PopulateVectors(DataTree<Vector3d>)
        VB: PopulateVectors(DataTree(Of Vector3d))
      nameWithType:
        CSharp: Field.PopulateVectors(DataTree<Vector3d>)
        VB: Field.PopulateVectors(DataTree(Of Vector3d))
      qualifiedName:
        CSharp: AssemblerLib.Field.PopulateVectors(Grasshopper.DataTree<Rhino.Geometry.Vector3d>)
        VB: AssemblerLib.Field.PopulateVectors(Grasshopper.DataTree(Of Rhino.Geometry.Vector3d))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: PopulateVectors
        path: Field.cs
        startLine: 313
      summary: "\nPopulate Field with vector values - multiple values per Field point\n"
      example: []
      syntax:
        content:
          CSharp: public bool PopulateVectors(DataTree<Vector3d> vectorValues)
          VB: Public Function PopulateVectors(vectorValues As DataTree(Of Vector3d)) As Boolean
        parameters:
        - id: vectorValues
          type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Field.PopulateVectors*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      commentId: M:AssemblerLib.Field.PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      language: CSharp
      name:
        CSharp: PopulateField(List<Double>, List<Vector3d>)
        VB: PopulateField(List(Of Double), List(Of Vector3d))
      nameWithType:
        CSharp: Field.PopulateField(List<Double>, List<Vector3d>)
        VB: Field.PopulateField(List(Of Double), List(Of Vector3d))
      qualifiedName:
        CSharp: AssemblerLib.Field.PopulateField(System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
        VB: AssemblerLib.Field.PopulateField(System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: PopulateField
        path: Field.cs
        startLine: 333
      summary: "\nPopulates Field - a single scalar and vector for each Field point, no iWeights\n"
      example: []
      syntax:
        content:
          CSharp: public bool PopulateField(List<double> scalarValues, List<Vector3d> vectorValues)
          VB: Public Function PopulateField(scalarValues As List(Of Double), vectorValues As List(Of Vector3d)) As Boolean
        parameters:
        - id: scalarValues
          type: System.Collections.Generic.List{System.Double}
          description: ''
        - id: vectorValues
          type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Field.PopulateField*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})
      commentId: M:AssemblerLib.Field.PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d})
      language: CSharp
      name:
        CSharp: PopulateField(DataTree<Double>, DataTree<Vector3d>)
        VB: PopulateField(DataTree(Of Double), DataTree(Of Vector3d))
      nameWithType:
        CSharp: Field.PopulateField(DataTree<Double>, DataTree<Vector3d>)
        VB: Field.PopulateField(DataTree(Of Double), DataTree(Of Vector3d))
      qualifiedName:
        CSharp: AssemblerLib.Field.PopulateField(Grasshopper.DataTree<System.Double>, Grasshopper.DataTree<Rhino.Geometry.Vector3d>)
        VB: AssemblerLib.Field.PopulateField(Grasshopper.DataTree(Of System.Double), Grasshopper.DataTree(Of Rhino.Geometry.Vector3d))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: PopulateField
        path: Field.cs
        startLine: 350
      summary: "\nPopulates Field - lists of scalars and vectors for each Field point, no iWeights\n"
      example: []
      syntax:
        content:
          CSharp: public bool PopulateField(DataTree<double> scalarValues, DataTree<Vector3d> vectorValues)
          VB: Public Function PopulateField(scalarValues As DataTree(Of Double), vectorValues As DataTree(Of Vector3d)) As Boolean
        parameters:
        - id: scalarValues
          type: Grasshopper.DataTree{System.Double}
          description: ''
        - id: vectorValues
          type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Field.PopulateField*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
      commentId: M:AssemblerLib.Field.PopulateField(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
      language: CSharp
      name:
        CSharp: PopulateField(List<Double>, List<Vector3d>, DataTree<Int32>)
        VB: PopulateField(List(Of Double), List(Of Vector3d), DataTree(Of Int32))
      nameWithType:
        CSharp: Field.PopulateField(List<Double>, List<Vector3d>, DataTree<Int32>)
        VB: Field.PopulateField(List(Of Double), List(Of Vector3d), DataTree(Of Int32))
      qualifiedName:
        CSharp: AssemblerLib.Field.PopulateField(System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>, Grasshopper.DataTree<System.Int32>)
        VB: AssemblerLib.Field.PopulateField(System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d), Grasshopper.DataTree(Of System.Int32))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: PopulateField
        path: Field.cs
        startLine: 367
      summary: "\nPopulates Field - lists of scalars, vectors, and data tree of iWeights for each Field point\n"
      example: []
      syntax:
        content:
          CSharp: public bool PopulateField(List<double> scalarValues, List<Vector3d> vectorValues, DataTree<int> iWeights)
          VB: Public Function PopulateField(scalarValues As List(Of Double), vectorValues As List(Of Vector3d), iWeights As DataTree(Of Integer)) As Boolean
        parameters:
        - id: scalarValues
          type: System.Collections.Generic.List{System.Double}
          description: ''
        - id: vectorValues
          type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
          description: ''
        - id: iWeights
          type: Grasshopper.DataTree{System.Int32}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Field.PopulateField*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
      commentId: M:AssemblerLib.Field.PopulateField(Grasshopper.DataTree{System.Double},Grasshopper.DataTree{Rhino.Geometry.Vector3d},Grasshopper.DataTree{System.Int32})
      language: CSharp
      name:
        CSharp: PopulateField(DataTree<Double>, DataTree<Vector3d>, DataTree<Int32>)
        VB: PopulateField(DataTree(Of Double), DataTree(Of Vector3d), DataTree(Of Int32))
      nameWithType:
        CSharp: Field.PopulateField(DataTree<Double>, DataTree<Vector3d>, DataTree<Int32>)
        VB: Field.PopulateField(DataTree(Of Double), DataTree(Of Vector3d), DataTree(Of Int32))
      qualifiedName:
        CSharp: AssemblerLib.Field.PopulateField(Grasshopper.DataTree<System.Double>, Grasshopper.DataTree<Rhino.Geometry.Vector3d>, Grasshopper.DataTree<System.Int32>)
        VB: AssemblerLib.Field.PopulateField(Grasshopper.DataTree(Of System.Double), Grasshopper.DataTree(Of Rhino.Geometry.Vector3d), Grasshopper.DataTree(Of System.Int32))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: PopulateField
        path: Field.cs
        startLine: 388
      summary: "\nPopulates Field - data trees of scalars, vectors and iWeights for each Field point\n"
      example: []
      syntax:
        content:
          CSharp: public bool PopulateField(DataTree<double> scalarValues, DataTree<Vector3d> vectorValues, DataTree<int> iWeights)
          VB: Public Function PopulateField(scalarValues As DataTree(Of Double), vectorValues As DataTree(Of Vector3d), iWeights As DataTree(Of Integer)) As Boolean
        parameters:
        - id: scalarValues
          type: Grasshopper.DataTree{System.Double}
          description: ''
        - id: vectorValues
          type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
          description: ''
        - id: iWeights
          type: Grasshopper.DataTree{System.Int32}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Field.PopulateField*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GenerateColorsByAttractors(System.Collections.Generic.List{System.Drawing.Color},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
      commentId: M:AssemblerLib.Field.GenerateColorsByAttractors(System.Collections.Generic.List{System.Drawing.Color},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
      language: CSharp
      name:
        CSharp: GenerateColorsByAttractors(List<Color>, List<Point3d>, Boolean)
        VB: GenerateColorsByAttractors(List(Of Color), List(Of Point3d), Boolean)
      nameWithType:
        CSharp: Field.GenerateColorsByAttractors(List<Color>, List<Point3d>, Boolean)
        VB: Field.GenerateColorsByAttractors(List(Of Color), List(Of Point3d), Boolean)
      qualifiedName:
        CSharp: AssemblerLib.Field.GenerateColorsByAttractors(System.Collections.Generic.List<System.Drawing.Color>, System.Collections.Generic.List<Rhino.Geometry.Point3d>, System.Boolean)
        VB: AssemblerLib.Field.GenerateColorsByAttractors(System.Collections.Generic.List(Of System.Drawing.Color), System.Collections.Generic.List(Of Rhino.Geometry.Point3d), System.Boolean)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GenerateColorsByAttractors
        path: Field.cs
        startLine: 406
      summary: "\nGenerates a color for each Field point based on a list of attractor points and respective colors \n"
      example: []
      syntax:
        content:
          CSharp: public bool GenerateColorsByAttractors(List<Color> attColors, List<Point3d> attractors, bool blend)
          VB: Public Function GenerateColorsByAttractors(attColors As List(Of Color), attractors As List(Of Point3d), blend As Boolean) As Boolean
        parameters:
        - id: attColors
          type: System.Collections.Generic.List{System.Drawing.Color}
          description: ''
        - id: attractors
          type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
          description: ''
        - id: blend
          type: System.Boolean
          description: ''
        return:
          type: System.Boolean
      overload: AssemblerLib.Field.GenerateColorsByAttractors*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GenerateScalarColors(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Double,System.Boolean)
      commentId: M:AssemblerLib.Field.GenerateScalarColors(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Double,System.Boolean)
      language: CSharp
      name:
        CSharp: GenerateScalarColors(Color, Color, Int32, Double, Boolean)
        VB: GenerateScalarColors(Color, Color, Int32, Double, Boolean)
      nameWithType:
        CSharp: Field.GenerateScalarColors(Color, Color, Int32, Double, Boolean)
        VB: Field.GenerateScalarColors(Color, Color, Int32, Double, Boolean)
      qualifiedName:
        CSharp: AssemblerLib.Field.GenerateScalarColors(System.Drawing.Color, System.Drawing.Color, System.Int32, System.Double, System.Boolean)
        VB: AssemblerLib.Field.GenerateScalarColors(System.Drawing.Color, System.Drawing.Color, System.Int32, System.Double, System.Boolean)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GenerateScalarColors
        path: Field.cs
        startLine: 442
      summary: "\nGenerates colors according to scalar values at given index in the field\\nthreshold is used when blend is false\n"
      example: []
      syntax:
        content:
          CSharp: public bool GenerateScalarColors(Color lowVal, Color hiVal, int index, double threshold, bool blend)
          VB: Public Function GenerateScalarColors(lowVal As Color, hiVal As Color, index As Integer, threshold As Double, blend As Boolean) As Boolean
        parameters:
        - id: lowVal
          type: System.Drawing.Color
          description: ''
        - id: hiVal
          type: System.Drawing.Color
          description: ''
        - id: index
          type: System.Int32
          description: ''
        - id: threshold
          type: System.Double
          description: ''
        - id: blend
          type: System.Boolean
          description: ''
        return:
          type: System.Boolean
      overload: AssemblerLib.Field.GenerateScalarColors*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.DistributeiWeightsScalar(Grasshopper.DataTree{System.Int32},System.Double,System.Int32,System.Boolean)
      commentId: M:AssemblerLib.Field.DistributeiWeightsScalar(Grasshopper.DataTree{System.Int32},System.Double,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: DistributeiWeightsScalar(DataTree<Int32>, Double, Int32, Boolean)
        VB: DistributeiWeightsScalar(DataTree(Of Int32), Double, Int32, Boolean)
      nameWithType:
        CSharp: Field.DistributeiWeightsScalar(DataTree<Int32>, Double, Int32, Boolean)
        VB: Field.DistributeiWeightsScalar(DataTree(Of Int32), Double, Int32, Boolean)
      qualifiedName:
        CSharp: AssemblerLib.Field.DistributeiWeightsScalar(Grasshopper.DataTree<System.Int32>, System.Double, System.Int32, System.Boolean)
        VB: AssemblerLib.Field.DistributeiWeightsScalar(Grasshopper.DataTree(Of System.Int32), System.Double, System.Int32, System.Boolean)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: DistributeiWeightsScalar
        path: Field.cs
        startLine: 480
      summary: "\nDistribute iWeights according to scalar values in the field at index ind\n"
      example: []
      syntax:
        content:
          CSharp: public bool DistributeiWeightsScalar(DataTree<int> weights, double threshold, int index, bool blend)
          VB: Public Function DistributeiWeightsScalar(weights As DataTree(Of Integer), threshold As Double, index As Integer, blend As Boolean) As Boolean
        parameters:
        - id: weights
          type: Grasshopper.DataTree{System.Int32}
          description: ''
        - id: threshold
          type: System.Double
          description: ''
        - id: index
          type: System.Int32
          description: ''
        - id: blend
          type: System.Boolean
          description: ''
        return:
          type: System.Boolean
      overload: AssemblerLib.Field.DistributeiWeightsScalar*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.DistributeiWeights(Grasshopper.DataTree{System.Int32},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
      commentId: M:AssemblerLib.Field.DistributeiWeights(Grasshopper.DataTree{System.Int32},System.Collections.Generic.List{Rhino.Geometry.Point3d},System.Boolean)
      language: CSharp
      name:
        CSharp: DistributeiWeights(DataTree<Int32>, List<Point3d>, Boolean)
        VB: DistributeiWeights(DataTree(Of Int32), List(Of Point3d), Boolean)
      nameWithType:
        CSharp: Field.DistributeiWeights(DataTree<Int32>, List<Point3d>, Boolean)
        VB: Field.DistributeiWeights(DataTree(Of Int32), List(Of Point3d), Boolean)
      qualifiedName:
        CSharp: AssemblerLib.Field.DistributeiWeights(Grasshopper.DataTree<System.Int32>, System.Collections.Generic.List<Rhino.Geometry.Point3d>, System.Boolean)
        VB: AssemblerLib.Field.DistributeiWeights(Grasshopper.DataTree(Of System.Int32), System.Collections.Generic.List(Of Rhino.Geometry.Point3d), System.Boolean)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: DistributeiWeights
        path: Field.cs
        startLine: 500
      summary: "\nDistribute attractor-based iWeights, with an option for blending\n"
      example: []
      syntax:
        content:
          CSharp: public bool DistributeiWeights(DataTree<int> weights, List<Point3d> attractors, bool blend)
          VB: Public Function DistributeiWeights(weights As DataTree(Of Integer), attractors As List(Of Point3d), blend As Boolean) As Boolean
        parameters:
        - id: weights
          type: Grasshopper.DataTree{System.Int32}
          description: Data Tree of input weights\nOne branch for each attractor point
        - id: attractors
          type: System.Collections.Generic.List{Rhino.Geometry.Point3d}
          description: List of attractor points
        - id: blend
          type: System.Boolean
          description: True for smooth blending, false for closest-point criteria
        return:
          type: System.Boolean
      overload: AssemblerLib.Field.DistributeiWeights*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.PopulateiWeights(System.Collections.Generic.List{System.Int32})
      commentId: M:AssemblerLib.Field.PopulateiWeights(System.Collections.Generic.List{System.Int32})
      language: CSharp
      name:
        CSharp: PopulateiWeights(List<Int32>)
        VB: PopulateiWeights(List(Of Int32))
      nameWithType:
        CSharp: Field.PopulateiWeights(List<Int32>)
        VB: Field.PopulateiWeights(List(Of Int32))
      qualifiedName:
        CSharp: AssemblerLib.Field.PopulateiWeights(System.Collections.Generic.List<System.Int32>)
        VB: AssemblerLib.Field.PopulateiWeights(System.Collections.Generic.List(Of System.Int32))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: PopulateiWeights
        path: Field.cs
        startLine: 523
      summary: "\nPopulate field with weights distribution - 1 value per Field point\n"
      example: []
      syntax:
        content:
          CSharp: public bool PopulateiWeights(List<int> iWeights)
          VB: Public Function PopulateiWeights(iWeights As List(Of Integer)) As Boolean
        parameters:
        - id: iWeights
          type: System.Collections.Generic.List{System.Int32}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Field.PopulateiWeights*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.PopulateiWeights(Grasshopper.DataTree{System.Int32})
      commentId: M:AssemblerLib.Field.PopulateiWeights(Grasshopper.DataTree{System.Int32})
      language: CSharp
      name:
        CSharp: PopulateiWeights(DataTree<Int32>)
        VB: PopulateiWeights(DataTree(Of Int32))
      nameWithType:
        CSharp: Field.PopulateiWeights(DataTree<Int32>)
        VB: Field.PopulateiWeights(DataTree(Of Int32))
      qualifiedName:
        CSharp: AssemblerLib.Field.PopulateiWeights(Grasshopper.DataTree<System.Int32>)
        VB: AssemblerLib.Field.PopulateiWeights(Grasshopper.DataTree(Of System.Int32))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: PopulateiWeights
        path: Field.cs
        startLine: 542
      summary: "\nPopulate field with weights distribution\n"
      example: []
      syntax:
        content:
          CSharp: public bool PopulateiWeights(DataTree<int> iWeights)
          VB: Public Function PopulateiWeights(iWeights As DataTree(Of Integer)) As Boolean
        parameters:
        - id: iWeights
          type: Grasshopper.DataTree{System.Int32}
          description: ''
        return:
          type: System.Boolean
          description: true if operation was successful
      overload: AssemblerLib.Field.PopulateiWeights*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetClosestIndex(Rhino.Geometry.Point3d)
      commentId: M:AssemblerLib.Field.GetClosestIndex(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: GetClosestIndex(Point3d)
        VB: GetClosestIndex(Point3d)
      nameWithType:
        CSharp: Field.GetClosestIndex(Point3d)
        VB: Field.GetClosestIndex(Point3d)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetClosestIndex(Rhino.Geometry.Point3d)
        VB: AssemblerLib.Field.GetClosestIndex(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetClosestIndex
        path: Field.cs
        startLine: 703
      summary: "\nGets index of closest Field point to the given Point P\n"
      example: []
      syntax:
        content:
          CSharp: public int GetClosestIndex(Point3d P)
          VB: Public Function GetClosestIndex(P As Point3d) As Integer
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: System.Int32
          description: ''
      overload: AssemblerLib.Field.GetClosestIndex*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetNeighbourIndexes(Rhino.Geometry.Point3d)
      commentId: M:AssemblerLib.Field.GetNeighbourIndexes(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: GetNeighbourIndexes(Point3d)
        VB: GetNeighbourIndexes(Point3d)
      nameWithType:
        CSharp: Field.GetNeighbourIndexes(Point3d)
        VB: Field.GetNeighbourIndexes(Point3d)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetNeighbourIndexes(Rhino.Geometry.Point3d)
        VB: AssemblerLib.Field.GetNeighbourIndexes(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetNeighbourIndexes
        path: Field.cs
        startLine: 713
      summary: "\nGets indexes of closest Field points to the given Point P\n"
      example: []
      syntax:
        content:
          CSharp: public List<int> GetNeighbourIndexes(Point3d P)
          VB: Public Function GetNeighbourIndexes(P As Point3d) As List(Of Integer)
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: System.Collections.Generic.List{System.Int32}
          description: ''
      overload: AssemblerLib.Field.GetNeighbourIndexes*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetClosestScalar(Rhino.Geometry.Point3d)
      commentId: M:AssemblerLib.Field.GetClosestScalar(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: GetClosestScalar(Point3d)
        VB: GetClosestScalar(Point3d)
      nameWithType:
        CSharp: Field.GetClosestScalar(Point3d)
        VB: Field.GetClosestScalar(Point3d)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetClosestScalar(Rhino.Geometry.Point3d)
        VB: AssemblerLib.Field.GetClosestScalar(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetClosestScalar
        path: Field.cs
        startLine: 732
      summary: "\nGets the first scalar value for the closest Field point to the given Point P\n"
      example: []
      syntax:
        content:
          CSharp: public double GetClosestScalar(Point3d P)
          VB: Public Function GetClosestScalar(P As Point3d) As Double
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: System.Double
          description: ''
      overload: AssemblerLib.Field.GetClosestScalar*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetClosestScalars(Rhino.Geometry.Point3d)
      commentId: M:AssemblerLib.Field.GetClosestScalars(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: GetClosestScalars(Point3d)
        VB: GetClosestScalars(Point3d)
      nameWithType:
        CSharp: Field.GetClosestScalars(Point3d)
        VB: Field.GetClosestScalars(Point3d)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetClosestScalars(Rhino.Geometry.Point3d)
        VB: AssemblerLib.Field.GetClosestScalars(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetClosestScalars
        path: Field.cs
        startLine: 742
      summary: "\nGets array of scalar values for the closest Field point to the given Point P\n"
      example: []
      syntax:
        content:
          CSharp: public double[] GetClosestScalars(Point3d P)
          VB: Public Function GetClosestScalars(P As Point3d) As Double()
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: System.Double[]
          description: ''
      overload: AssemblerLib.Field.GetClosestScalars*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetInterpolatedScalar(Rhino.Geometry.Point3d)
      commentId: M:AssemblerLib.Field.GetInterpolatedScalar(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: GetInterpolatedScalar(Point3d)
        VB: GetInterpolatedScalar(Point3d)
      nameWithType:
        CSharp: Field.GetInterpolatedScalar(Point3d)
        VB: Field.GetInterpolatedScalar(Point3d)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetInterpolatedScalar(Rhino.Geometry.Point3d)
        VB: AssemblerLib.Field.GetInterpolatedScalar(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetInterpolatedScalar
        path: Field.cs
        startLine: 752
      summary: "\nGet interpolation of first scalar value for a sample point P\n"
      example: []
      syntax:
        content:
          CSharp: public double GetInterpolatedScalar(Point3d P)
          VB: Public Function GetInterpolatedScalar(P As Point3d) As Double
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: System.Double
          description: ''
      overload: AssemblerLib.Field.GetInterpolatedScalar*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetNeighbourScalars(Rhino.Geometry.Point3d)
      commentId: M:AssemblerLib.Field.GetNeighbourScalars(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: GetNeighbourScalars(Point3d)
        VB: GetNeighbourScalars(Point3d)
      nameWithType:
        CSharp: Field.GetNeighbourScalars(Point3d)
        VB: Field.GetNeighbourScalars(Point3d)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetNeighbourScalars(Rhino.Geometry.Point3d)
        VB: AssemblerLib.Field.GetNeighbourScalars(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetNeighbourScalars
        path: Field.cs
        startLine: 772
      summary: "\nGet first scalar values near a sample point P\n"
      example: []
      syntax:
        content:
          CSharp: public List<double> GetNeighbourScalars(Point3d P)
          VB: Public Function GetNeighbourScalars(P As Point3d) As List(Of Double)
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: System.Collections.Generic.List{System.Double}
          description: ''
      overload: AssemblerLib.Field.GetNeighbourScalars*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetClosestVector(Rhino.Geometry.Point3d)
      commentId: M:AssemblerLib.Field.GetClosestVector(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: GetClosestVector(Point3d)
        VB: GetClosestVector(Point3d)
      nameWithType:
        CSharp: Field.GetClosestVector(Point3d)
        VB: Field.GetClosestVector(Point3d)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetClosestVector(Rhino.Geometry.Point3d)
        VB: AssemblerLib.Field.GetClosestVector(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetClosestVector
        path: Field.cs
        startLine: 790
      summary: "\nGets the first vector value for the closest Field point to the given Point P\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3d GetClosestVector(Point3d P)
          VB: Public Function GetClosestVector(P As Point3d) As Vector3d
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: Rhino.Geometry.Vector3d
          description: ''
      overload: AssemblerLib.Field.GetClosestVector*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetInterpolatedVector(Rhino.Geometry.Point3d)
      commentId: M:AssemblerLib.Field.GetInterpolatedVector(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: GetInterpolatedVector(Point3d)
        VB: GetInterpolatedVector(Point3d)
      nameWithType:
        CSharp: Field.GetInterpolatedVector(Point3d)
        VB: Field.GetInterpolatedVector(Point3d)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetInterpolatedVector(Rhino.Geometry.Point3d)
        VB: AssemblerLib.Field.GetInterpolatedVector(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetInterpolatedVector
        path: Field.cs
        startLine: 800
      summary: "\nGet interpolation of first vector value for a sample point P\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3d GetInterpolatedVector(Point3d P)
          VB: Public Function GetInterpolatedVector(P As Point3d) As Vector3d
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: Rhino.Geometry.Vector3d
          description: ''
      overload: AssemblerLib.Field.GetInterpolatedVector*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetNeighbourVectors(Rhino.Geometry.Point3d)
      commentId: M:AssemblerLib.Field.GetNeighbourVectors(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: GetNeighbourVectors(Point3d)
        VB: GetNeighbourVectors(Point3d)
      nameWithType:
        CSharp: Field.GetNeighbourVectors(Point3d)
        VB: Field.GetNeighbourVectors(Point3d)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetNeighbourVectors(Rhino.Geometry.Point3d)
        VB: AssemblerLib.Field.GetNeighbourVectors(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetNeighbourVectors
        path: Field.cs
        startLine: 816
      syntax:
        content:
          CSharp: public List<Vector3d> GetNeighbourVectors(Point3d P)
          VB: Public Function GetNeighbourVectors(P As Point3d) As List(Of Vector3d)
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
        return:
          type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
      overload: AssemblerLib.Field.GetNeighbourVectors*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetClosestVectors(Rhino.Geometry.Point3d)
      commentId: M:AssemblerLib.Field.GetClosestVectors(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: GetClosestVectors(Point3d)
        VB: GetClosestVectors(Point3d)
      nameWithType:
        CSharp: Field.GetClosestVectors(Point3d)
        VB: Field.GetClosestVectors(Point3d)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetClosestVectors(Rhino.Geometry.Point3d)
        VB: AssemblerLib.Field.GetClosestVectors(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetClosestVectors
        path: Field.cs
        startLine: 836
      summary: "\nGets array of vector values for the closest Field point to the given Point P\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3d[] GetClosestVectors(Point3d P)
          VB: Public Function GetClosestVectors(P As Point3d) As Vector3d()
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: Rhino.Geometry.Vector3d[]
          description: ''
      overload: AssemblerLib.Field.GetClosestVectors*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetClosestiWeights(Rhino.Geometry.Point3d)
      commentId: M:AssemblerLib.Field.GetClosestiWeights(Rhino.Geometry.Point3d)
      language: CSharp
      name:
        CSharp: GetClosestiWeights(Point3d)
        VB: GetClosestiWeights(Point3d)
      nameWithType:
        CSharp: Field.GetClosestiWeights(Point3d)
        VB: Field.GetClosestiWeights(Point3d)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetClosestiWeights(Rhino.Geometry.Point3d)
        VB: AssemblerLib.Field.GetClosestiWeights(Rhino.Geometry.Point3d)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetClosestiWeights
        path: Field.cs
        startLine: 846
      summary: "\nGets array of integer weights for the closest Field point to the given Point P\n"
      example: []
      syntax:
        content:
          CSharp: public int[] GetClosestiWeights(Point3d P)
          VB: Public Function GetClosestiWeights(P As Point3d) As Integer()
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
          description: ''
        return:
          type: System.Int32[]
          description: ''
      overload: AssemblerLib.Field.GetClosestiWeights*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetScalar(System.Int32)
      commentId: M:AssemblerLib.Field.GetScalar(System.Int32)
      language: CSharp
      name:
        CSharp: GetScalar(Int32)
        VB: GetScalar(Int32)
      nameWithType:
        CSharp: Field.GetScalar(Int32)
        VB: Field.GetScalar(Int32)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetScalar(System.Int32)
        VB: AssemblerLib.Field.GetScalar(System.Int32)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetScalar
        path: Field.cs
        startLine: 856
      summary: "\nGets the first scalar value for the Field point at index i\n"
      example: []
      syntax:
        content:
          CSharp: public double GetScalar(int i)
          VB: Public Function GetScalar(i As Integer) As Double
        parameters:
        - id: i
          type: System.Int32
          description: ''
        return:
          type: System.Double
          description: ''
      overload: AssemblerLib.Field.GetScalar*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetScalars(System.Int32)
      commentId: M:AssemblerLib.Field.GetScalars(System.Int32)
      language: CSharp
      name:
        CSharp: GetScalars(Int32)
        VB: GetScalars(Int32)
      nameWithType:
        CSharp: Field.GetScalars(Int32)
        VB: Field.GetScalars(Int32)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetScalars(System.Int32)
        VB: AssemblerLib.Field.GetScalars(System.Int32)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetScalars
        path: Field.cs
        startLine: 868
      summary: "\nGets the array of scalar values for the Field point at index i\n"
      example: []
      syntax:
        content:
          CSharp: public double[] GetScalars(int i)
          VB: Public Function GetScalars(i As Integer) As Double()
        parameters:
        - id: i
          type: System.Int32
          description: ''
        return:
          type: System.Double[]
          description: ''
      overload: AssemblerLib.Field.GetScalars*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetVector(System.Int32)
      commentId: M:AssemblerLib.Field.GetVector(System.Int32)
      language: CSharp
      name:
        CSharp: GetVector(Int32)
        VB: GetVector(Int32)
      nameWithType:
        CSharp: Field.GetVector(Int32)
        VB: Field.GetVector(Int32)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetVector(System.Int32)
        VB: AssemblerLib.Field.GetVector(System.Int32)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetVector
        path: Field.cs
        startLine: 880
      summary: "\nGets the first vector value for the Field point at index i\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3d GetVector(int i)
          VB: Public Function GetVector(i As Integer) As Vector3d
        parameters:
        - id: i
          type: System.Int32
          description: ''
        return:
          type: Rhino.Geometry.Vector3d
          description: ''
      overload: AssemblerLib.Field.GetVector*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetVectors(System.Int32)
      commentId: M:AssemblerLib.Field.GetVectors(System.Int32)
      language: CSharp
      name:
        CSharp: GetVectors(Int32)
        VB: GetVectors(Int32)
      nameWithType:
        CSharp: Field.GetVectors(Int32)
        VB: Field.GetVectors(Int32)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetVectors(System.Int32)
        VB: AssemblerLib.Field.GetVectors(System.Int32)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetVectors
        path: Field.cs
        startLine: 892
      summary: "\nGets the array of vector values for the Field point at index i\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3d[] GetVectors(int i)
          VB: Public Function GetVectors(i As Integer) As Vector3d()
        parameters:
        - id: i
          type: System.Int32
          description: ''
        return:
          type: Rhino.Geometry.Vector3d[]
          description: ''
      overload: AssemblerLib.Field.GetVectors*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetiWeights(System.Int32)
      commentId: M:AssemblerLib.Field.GetiWeights(System.Int32)
      language: CSharp
      name:
        CSharp: GetiWeights(Int32)
        VB: GetiWeights(Int32)
      nameWithType:
        CSharp: Field.GetiWeights(Int32)
        VB: Field.GetiWeights(Int32)
      qualifiedName:
        CSharp: AssemblerLib.Field.GetiWeights(System.Int32)
        VB: AssemblerLib.Field.GetiWeights(System.Int32)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetiWeights
        path: Field.cs
        startLine: 904
      summary: "\nGets the array of integer weights for the Field point at index i\n"
      example: []
      syntax:
        content:
          CSharp: public int[] GetiWeights(int i)
          VB: Public Function GetiWeights(i As Integer) As Integer()
        parameters:
        - id: i
          type: System.Int32
          description: ''
        return:
          type: System.Int32[]
          description: ''
      overload: AssemblerLib.Field.GetiWeights*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetPoints
      commentId: M:AssemblerLib.Field.GetPoints
      language: CSharp
      name:
        CSharp: GetPoints()
        VB: GetPoints()
      nameWithType:
        CSharp: Field.GetPoints()
        VB: Field.GetPoints()
      qualifiedName:
        CSharp: AssemblerLib.Field.GetPoints()
        VB: AssemblerLib.Field.GetPoints()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetPoints
        path: Field.cs
        startLine: 915
      summary: "\nGets all Field Points\n"
      example: []
      syntax:
        content:
          CSharp: public Point3d[] GetPoints()
          VB: Public Function GetPoints As Point3d()
        return:
          type: Rhino.Geometry.Point3d[]
          description: ''
      overload: AssemblerLib.Field.GetPoints*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetGH_Points
      commentId: M:AssemblerLib.Field.GetGH_Points
      language: CSharp
      name:
        CSharp: GetGH_Points()
        VB: GetGH_Points()
      nameWithType:
        CSharp: Field.GetGH_Points()
        VB: Field.GetGH_Points()
      qualifiedName:
        CSharp: AssemblerLib.Field.GetGH_Points()
        VB: AssemblerLib.Field.GetGH_Points()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetGH_Points
        path: Field.cs
        startLine: 924
      summary: "\nGets all Field Points in GH_Point format (for fast output)\n"
      example: []
      syntax:
        content:
          CSharp: public GH_Point[] GetGH_Points()
          VB: Public Function GetGH_Points As GH_Point()
        return:
          type: Grasshopper.Kernel.Types.GH_Point[]
          description: ''
      overload: AssemblerLib.Field.GetGH_Points*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetScalars
      commentId: M:AssemblerLib.Field.GetScalars
      language: CSharp
      name:
        CSharp: GetScalars()
        VB: GetScalars()
      nameWithType:
        CSharp: Field.GetScalars()
        VB: Field.GetScalars()
      qualifiedName:
        CSharp: AssemblerLib.Field.GetScalars()
        VB: AssemblerLib.Field.GetScalars()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetScalars
        path: Field.cs
        startLine: 933
      summary: "\nGets all Field scalar values as DataTree\n"
      example: []
      syntax:
        content:
          CSharp: public DataTree<double> GetScalars()
          VB: Public Function GetScalars As DataTree(Of Double)
        return:
          type: Grasshopper.DataTree{System.Double}
          description: ''
      overload: AssemblerLib.Field.GetScalars*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetGH_Scalars
      commentId: M:AssemblerLib.Field.GetGH_Scalars
      language: CSharp
      name:
        CSharp: GetGH_Scalars()
        VB: GetGH_Scalars()
      nameWithType:
        CSharp: Field.GetGH_Scalars()
        VB: Field.GetGH_Scalars()
      qualifiedName:
        CSharp: AssemblerLib.Field.GetGH_Scalars()
        VB: AssemblerLib.Field.GetGH_Scalars()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetGH_Scalars
        path: Field.cs
        startLine: 948
      summary: "\nGets all Field scalar values as DataTree in GH_Number format (for fast output)\n"
      example: []
      syntax:
        content:
          CSharp: public DataTree<GH_Number> GetGH_Scalars()
          VB: Public Function GetGH_Scalars As DataTree(Of GH_Number)
        return:
          type: Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Number}
          description: ''
      overload: AssemblerLib.Field.GetGH_Scalars*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetVectors
      commentId: M:AssemblerLib.Field.GetVectors
      language: CSharp
      name:
        CSharp: GetVectors()
        VB: GetVectors()
      nameWithType:
        CSharp: Field.GetVectors()
        VB: Field.GetVectors()
      qualifiedName:
        CSharp: AssemblerLib.Field.GetVectors()
        VB: AssemblerLib.Field.GetVectors()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetVectors
        path: Field.cs
        startLine: 963
      summary: "\nGets all Field vector values as DataTree\n"
      example: []
      syntax:
        content:
          CSharp: public DataTree<Vector3d> GetVectors()
          VB: Public Function GetVectors As DataTree(Of Vector3d)
        return:
          type: Grasshopper.DataTree{Rhino.Geometry.Vector3d}
          description: ''
      overload: AssemblerLib.Field.GetVectors*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetGH_Vectors
      commentId: M:AssemblerLib.Field.GetGH_Vectors
      language: CSharp
      name:
        CSharp: GetGH_Vectors()
        VB: GetGH_Vectors()
      nameWithType:
        CSharp: Field.GetGH_Vectors()
        VB: Field.GetGH_Vectors()
      qualifiedName:
        CSharp: AssemblerLib.Field.GetGH_Vectors()
        VB: AssemblerLib.Field.GetGH_Vectors()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetGH_Vectors
        path: Field.cs
        startLine: 978
      summary: "\nGets all Field vector values as DataTree in GH_Vector format (for fast output)\n"
      example: []
      syntax:
        content:
          CSharp: public DataTree<GH_Vector> GetGH_Vectors()
          VB: Public Function GetGH_Vectors As DataTree(Of GH_Vector)
        return:
          type: Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Vector}
          description: ''
      overload: AssemblerLib.Field.GetGH_Vectors*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetiWeights
      commentId: M:AssemblerLib.Field.GetiWeights
      language: CSharp
      name:
        CSharp: GetiWeights()
        VB: GetiWeights()
      nameWithType:
        CSharp: Field.GetiWeights()
        VB: Field.GetiWeights()
      qualifiedName:
        CSharp: AssemblerLib.Field.GetiWeights()
        VB: AssemblerLib.Field.GetiWeights()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetiWeights
        path: Field.cs
        startLine: 993
      summary: "\nGets all Field integer Weights as DataTree\n"
      example: []
      syntax:
        content:
          CSharp: public DataTree<int> GetiWeights()
          VB: Public Function GetiWeights As DataTree(Of Integer)
        return:
          type: Grasshopper.DataTree{System.Int32}
          description: ''
      overload: AssemblerLib.Field.GetiWeights*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Field.GetGH_iWeights
      commentId: M:AssemblerLib.Field.GetGH_iWeights
      language: CSharp
      name:
        CSharp: GetGH_iWeights()
        VB: GetGH_iWeights()
      nameWithType:
        CSharp: Field.GetGH_iWeights()
        VB: Field.GetGH_iWeights()
      qualifiedName:
        CSharp: AssemblerLib.Field.GetGH_iWeights()
        VB: AssemblerLib.Field.GetGH_iWeights()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Field.cs
        id: GetGH_iWeights
        path: Field.cs
        startLine: 1008
      summary: "\nGets all Field integer Weights as DataTree in GH_Integer format (for fast output)\n"
      example: []
      syntax:
        content:
          CSharp: public DataTree<GH_Integer> GetGH_iWeights()
          VB: Public Function GetGH_iWeights As DataTree(Of GH_Integer)
        return:
          type: Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Integer}
          description: ''
      overload: AssemblerLib.Field.GetGH_iWeights*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: AssemblerLib.Handle
    commentId: T:AssemblerLib.Handle
    language: CSharp
    name:
      CSharp: Handle
      VB: Handle
    nameWithType:
      CSharp: Handle
      VB: Handle
    qualifiedName:
      CSharp: AssemblerLib.Handle
      VB: AssemblerLib.Handle
    type: Struct
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
      id: Handle
      path: Handle.cs
      startLine: 9
    summary: "\nHandle structure for connection handles\n"
    example: []
    syntax:
      content:
        CSharp: public struct Handle
        VB: Public Structure Handle
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: AssemblerLib.Handle.sender
      commentId: F:AssemblerLib.Handle.sender
      language: CSharp
      name:
        CSharp: sender
        VB: sender
      nameWithType:
        CSharp: Handle.sender
        VB: Handle.sender
      qualifiedName:
        CSharp: AssemblerLib.Handle.sender
        VB: AssemblerLib.Handle.sender
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: sender
        path: Handle.cs
        startLine: 14
      summary: "\nSender plane\n"
      example: []
      syntax:
        content:
          CSharp: public Plane sender
          VB: Public sender As Plane
        return:
          type: Rhino.Geometry.Plane
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Handle.receivers
      commentId: F:AssemblerLib.Handle.receivers
      language: CSharp
      name:
        CSharp: receivers
        VB: receivers
      nameWithType:
        CSharp: Handle.receivers
        VB: Handle.receivers
      qualifiedName:
        CSharp: AssemblerLib.Handle.receivers
        VB: AssemblerLib.Handle.receivers
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: receivers
        path: Handle.cs
        startLine: 18
      summary: "\nReceiver planes\n"
      example: []
      syntax:
        content:
          CSharp: public Plane[] receivers
          VB: Public receivers As Plane()
        return:
          type: Rhino.Geometry.Plane[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Handle.type
      commentId: F:AssemblerLib.Handle.type
      language: CSharp
      name:
        CSharp: type
        VB: type
      nameWithType:
        CSharp: Handle.type
        VB: Handle.type
      qualifiedName:
        CSharp: AssemblerLib.Handle.type
        VB: AssemblerLib.Handle.type
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: type
        path: Handle.cs
        startLine: 22
      summary: "\nHandle type identifier\n"
      example: []
      syntax:
        content:
          CSharp: public int type
          VB: Public type As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Handle.rRotations
      commentId: F:AssemblerLib.Handle.rRotations
      language: CSharp
      name:
        CSharp: rRotations
        VB: rRotations
      nameWithType:
        CSharp: Handle.rRotations
        VB: Handle.rRotations
      qualifiedName:
        CSharp: AssemblerLib.Handle.rRotations
        VB: AssemblerLib.Handle.rRotations
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: rRotations
        path: Handle.cs
        startLine: 26
      summary: "\nReceiver rotations\n"
      example: []
      syntax:
        content:
          CSharp: public double[] rRotations
          VB: Public rRotations As Double()
        return:
          type: System.Double[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Handle.rDictionary
      commentId: F:AssemblerLib.Handle.rDictionary
      language: CSharp
      name:
        CSharp: rDictionary
        VB: rDictionary
      nameWithType:
        CSharp: Handle.rDictionary
        VB: Handle.rDictionary
      qualifiedName:
        CSharp: AssemblerLib.Handle.rDictionary
        VB: AssemblerLib.Handle.rDictionary
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: rDictionary
        path: Handle.cs
        startLine: 30
      summary: "\nRotations dictionary (degrees, index)\n"
      example: []
      syntax:
        content:
          CSharp: public Dictionary<double, int> rDictionary
          VB: Public rDictionary As Dictionary(Of Double, Integer)
        return:
          type: System.Collections.Generic.Dictionary{System.Double,System.Int32}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Handle.weight
      commentId: F:AssemblerLib.Handle.weight
      language: CSharp
      name:
        CSharp: weight
        VB: weight
      nameWithType:
        CSharp: Handle.weight
        VB: Handle.weight
      qualifiedName:
        CSharp: AssemblerLib.Handle.weight
        VB: AssemblerLib.Handle.weight
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: weight
        path: Handle.cs
        startLine: 34
      summary: "\nWeight\n"
      example: []
      syntax:
        content:
          CSharp: public double weight
          VB: Public weight As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Handle.occupancy
      commentId: F:AssemblerLib.Handle.occupancy
      language: CSharp
      name:
        CSharp: occupancy
        VB: occupancy
      nameWithType:
        CSharp: Handle.occupancy
        VB: Handle.occupancy
      qualifiedName:
        CSharp: AssemblerLib.Handle.occupancy
        VB: AssemblerLib.Handle.occupancy
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: occupancy
        path: Handle.cs
        startLine: 43
      summary: "\nOccupancy status\n<ul><li></li><li></li><li></li></ul>\n"
      example: []
      syntax:
        content:
          CSharp: public int occupancy
          VB: Public occupancy As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Handle.neighbourObject
      commentId: F:AssemblerLib.Handle.neighbourObject
      language: CSharp
      name:
        CSharp: neighbourObject
        VB: neighbourObject
      nameWithType:
        CSharp: Handle.neighbourObject
        VB: Handle.neighbourObject
      qualifiedName:
        CSharp: AssemblerLib.Handle.neighbourObject
        VB: AssemblerLib.Handle.neighbourObject
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: neighbourObject
        path: Handle.cs
        startLine: 51
      summary: "\nNeighbour object index\n<ul><li></li><li></li></ul>\n"
      example: []
      syntax:
        content:
          CSharp: public int neighbourObject
          VB: Public neighbourObject As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Handle.neighbourHandle
      commentId: F:AssemblerLib.Handle.neighbourHandle
      language: CSharp
      name:
        CSharp: neighbourHandle
        VB: neighbourHandle
      nameWithType:
        CSharp: Handle.neighbourHandle
        VB: Handle.neighbourHandle
      qualifiedName:
        CSharp: AssemblerLib.Handle.neighbourHandle
        VB: AssemblerLib.Handle.neighbourHandle
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: neighbourHandle
        path: Handle.cs
        startLine: 59
      summary: "\nNeighbour handle index\n<ul><li></li><li></li></ul>\n"
      example: []
      syntax:
        content:
          CSharp: public int neighbourHandle
          VB: Public neighbourHandle As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Handle.#ctor(Rhino.Geometry.Polyline,System.Int32,System.Double,System.Collections.Generic.List{System.Double})
      commentId: M:AssemblerLib.Handle.#ctor(Rhino.Geometry.Polyline,System.Int32,System.Double,System.Collections.Generic.List{System.Double})
      language: CSharp
      name:
        CSharp: Handle(Polyline, Int32, Double, List<Double>)
        VB: Handle(Polyline, Int32, Double, List(Of Double))
      nameWithType:
        CSharp: Handle.Handle(Polyline, Int32, Double, List<Double>)
        VB: Handle.Handle(Polyline, Int32, Double, List(Of Double))
      qualifiedName:
        CSharp: AssemblerLib.Handle.Handle(Rhino.Geometry.Polyline, System.Int32, System.Double, System.Collections.Generic.List<System.Double>)
        VB: AssemblerLib.Handle.Handle(Rhino.Geometry.Polyline, System.Int32, System.Double, System.Collections.Generic.List(Of System.Double))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: .ctor
        path: Handle.cs
        startLine: 68
      summary: "\nBuilds a Handle from an L-shaped polyline, Handle type and List of rotations\n"
      example: []
      syntax:
        content:
          CSharp: public Handle(Polyline poly, int type, double weight, List<double> rotations)
          VB: Public Sub New(poly As Polyline, type As Integer, weight As Double, rotations As List(Of Double))
        parameters:
        - id: poly
          type: Rhino.Geometry.Polyline
          description: ''
        - id: type
          type: System.Int32
          description: ''
        - id: weight
          type: System.Double
          description: ''
        - id: rotations
          type: System.Collections.Generic.List{System.Double}
          description: ''
      overload: AssemblerLib.Handle.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Handle.#ctor(Rhino.Geometry.Plane,System.Int32,System.Double,System.Collections.Generic.List{System.Double})
      commentId: M:AssemblerLib.Handle.#ctor(Rhino.Geometry.Plane,System.Int32,System.Double,System.Collections.Generic.List{System.Double})
      language: CSharp
      name:
        CSharp: Handle(Plane, Int32, Double, List<Double>)
        VB: Handle(Plane, Int32, Double, List(Of Double))
      nameWithType:
        CSharp: Handle.Handle(Plane, Int32, Double, List<Double>)
        VB: Handle.Handle(Plane, Int32, Double, List(Of Double))
      qualifiedName:
        CSharp: AssemblerLib.Handle.Handle(Rhino.Geometry.Plane, System.Int32, System.Double, System.Collections.Generic.List<System.Double>)
        VB: AssemblerLib.Handle.Handle(Rhino.Geometry.Plane, System.Int32, System.Double, System.Collections.Generic.List(Of System.Double))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: .ctor
        path: Handle.cs
        startLine: 78
      summary: "\nBuilds a Handle from constituting parameters\n"
      example: []
      syntax:
        content:
          CSharp: public Handle(Plane plane, int type, double weight, List<double> rotations)
          VB: Public Sub New(plane As Plane, type As Integer, weight As Double, rotations As List(Of Double))
        parameters:
        - id: plane
          type: Rhino.Geometry.Plane
          description: The base (sender) <xref href="Rhino.Geometry.Plane" data-throw-if-not-resolved="false"></xref> for the Handle
        - id: type
          type: System.Int32
          description: The Handle type
        - id: weight
          type: System.Double
          description: The Handle weight
        - id: rotations
          type: System.Collections.Generic.List{System.Double}
          description: List of rotation angles in receiver mode
      overload: AssemblerLib.Handle.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Rhino.Geometry.Plane: 
    - id: AssemblerLib.Handle.Transform(Rhino.Geometry.Transform)
      commentId: M:AssemblerLib.Handle.Transform(Rhino.Geometry.Transform)
      language: CSharp
      name:
        CSharp: Transform(Transform)
        VB: Transform(Transform)
      nameWithType:
        CSharp: Handle.Transform(Transform)
        VB: Handle.Transform(Transform)
      qualifiedName:
        CSharp: AssemblerLib.Handle.Transform(Rhino.Geometry.Transform)
        VB: AssemblerLib.Handle.Transform(Rhino.Geometry.Transform)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Handle.cs
        id: Transform
        path: Handle.cs
        startLine: 107
      summary: "\nTransform handle using a generic Transformation\n"
      example: []
      syntax:
        content:
          CSharp: public void Transform(Transform Xform)
          VB: Public Sub Transform(Xform As Transform)
        parameters:
        - id: Xform
          type: Rhino.Geometry.Transform
          description: Transformation to apply
      overload: AssemblerLib.Handle.Transform*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: AssemblerLib.Assemblage
    commentId: T:AssemblerLib.Assemblage
    language: CSharp
    name:
      CSharp: Assemblage
      VB: Assemblage
    nameWithType:
      CSharp: Assemblage
      VB: Assemblage
    qualifiedName:
      CSharp: AssemblerLib.Assemblage
      VB: AssemblerLib.Assemblage
    type: Class
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
      id: Assemblage
      path: Assemblage.cs
      startLine: 15
    summary: "\nAssemblage class - A Class that manages Assemblages\n"
    example: []
    syntax:
      content:
        CSharp: public class Assemblage
        VB: Public Class Assemblage
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: AssemblerLib.Assemblage.assemblyObjects
      commentId: F:AssemblerLib.Assemblage.assemblyObjects
      language: CSharp
      name:
        CSharp: assemblyObjects
        VB: assemblyObjects
      nameWithType:
        CSharp: Assemblage.assemblyObjects
        VB: Assemblage.assemblyObjects
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.assemblyObjects
        VB: AssemblerLib.Assemblage.assemblyObjects
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: assemblyObjects
        path: Assemblage.cs
        startLine: 29
      summary: "\nThe list of <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref>s in the assemblage\n"
      example: []
      syntax:
        content:
          CSharp: public List<AssemblyObject> assemblyObjects
          VB: Public assemblyObjects As List(Of AssemblyObject)
        return:
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        AssemblerLib.AssemblyObject: 
    - id: AssemblerLib.Assemblage.AOset
      commentId: F:AssemblerLib.Assemblage.AOset
      language: CSharp
      name:
        CSharp: AOset
        VB: AOset
      nameWithType:
        CSharp: Assemblage.AOset
        VB: Assemblage.AOset
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.AOset
        VB: AssemblerLib.Assemblage.AOset
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: AOset
        path: Assemblage.cs
        startLine: 33
      summary: "\nThe set of unique object types\n"
      example: []
      syntax:
        content:
          CSharp: public AssemblyObject[] AOset
          VB: Public AOset As AssemblyObject()
        return:
          type: AssemblerLib.AssemblyObject[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.objectsDictionary
      commentId: F:AssemblerLib.Assemblage.objectsDictionary
      language: CSharp
      name:
        CSharp: objectsDictionary
        VB: objectsDictionary
      nameWithType:
        CSharp: Assemblage.objectsDictionary
        VB: Assemblage.objectsDictionary
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.objectsDictionary
        VB: AssemblerLib.Assemblage.objectsDictionary
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: objectsDictionary
        path: Assemblage.cs
        startLine: 37
      summary: "\nThe objects Dictionary built from the set\n"
      example: []
      syntax:
        content:
          CSharp: public Dictionary<string, int> objectsDictionary
          VB: Public objectsDictionary As Dictionary(Of String, Integer)
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Int32}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.environmentMeshes
      commentId: F:AssemblerLib.Assemblage.environmentMeshes
      language: CSharp
      name:
        CSharp: environmentMeshes
        VB: environmentMeshes
      nameWithType:
        CSharp: Assemblage.environmentMeshes
        VB: Assemblage.environmentMeshes
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.environmentMeshes
        VB: AssemblerLib.Assemblage.environmentMeshes
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: environmentMeshes
        path: Assemblage.cs
        startLine: 41
      summary: "\nThe environment meshes\n"
      example: []
      syntax:
        content:
          CSharp: public List<MeshEnvironment> environmentMeshes
          VB: Public environmentMeshes As List(Of MeshEnvironment)
        return:
          type: System.Collections.Generic.List{AssemblerLib.MeshEnvironment}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.E_sandbox
      commentId: F:AssemblerLib.Assemblage.E_sandbox
      language: CSharp
      name:
        CSharp: E_sandbox
        VB: E_sandbox
      nameWithType:
        CSharp: Assemblage.E_sandbox
        VB: Assemblage.E_sandbox
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.E_sandbox
        VB: AssemblerLib.Assemblage.E_sandbox
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: E_sandbox
        path: Assemblage.cs
        startLine: 45
      summary: "\nSandbox for focused assemblage growth \n"
      example: []
      syntax:
        content:
          CSharp: public Box E_sandbox
          VB: Public E_sandbox As Box
        return:
          type: Rhino.Geometry.Box
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.currentHeuristics
      commentId: F:AssemblerLib.Assemblage.currentHeuristics
      language: CSharp
      name:
        CSharp: currentHeuristics
        VB: currentHeuristics
      nameWithType:
        CSharp: Assemblage.currentHeuristics
        VB: Assemblage.currentHeuristics
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.currentHeuristics
        VB: AssemblerLib.Assemblage.currentHeuristics
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: currentHeuristics
        path: Assemblage.cs
        startLine: 49
      summary: "\nIndex of currently used heuristics\n"
      example: []
      syntax:
        content:
          CSharp: public int currentHeuristics
          VB: Public currentHeuristics As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.heuristicsTree
      commentId: F:AssemblerLib.Assemblage.heuristicsTree
      language: CSharp
      name:
        CSharp: heuristicsTree
        VB: heuristicsTree
      nameWithType:
        CSharp: Assemblage.heuristicsTree
        VB: Assemblage.heuristicsTree
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.heuristicsTree
        VB: AssemblerLib.Assemblage.heuristicsTree
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: heuristicsTree
        path: Assemblage.cs
        startLine: 53
      summary: "\nHeuristics as a Rule DataTree\n"
      example: []
      syntax:
        content:
          CSharp: public DataTree<Rule> heuristicsTree
          VB: Public heuristicsTree As DataTree(Of Rule)
        return:
          type: Grasshopper.DataTree{AssemblerLib.Rule}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.candidateObjects
      commentId: F:AssemblerLib.Assemblage.candidateObjects
      language: CSharp
      name:
        CSharp: candidateObjects
        VB: candidateObjects
      nameWithType:
        CSharp: Assemblage.candidateObjects
        VB: Assemblage.candidateObjects
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.candidateObjects
        VB: AssemblerLib.Assemblage.candidateObjects
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: candidateObjects
        path: Assemblage.cs
        startLine: 57
      summary: "\nTest variable to see the temporary sender object(s) in output\n"
      example: []
      syntax:
        content:
          CSharp: public List<AssemblyObject> candidateObjects
          VB: Public candidateObjects As List(Of AssemblyObject)
        return:
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.assemblageRules
      commentId: F:AssemblerLib.Assemblage.assemblageRules
      language: CSharp
      name:
        CSharp: assemblageRules
        VB: assemblageRules
      nameWithType:
        CSharp: Assemblage.assemblageRules
        VB: Assemblage.assemblageRules
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.assemblageRules
        VB: AssemblerLib.Assemblage.assemblageRules
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: assemblageRules
        path: Assemblage.cs
        startLine: 61
      summary: "\nList of Heuristics used during the assemblage\n"
      example: []
      syntax:
        content:
          CSharp: public List<string> assemblageRules
          VB: Public assemblageRules As List(Of String)
        return:
          type: System.Collections.Generic.List{System.String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.receiverIndexes
      commentId: F:AssemblerLib.Assemblage.receiverIndexes
      language: CSharp
      name:
        CSharp: receiverIndexes
        VB: receiverIndexes
      nameWithType:
        CSharp: Assemblage.receiverIndexes
        VB: Assemblage.receiverIndexes
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.receiverIndexes
        VB: AssemblerLib.Assemblage.receiverIndexes
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: receiverIndexes
        path: Assemblage.cs
        startLine: 65
      summary: "\nList of Receivers indexes used in the assemblage\n"
      example: []
      syntax:
        content:
          CSharp: public List<int> receiverIndexes
          VB: Public receiverIndexes As List(Of Integer)
        return:
          type: System.Collections.Generic.List{System.Int32}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.fieldThreshold
      commentId: F:AssemblerLib.Assemblage.fieldThreshold
      language: CSharp
      name:
        CSharp: fieldThreshold
        VB: fieldThreshold
      nameWithType:
        CSharp: Assemblage.fieldThreshold
        VB: Assemblage.fieldThreshold
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.fieldThreshold
        VB: AssemblerLib.Assemblage.fieldThreshold
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: fieldThreshold
        path: Assemblage.cs
        startLine: 69
      summary: "\nField Threshold for scalar field methods\n"
      example: []
      syntax:
        content:
          CSharp: public double fieldThreshold
          VB: Public fieldThreshold As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.selectReceiverMode
      commentId: F:AssemblerLib.Assemblage.selectReceiverMode
      language: CSharp
      name:
        CSharp: selectReceiverMode
        VB: selectReceiverMode
      nameWithType:
        CSharp: Assemblage.selectReceiverMode
        VB: Assemblage.selectReceiverMode
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.selectReceiverMode
        VB: AssemblerLib.Assemblage.selectReceiverMode
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: selectReceiverMode
        path: Assemblage.cs
        startLine: 73
      summary: "\nSelect receiver mode\n"
      example: []
      syntax:
        content:
          CSharp: public int selectReceiverMode
          VB: Public selectReceiverMode As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.selectRuleMode
      commentId: F:AssemblerLib.Assemblage.selectRuleMode
      language: CSharp
      name:
        CSharp: selectRuleMode
        VB: selectRuleMode
      nameWithType:
        CSharp: Assemblage.selectRuleMode
        VB: Assemblage.selectRuleMode
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.selectRuleMode
        VB: AssemblerLib.Assemblage.selectRuleMode
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: selectRuleMode
        path: Assemblage.cs
        startLine: 77
      summary: "\nSelect Rule mode\n"
      example: []
      syntax:
        content:
          CSharp: public int selectRuleMode
          VB: Public selectRuleMode As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.heuristicsMode
      commentId: F:AssemblerLib.Assemblage.heuristicsMode
      language: CSharp
      name:
        CSharp: heuristicsMode
        VB: heuristicsMode
      nameWithType:
        CSharp: Assemblage.heuristicsMode
        VB: Assemblage.heuristicsMode
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.heuristicsMode
        VB: AssemblerLib.Assemblage.heuristicsMode
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: heuristicsMode
        path: Assemblage.cs
        startLine: 84
      summary: "\n<ul><li></li><li></li></ul>\n"
      example: []
      syntax:
        content:
          CSharp: public int heuristicsMode
          VB: Public heuristicsMode As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.checkWorldZLock
      commentId: F:AssemblerLib.Assemblage.checkWorldZLock
      language: CSharp
      name:
        CSharp: checkWorldZLock
        VB: checkWorldZLock
      nameWithType:
        CSharp: Assemblage.checkWorldZLock
        VB: Assemblage.checkWorldZLock
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.checkWorldZLock
        VB: AssemblerLib.Assemblage.checkWorldZLock
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: checkWorldZLock
        path: Assemblage.cs
        startLine: 100
      summary: "\nif True, forces candidates to have their own Z axis parallel to the World Z axis (fixed up)\n"
      example: []
      syntax:
        content:
          CSharp: public bool checkWorldZLock
          VB: Public checkWorldZLock As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.#ctor(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.List{AssemblerLib.AssemblyObject},AssemblerLib.Field,System.Double,System.Collections.Generic.List{System.String},Rhino.Geometry.Plane,System.Int32,System.Collections.Generic.List{Rhino.Geometry.Mesh},Rhino.Geometry.Box)
      commentId: M:AssemblerLib.Assemblage.#ctor(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.List{AssemblerLib.AssemblyObject},AssemblerLib.Field,System.Double,System.Collections.Generic.List{System.String},Rhino.Geometry.Plane,System.Int32,System.Collections.Generic.List{Rhino.Geometry.Mesh},Rhino.Geometry.Box)
      language: CSharp
      name:
        CSharp: Assemblage(List<AssemblyObject>, List<AssemblyObject>, Field, Double, List<String>, Plane, Int32, List<Mesh>, Box)
        VB: Assemblage(List(Of AssemblyObject), List(Of AssemblyObject), Field, Double, List(Of String), Plane, Int32, List(Of Mesh), Box)
      nameWithType:
        CSharp: Assemblage.Assemblage(List<AssemblyObject>, List<AssemblyObject>, Field, Double, List<String>, Plane, Int32, List<Mesh>, Box)
        VB: Assemblage.Assemblage(List(Of AssemblyObject), List(Of AssemblyObject), Field, Double, List(Of String), Plane, Int32, List(Of Mesh), Box)
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.Assemblage(System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.Collections.Generic.List<AssemblerLib.AssemblyObject>, AssemblerLib.Field, System.Double, System.Collections.Generic.List<System.String>, Rhino.Geometry.Plane, System.Int32, System.Collections.Generic.List<Rhino.Geometry.Mesh>, Rhino.Geometry.Box)
        VB: AssemblerLib.Assemblage.Assemblage(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), AssemblerLib.Field, System.Double, System.Collections.Generic.List(Of System.String), Rhino.Geometry.Plane, System.Int32, System.Collections.Generic.List(Of Rhino.Geometry.Mesh), Rhino.Geometry.Box)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: .ctor
        path: Assemblage.cs
        startLine: 136
      summary: "\nExtensive constructor for the Assemblage class\n"
      example: []
      syntax:
        content:
          CSharp: public Assemblage(List<AssemblyObject> AO, List<AssemblyObject> pAO, Field field, double fieldThreshold, List<string> heuristicsString, Plane startPlane, int startType, List<Mesh> environmentMeshes, Box sandbox)
          VB: Public Sub New(AO As List(Of AssemblyObject), pAO As List(Of AssemblyObject), field As Field, fieldThreshold As Double, heuristicsString As List(Of String), startPlane As Plane, startType As Integer, environmentMeshes As List(Of Mesh), sandbox As Box)
        parameters:
        - id: AO
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        - id: pAO
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        - id: field
          type: AssemblerLib.Field
          description: ''
        - id: fieldThreshold
          type: System.Double
          description: ''
        - id: heuristicsString
          type: System.Collections.Generic.List{System.String}
          description: ''
        - id: startPlane
          type: Rhino.Geometry.Plane
          description: ''
        - id: startType
          type: System.Int32
          description: ''
        - id: environmentMeshes
          type: System.Collections.Generic.List{Rhino.Geometry.Mesh}
          description: ''
        - id: sandbox
          type: Rhino.Geometry.Box
          description: ''
      overload: AssemblerLib.Assemblage.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.Update
      commentId: M:AssemblerLib.Assemblage.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: Assemblage.Update()
        VB: Assemblage.Update()
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.Update()
        VB: AssemblerLib.Assemblage.Update()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: Update
        path: Assemblage.cs
        startLine: 319
      summary: "\nUpdate method\n\nUpdate is composed by these steps:\n. receiver selection (where do I add the next one?)\n. rule selection (what do I add and how?) and new object addition to the assemblage\n\nThe method can be customized with an override.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void Update()
          VB: Public Overridable Sub Update
      overload: AssemblerLib.Assemblage.Update*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: AssemblerLib.Assemblage.SelectReceiver(System.Collections.Generic.List{System.Int32})
      commentId: M:AssemblerLib.Assemblage.SelectReceiver(System.Collections.Generic.List{System.Int32})
      language: CSharp
      name:
        CSharp: SelectReceiver(List<Int32>)
        VB: SelectReceiver(List(Of Int32))
      nameWithType:
        CSharp: Assemblage.SelectReceiver(List<Int32>)
        VB: Assemblage.SelectReceiver(List(Of Int32))
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.SelectReceiver(System.Collections.Generic.List<System.Int32>)
        VB: AssemblerLib.Assemblage.SelectReceiver(System.Collections.Generic.List(Of System.Int32))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: SelectReceiver
        path: Assemblage.cs
        startLine: 403
      summary: "\nA virtual method for customizing receiver selection criteria\n"
      example: []
      syntax:
        content:
          CSharp: public virtual int SelectReceiver(List<int> availableObjects)
          VB: Public Overridable Function SelectReceiver(availableObjects As List(Of Integer)) As Integer
        parameters:
        - id: availableObjects
          type: System.Collections.Generic.List{System.Int32}
          description: ''
        return:
          type: System.Int32
          description: index of selected receiver
      overload: AssemblerLib.Assemblage.SelectReceiver*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: AssemblerLib.Assemblage.SelectReceiver(System.Collections.Generic.List{System.Int32},System.Int32)
      commentId: M:AssemblerLib.Assemblage.SelectReceiver(System.Collections.Generic.List{System.Int32},System.Int32)
      language: CSharp
      name:
        CSharp: SelectReceiver(List<Int32>, Int32)
        VB: SelectReceiver(List(Of Int32), Int32)
      nameWithType:
        CSharp: Assemblage.SelectReceiver(List<Int32>, Int32)
        VB: Assemblage.SelectReceiver(List(Of Int32), Int32)
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.SelectReceiver(System.Collections.Generic.List<System.Int32>, System.Int32)
        VB: AssemblerLib.Assemblage.SelectReceiver(System.Collections.Generic.List(Of System.Int32), System.Int32)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: SelectReceiver
        path: Assemblage.cs
        startLine: 422
      summary: "\nReceiver Selection according to a set possible criteria: \n<ul><li></li><li></li><li></li><li></li><li></li><li></li></ul>\n"
      example: []
      syntax:
        content:
          CSharp: public virtual int SelectReceiver(List<int> availableObjects, int selectReceiverMode)
          VB: Public Overridable Function SelectReceiver(availableObjects As List(Of Integer), selectReceiverMode As Integer) As Integer
        parameters:
        - id: availableObjects
          type: System.Collections.Generic.List{System.Int32}
          description: list of available <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>s in the Assemblage
        - id: selectReceiverMode
          type: System.Int32
          description: integer to set receiver mode selection
        return:
          type: System.Int32
          description: The index of the available <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref> selected as a receiver
      overload: AssemblerLib.Assemblage.SelectReceiver*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
      references:
        AssemblerLib.AssemblyObject: 
    - id: AssemblerLib.Assemblage.SelectRule(System.Collections.Generic.List{AssemblerLib.Rule},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{AssemblerLib.AssemblyObject},AssemblerLib.AssemblyObject@)
      commentId: M:AssemblerLib.Assemblage.SelectRule(System.Collections.Generic.List{AssemblerLib.Rule},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{AssemblerLib.AssemblyObject},AssemblerLib.AssemblyObject@)
      language: CSharp
      name:
        CSharp: SelectRule(List<Rule>, List<Int32>, List<AssemblyObject>, out AssemblyObject)
        VB: SelectRule(List(Of Rule), List(Of Int32), List(Of AssemblyObject), ByRef AssemblyObject)
      nameWithType:
        CSharp: Assemblage.SelectRule(List<Rule>, List<Int32>, List<AssemblyObject>, out AssemblyObject)
        VB: Assemblage.SelectRule(List(Of Rule), List(Of Int32), List(Of AssemblyObject), ByRef AssemblyObject)
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.SelectRule(System.Collections.Generic.List<AssemblerLib.Rule>, System.Collections.Generic.List<System.Int32>, System.Collections.Generic.List<AssemblerLib.AssemblyObject>, out AssemblerLib.AssemblyObject)
        VB: AssemblerLib.Assemblage.SelectRule(System.Collections.Generic.List(Of AssemblerLib.Rule), System.Collections.Generic.List(Of System.Int32), System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), ByRef AssemblerLib.AssemblyObject)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: SelectRule
        path: Assemblage.cs
        startLine: 470
      summary: "\nA virtual method for customizing rule selection criteria\n"
      example: []
      syntax:
        content:
          CSharp: public virtual Rule SelectRule(List<Rule> rRules, List<int> validRules, List<AssemblyObject> candidates, out AssemblyObject newObject)
          VB: Public Overridable Function SelectRule(rRules As List(Of Rule), validRules As List(Of Integer), candidates As List(Of AssemblyObject), ByRef newObject As AssemblyObject) As Rule
        parameters:
        - id: rRules
          type: System.Collections.Generic.List{AssemblerLib.Rule}
          description: List of <xref href="AssemblerLib.Rule" data-throw-if-not-resolved="false"></xref>s admitted by the receiver
        - id: validRules
          type: System.Collections.Generic.List{System.Int32}
          description: Indices of valid <xref href="AssemblerLib.Rule" data-throw-if-not-resolved="false"></xref>s (candidates that do not collide with existing assemblage and/or environment obstacles)
        - id: candidates
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: List of candidate <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>s
        - id: newObject
          type: AssemblerLib.AssemblyObject
          description: Selected new <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref> to add according to the selected Rule
        return:
          type: AssemblerLib.Rule
          description: The selected Rule
      overload: AssemblerLib.Assemblage.SelectRule*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
      references:
        AssemblerLib.Rule: 
        AssemblerLib.AssemblyObject: 
    - id: AssemblerLib.Assemblage.SelectRule(System.Int32,System.Collections.Generic.List{AssemblerLib.Rule},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Int32,AssemblerLib.AssemblyObject@)
      commentId: M:AssemblerLib.Assemblage.SelectRule(System.Int32,System.Collections.Generic.List{AssemblerLib.Rule},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Int32,AssemblerLib.AssemblyObject@)
      language: CSharp
      name:
        CSharp: SelectRule(Int32, List<Rule>, List<Int32>, List<AssemblyObject>, Int32, out AssemblyObject)
        VB: SelectRule(Int32, List(Of Rule), List(Of Int32), List(Of AssemblyObject), Int32, ByRef AssemblyObject)
      nameWithType:
        CSharp: Assemblage.SelectRule(Int32, List<Rule>, List<Int32>, List<AssemblyObject>, Int32, out AssemblyObject)
        VB: Assemblage.SelectRule(Int32, List(Of Rule), List(Of Int32), List(Of AssemblyObject), Int32, ByRef AssemblyObject)
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.SelectRule(System.Int32, System.Collections.Generic.List<AssemblerLib.Rule>, System.Collections.Generic.List<System.Int32>, System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.Int32, out AssemblerLib.AssemblyObject)
        VB: AssemblerLib.Assemblage.SelectRule(System.Int32, System.Collections.Generic.List(Of AssemblerLib.Rule), System.Collections.Generic.List(Of System.Int32), System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.Int32, ByRef AssemblerLib.AssemblyObject)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: SelectRule
        path: Assemblage.cs
        startLine: 492
      summary: "\nRule selection according to 3 possible criteria: random, scalar field search, vector field search\n"
      example: []
      syntax:
        content:
          CSharp: public virtual Rule SelectRule(int receiverIndex, List<Rule> receiverRules, List<int> validRules, List<AssemblyObject> candidates, int mode, out AssemblyObject newObject)
          VB: Public Overridable Function SelectRule(receiverIndex As Integer, receiverRules As List(Of Rule), validRules As List(Of Integer), candidates As List(Of AssemblyObject), mode As Integer, ByRef newObject As AssemblyObject) As Rule
        parameters:
        - id: receiverIndex
          type: System.Int32
          description: Index of the receiver <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>
        - id: receiverRules
          type: System.Collections.Generic.List{AssemblerLib.Rule}
          description: List of <xref href="AssemblerLib.Rule" data-throw-if-not-resolved="false"></xref>s admitted by the receiver
        - id: validRules
          type: System.Collections.Generic.List{System.Int32}
          description: Indices of valid <xref href="AssemblerLib.Rule" data-throw-if-not-resolved="false"></xref>s (candidates that do not collide with existing assemblage and/or environment obstacles)
        - id: candidates
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: List of candidates <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>s
        - id: mode
          type: System.Int32
          description: integer for selection mode
        - id: newObject
          type: AssemblerLib.AssemblyObject
          description: new AssemblyObject to add to the assemblage
        return:
          type: AssemblerLib.Rule
          description: selected rule
      overload: AssemblerLib.Assemblage.SelectRule*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
      references:
        AssemblerLib.AssemblyObject: 
        AssemblerLib.Rule: 
    - id: AssemblerLib.Assemblage.WeightedRandomChoiceIndex(System.Collections.Generic.List{System.Int32})
      commentId: M:AssemblerLib.Assemblage.WeightedRandomChoiceIndex(System.Collections.Generic.List{System.Int32})
      language: CSharp
      name:
        CSharp: WeightedRandomChoiceIndex(List<Int32>)
        VB: WeightedRandomChoiceIndex(List(Of Int32))
      nameWithType:
        CSharp: Assemblage.WeightedRandomChoiceIndex(List<Int32>)
        VB: Assemblage.WeightedRandomChoiceIndex(List(Of Int32))
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.WeightedRandomChoiceIndex(System.Collections.Generic.List<System.Int32>)
        VB: AssemblerLib.Assemblage.WeightedRandomChoiceIndex(System.Collections.Generic.List(Of System.Int32))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: WeightedRandomChoiceIndex
        path: Assemblage.cs
        startLine: 567
      summary: "\nPerforms a Weighted Random Choice given a List of weights\n"
      example: []
      syntax:
        content:
          CSharp: public int WeightedRandomChoiceIndex(List<int> weights)
          VB: Public Function WeightedRandomChoiceIndex(weights As List(Of Integer)) As Integer
        parameters:
        - id: weights
          type: System.Collections.Generic.List{System.Int32}
          description: ''
        return:
          type: System.Int32
          description: index of the selected weight
      overload: AssemblerLib.Assemblage.WeightedRandomChoiceIndex*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.WeightedRandomChoice``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Int32})
      commentId: M:AssemblerLib.Assemblage.WeightedRandomChoice``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Int32})
      language: CSharp
      name:
        CSharp: WeightedRandomChoice<T>(List<T>, List<Int32>)
        VB: WeightedRandomChoice(Of T)(List(Of T), List(Of Int32))
      nameWithType:
        CSharp: Assemblage.WeightedRandomChoice<T>(List<T>, List<Int32>)
        VB: Assemblage.WeightedRandomChoice(Of T)(List(Of T), List(Of Int32))
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.WeightedRandomChoice<T>(System.Collections.Generic.List<T>, System.Collections.Generic.List<System.Int32>)
        VB: AssemblerLib.Assemblage.WeightedRandomChoice(Of T)(System.Collections.Generic.List(Of T), System.Collections.Generic.List(Of System.Int32))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: WeightedRandomChoice
        path: Assemblage.cs
        startLine: 593
      summary: "\nPerforms a Weighted Random Choice on a List of data and corresponding weights\n"
      example: []
      syntax:
        content:
          CSharp: public T WeightedRandomChoice<T>(List<T> values, List<int> weights)
          VB: Public Function WeightedRandomChoice(Of T)(values As List(Of T), weights As List(Of Integer)) As T
        parameters:
        - id: values
          type: System.Collections.Generic.List{{T}}
          description: ''
        - id: weights
          type: System.Collections.Generic.List{System.Int32}
          description: ''
        typeParameters:
        - id: T
          description: ''
        return:
          type: '{T}'
          description: the selected value
      overload: AssemblerLib.Assemblage.WeightedRandomChoice*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.RetrieveCandidates(System.Int32,System.Collections.Generic.List{AssemblerLib.Rule}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{AssemblerLib.AssemblyObject}@)
      commentId: M:AssemblerLib.Assemblage.RetrieveCandidates(System.Int32,System.Collections.Generic.List{AssemblerLib.Rule}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{AssemblerLib.AssemblyObject}@)
      language: CSharp
      name:
        CSharp: RetrieveCandidates(Int32, out List<Rule>, out List<Int32>, out List<AssemblyObject>)
        VB: RetrieveCandidates(Int32, ByRef List(Of Rule), ByRef List(Of Int32), ByRef List(Of AssemblyObject))
      nameWithType:
        CSharp: Assemblage.RetrieveCandidates(Int32, out List<Rule>, out List<Int32>, out List<AssemblyObject>)
        VB: Assemblage.RetrieveCandidates(Int32, ByRef List(Of Rule), ByRef List(Of Int32), ByRef List(Of AssemblyObject))
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.RetrieveCandidates(System.Int32, out System.Collections.Generic.List<AssemblerLib.Rule>, out System.Collections.Generic.List<System.Int32>, out System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
        VB: AssemblerLib.Assemblage.RetrieveCandidates(System.Int32, ByRef System.Collections.Generic.List(Of AssemblerLib.Rule), ByRef System.Collections.Generic.List(Of System.Int32), ByRef System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: RetrieveCandidates
        path: Assemblage.cs
        startLine: 606
      summary: "\nRetrieve Candidates based on receiver index\n"
      example: []
      syntax:
        content:
          CSharp: public bool RetrieveCandidates(int receiverIndex, out List<Rule> receiverRules, out List<int> validRules, out List<AssemblyObject> candidates)
          VB: Public Function RetrieveCandidates(receiverIndex As Integer, ByRef receiverRules As List(Of Rule), ByRef validRules As List(Of Integer), ByRef candidates As List(Of AssemblyObject)) As Boolean
        parameters:
        - id: receiverIndex
          type: System.Int32
          description: Index of the receiver <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>
        - id: receiverRules
          type: System.Collections.Generic.List{AssemblerLib.Rule}
          description: List of corresponding <xref href="AssemblerLib.Rule" data-throw-if-not-resolved="false"></xref>s
        - id: validRules
          type: System.Collections.Generic.List{System.Int32}
          description: Indices of valid <xref href="AssemblerLib.Rule" data-throw-if-not-resolved="false"></xref>s (candidates that do not collide with existing assemblage and/or environment obstacles)
        - id: candidates
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: List of candidates <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>s
        return:
          type: System.Boolean
          description: True if at least one suitable candidate has been found, False otherwise
      overload: AssemblerLib.Assemblage.RetrieveCandidates*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        AssemblerLib.AssemblyObject: 
        AssemblerLib.Rule: 
    - id: AssemblerLib.Assemblage.AddValidObject(AssemblerLib.AssemblyObject,AssemblerLib.Rule,System.Int32)
      commentId: M:AssemblerLib.Assemblage.AddValidObject(AssemblerLib.AssemblyObject,AssemblerLib.Rule,System.Int32)
      language: CSharp
      name:
        CSharp: AddValidObject(AssemblyObject, Rule, Int32)
        VB: AddValidObject(AssemblyObject, Rule, Int32)
      nameWithType:
        CSharp: Assemblage.AddValidObject(AssemblyObject, Rule, Int32)
        VB: Assemblage.AddValidObject(AssemblyObject, Rule, Int32)
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.AddValidObject(AssemblerLib.AssemblyObject, AssemblerLib.Rule, System.Int32)
        VB: AssemblerLib.Assemblage.AddValidObject(AssemblerLib.AssemblyObject, AssemblerLib.Rule, System.Int32)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: AddValidObject
        path: Assemblage.cs
        startLine: 682
      syntax:
        content:
          CSharp: public void AddValidObject(AssemblyObject newObject, Rule rule, int rInd)
          VB: Public Sub AddValidObject(newObject As AssemblyObject, rule As Rule, rInd As Integer)
        parameters:
        - id: newObject
          type: AssemblerLib.AssemblyObject
        - id: rule
          type: AssemblerLib.Rule
        - id: rInd
          type: System.Int32
      overload: AssemblerLib.Assemblage.AddValidObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.FieldScalarSearch(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Double,System.Boolean)
      commentId: M:AssemblerLib.Assemblage.FieldScalarSearch(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Double,System.Boolean)
      language: CSharp
      name:
        CSharp: FieldScalarSearch(List<AssemblyObject>, Double, Boolean)
        VB: FieldScalarSearch(List(Of AssemblyObject), Double, Boolean)
      nameWithType:
        CSharp: Assemblage.FieldScalarSearch(List<AssemblyObject>, Double, Boolean)
        VB: Assemblage.FieldScalarSearch(List(Of AssemblyObject), Double, Boolean)
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.FieldScalarSearch(System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.Double, System.Boolean)
        VB: AssemblerLib.Assemblage.FieldScalarSearch(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.Double, System.Boolean)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: FieldScalarSearch
        path: Assemblage.cs
        startLine: 825
      summary: "\nSelect among candidates AssemblyObjects by Scalar Field criteria\n"
      example: []
      syntax:
        content:
          CSharp: public int FieldScalarSearch(List<AssemblyObject> candidates, double threshold, bool accurate)
          VB: Public Function FieldScalarSearch(candidates As List(Of AssemblyObject), threshold As Double, accurate As Boolean) As Integer
        parameters:
        - id: candidates
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        - id: threshold
          type: System.Double
          description: ''
        - id: accurate
          type: System.Boolean
        return:
          type: System.Int32
          description: ''
      overload: AssemblerLib.Assemblage.FieldScalarSearch*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.FieldVectorSearch(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Boolean,System.Boolean)
      commentId: M:AssemblerLib.Assemblage.FieldVectorSearch(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: FieldVectorSearch(List<AssemblyObject>, Boolean, Boolean)
        VB: FieldVectorSearch(List(Of AssemblyObject), Boolean, Boolean)
      nameWithType:
        CSharp: Assemblage.FieldVectorSearch(List<AssemblyObject>, Boolean, Boolean)
        VB: Assemblage.FieldVectorSearch(List(Of AssemblyObject), Boolean, Boolean)
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.FieldVectorSearch(System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.Boolean, System.Boolean)
        VB: AssemblerLib.Assemblage.FieldVectorSearch(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.Boolean, System.Boolean)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: FieldVectorSearch
        path: Assemblage.cs
        startLine: 861
      summary: "\nSelect among candidates AssemblyObjects by Vector Field criteria\n"
      example: []
      syntax:
        content:
          CSharp: public int FieldVectorSearch(List<AssemblyObject> candidates, bool bidirectional, bool accurate)
          VB: Public Function FieldVectorSearch(candidates As List(Of AssemblyObject), bidirectional As Boolean, accurate As Boolean) As Integer
        parameters:
        - id: candidates
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        - id: bidirectional
          type: System.Boolean
          description: ''
        - id: accurate
          type: System.Boolean
        return:
          type: System.Int32
          description: ''
      overload: AssemblerLib.Assemblage.FieldVectorSearch*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.SetHeuristics(System.Collections.Generic.List{System.String})
      commentId: M:AssemblerLib.Assemblage.SetHeuristics(System.Collections.Generic.List{System.String})
      language: CSharp
      name:
        CSharp: SetHeuristics(List<String>)
        VB: SetHeuristics(List(Of String))
      nameWithType:
        CSharp: Assemblage.SetHeuristics(List<String>)
        VB: Assemblage.SetHeuristics(List(Of String))
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.SetHeuristics(System.Collections.Generic.List<System.String>)
        VB: AssemblerLib.Assemblage.SetHeuristics(System.Collections.Generic.List(Of System.String))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: SetHeuristics
        path: Assemblage.cs
        startLine: 1103
      summary: "\nSets Assemblage Heuristics\n"
      example: []
      syntax:
        content:
          CSharp: public void SetHeuristics(List<string> heuristicsString)
          VB: Public Sub SetHeuristics(heuristicsString As List(Of String))
        parameters:
        - id: heuristicsString
          type: System.Collections.Generic.List{System.String}
          description: ''
      overload: AssemblerLib.Assemblage.SetHeuristics*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.ResetExogenous(System.Collections.Generic.List{Rhino.Geometry.Mesh},AssemblerLib.Field,System.Double,Rhino.Geometry.Box)
      commentId: M:AssemblerLib.Assemblage.ResetExogenous(System.Collections.Generic.List{Rhino.Geometry.Mesh},AssemblerLib.Field,System.Double,Rhino.Geometry.Box)
      language: CSharp
      name:
        CSharp: ResetExogenous(List<Mesh>, Field, Double, Box)
        VB: ResetExogenous(List(Of Mesh), Field, Double, Box)
      nameWithType:
        CSharp: Assemblage.ResetExogenous(List<Mesh>, Field, Double, Box)
        VB: Assemblage.ResetExogenous(List(Of Mesh), Field, Double, Box)
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.ResetExogenous(System.Collections.Generic.List<Rhino.Geometry.Mesh>, AssemblerLib.Field, System.Double, Rhino.Geometry.Box)
        VB: AssemblerLib.Assemblage.ResetExogenous(System.Collections.Generic.List(Of Rhino.Geometry.Mesh), AssemblerLib.Field, System.Double, Rhino.Geometry.Box)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: ResetExogenous
        path: Assemblage.cs
        startLine: 1115
      summary: "\nResets Exogenous parameters\n"
      example: []
      syntax:
        content:
          CSharp: public void ResetExogenous(List<Mesh> environMentMeshes, Field field, double fieldThreshold, Box SandBox)
          VB: Public Sub ResetExogenous(environMentMeshes As List(Of Mesh), field As Field, fieldThreshold As Double, SandBox As Box)
        parameters:
        - id: environMentMeshes
          type: System.Collections.Generic.List{Rhino.Geometry.Mesh}
          description: ''
        - id: field
          type: AssemblerLib.Field
          description: ''
        - id: fieldThreshold
          type: System.Double
          description: ''
        - id: SandBox
          type: Rhino.Geometry.Box
          description: ''
      overload: AssemblerLib.Assemblage.ResetExogenous*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.SetSandbox(Rhino.Geometry.Box)
      commentId: M:AssemblerLib.Assemblage.SetSandbox(Rhino.Geometry.Box)
      language: CSharp
      name:
        CSharp: SetSandbox(Box)
        VB: SetSandbox(Box)
      nameWithType:
        CSharp: Assemblage.SetSandbox(Box)
        VB: Assemblage.SetSandbox(Box)
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.SetSandbox(Rhino.Geometry.Box)
        VB: AssemblerLib.Assemblage.SetSandbox(Rhino.Geometry.Box)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: SetSandbox
        path: Assemblage.cs
        startLine: 1130
      summary: "\nSets Sandbox geometry\n"
      example: []
      syntax:
        content:
          CSharp: public void SetSandbox(Box sandbox)
          VB: Public Sub SetSandbox(sandbox As Box)
        parameters:
        - id: sandbox
          type: Rhino.Geometry.Box
          description: ''
      overload: AssemblerLib.Assemblage.SetSandbox*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.SetEnvCheckMethod(System.Int32)
      commentId: M:AssemblerLib.Assemblage.SetEnvCheckMethod(System.Int32)
      language: CSharp
      name:
        CSharp: SetEnvCheckMethod(Int32)
        VB: SetEnvCheckMethod(Int32)
      nameWithType:
        CSharp: Assemblage.SetEnvCheckMethod(Int32)
        VB: Assemblage.SetEnvCheckMethod(Int32)
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.SetEnvCheckMethod(System.Int32)
        VB: AssemblerLib.Assemblage.SetEnvCheckMethod(System.Int32)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: SetEnvCheckMethod
        path: Assemblage.cs
        startLine: 1146
      summary: "\nSets Environment Check Method to use\n"
      example: []
      syntax:
        content:
          CSharp: public void SetEnvCheckMethod(int environmentMode)
          VB: Public Sub SetEnvCheckMethod(environmentMode As Integer)
        parameters:
        - id: environmentMode
          type: System.Int32
          description: ''
      overload: AssemblerLib.Assemblage.SetEnvCheckMethod*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.ResetAvailableObjects
      commentId: M:AssemblerLib.Assemblage.ResetAvailableObjects
      language: CSharp
      name:
        CSharp: ResetAvailableObjects()
        VB: ResetAvailableObjects()
      nameWithType:
        CSharp: Assemblage.ResetAvailableObjects()
        VB: Assemblage.ResetAvailableObjects()
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.ResetAvailableObjects()
        VB: AssemblerLib.Assemblage.ResetAvailableObjects()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: ResetAvailableObjects
        path: Assemblage.cs
        startLine: 1184
      summary: "\nVerify list of available/unreachable objects according to current environment and heuristics\n"
      example: []
      syntax:
        content:
          CSharp: public void ResetAvailableObjects()
          VB: Public Sub ResetAvailableObjects
      overload: AssemblerLib.Assemblage.ResetAvailableObjects*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.ExtractAvailableObjects
      commentId: M:AssemblerLib.Assemblage.ExtractAvailableObjects
      language: CSharp
      name:
        CSharp: ExtractAvailableObjects()
        VB: ExtractAvailableObjects()
      nameWithType:
        CSharp: Assemblage.ExtractAvailableObjects()
        VB: Assemblage.ExtractAvailableObjects()
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.ExtractAvailableObjects()
        VB: AssemblerLib.Assemblage.ExtractAvailableObjects()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: ExtractAvailableObjects
        path: Assemblage.cs
        startLine: 1274
      summary: "\nExtract available objects indices\n"
      example: []
      syntax:
        content:
          CSharp: public GH_Integer[] ExtractAvailableObjects()
          VB: Public Function ExtractAvailableObjects As GH_Integer()
        return:
          type: Grasshopper.Kernel.Types.GH_Integer[]
          description: An array of indices of available objects in the Assemblage
      overload: AssemblerLib.Assemblage.ExtractAvailableObjects*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Assemblage.ExtractUnreachableObjects
      commentId: M:AssemblerLib.Assemblage.ExtractUnreachableObjects
      language: CSharp
      name:
        CSharp: ExtractUnreachableObjects()
        VB: ExtractUnreachableObjects()
      nameWithType:
        CSharp: Assemblage.ExtractUnreachableObjects()
        VB: Assemblage.ExtractUnreachableObjects()
      qualifiedName:
        CSharp: AssemblerLib.Assemblage.ExtractUnreachableObjects()
        VB: AssemblerLib.Assemblage.ExtractUnreachableObjects()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
        id: ExtractUnreachableObjects
        path: Assemblage.cs
        startLine: 1293
      summary: "\nExtract unreachable objects indices\n"
      example: []
      syntax:
        content:
          CSharp: public GH_Integer[] ExtractUnreachableObjects()
          VB: Public Function ExtractUnreachableObjects As GH_Integer()
        return:
          type: Grasshopper.Kernel.Types.GH_Integer[]
          description: An array of indices of unreachable objects in the Assemblage
      overload: AssemblerLib.Assemblage.ExtractUnreachableObjects*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: AssemblerLib.Assemblage.EnvCheckMethod
    commentId: T:AssemblerLib.Assemblage.EnvCheckMethod
    language: CSharp
    name:
      CSharp: Assemblage.EnvCheckMethod
      VB: Assemblage.EnvCheckMethod
    nameWithType:
      CSharp: Assemblage.EnvCheckMethod
      VB: Assemblage.EnvCheckMethod
    qualifiedName:
      CSharp: AssemblerLib.Assemblage.EnvCheckMethod
      VB: AssemblerLib.Assemblage.EnvCheckMethod
    type: Delegate
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Assemblage.cs
      id: EnvCheckMethod
      path: Assemblage.cs
      startLine: 96
    summary: "\nDelegate type for environment check function choice (between collision and inclusion)\n"
    example: []
    syntax:
      content:
        CSharp: public delegate bool EnvCheckMethod(AssemblyObject sO);
        VB: Public Delegate Function EnvCheckMethod(sO As AssemblyObject) As Boolean
      parameters:
      - id: sO
        type: AssemblerLib.AssemblyObject
        description: ''
      return:
        type: System.Boolean
        description: ''
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: AssemblerLib.HeuristicsSettings
    commentId: T:AssemblerLib.HeuristicsSettings
    language: CSharp
    name:
      CSharp: HeuristicsSettings
      VB: HeuristicsSettings
    nameWithType:
      CSharp: HeuristicsSettings
      VB: HeuristicsSettings
    qualifiedName:
      CSharp: AssemblerLib.HeuristicsSettings
      VB: AssemblerLib.HeuristicsSettings
    type: Struct
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/HeuristicsSettings.cs
      id: HeuristicsSettings
      path: HeuristicsSettings.cs
      startLine: 6
    syntax:
      content:
        CSharp: public struct HeuristicsSettings
        VB: Public Structure HeuristicsSettings
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: AssemblerLib.HeuristicsSettings.heuristicsString
      commentId: F:AssemblerLib.HeuristicsSettings.heuristicsString
      language: CSharp
      name:
        CSharp: heuristicsString
        VB: heuristicsString
      nameWithType:
        CSharp: HeuristicsSettings.heuristicsString
        VB: HeuristicsSettings.heuristicsString
      qualifiedName:
        CSharp: AssemblerLib.HeuristicsSettings.heuristicsString
        VB: AssemblerLib.HeuristicsSettings.heuristicsString
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/HeuristicsSettings.cs
        id: heuristicsString
        path: HeuristicsSettings.cs
        startLine: 8
      syntax:
        content:
          CSharp: public List<string> heuristicsString
          VB: Public heuristicsString As List(Of String)
        return:
          type: System.Collections.Generic.List{System.String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.HeuristicsSettings.currentHeuristics
      commentId: F:AssemblerLib.HeuristicsSettings.currentHeuristics
      language: CSharp
      name:
        CSharp: currentHeuristics
        VB: currentHeuristics
      nameWithType:
        CSharp: HeuristicsSettings.currentHeuristics
        VB: HeuristicsSettings.currentHeuristics
      qualifiedName:
        CSharp: AssemblerLib.HeuristicsSettings.currentHeuristics
        VB: AssemblerLib.HeuristicsSettings.currentHeuristics
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/HeuristicsSettings.cs
        id: currentHeuristics
        path: HeuristicsSettings.cs
        startLine: 9
      syntax:
        content:
          CSharp: public int currentHeuristics
          VB: Public currentHeuristics As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.HeuristicsSettings.heuristicsMode
      commentId: F:AssemblerLib.HeuristicsSettings.heuristicsMode
      language: CSharp
      name:
        CSharp: heuristicsMode
        VB: heuristicsMode
      nameWithType:
        CSharp: HeuristicsSettings.heuristicsMode
        VB: HeuristicsSettings.heuristicsMode
      qualifiedName:
        CSharp: AssemblerLib.HeuristicsSettings.heuristicsMode
        VB: AssemblerLib.HeuristicsSettings.heuristicsMode
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/HeuristicsSettings.cs
        id: heuristicsMode
        path: HeuristicsSettings.cs
        startLine: 10
      syntax:
        content:
          CSharp: public int heuristicsMode
          VB: Public heuristicsMode As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.HeuristicsSettings.receiverSelectionMode
      commentId: F:AssemblerLib.HeuristicsSettings.receiverSelectionMode
      language: CSharp
      name:
        CSharp: receiverSelectionMode
        VB: receiverSelectionMode
      nameWithType:
        CSharp: HeuristicsSettings.receiverSelectionMode
        VB: HeuristicsSettings.receiverSelectionMode
      qualifiedName:
        CSharp: AssemblerLib.HeuristicsSettings.receiverSelectionMode
        VB: AssemblerLib.HeuristicsSettings.receiverSelectionMode
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/HeuristicsSettings.cs
        id: receiverSelectionMode
        path: HeuristicsSettings.cs
        startLine: 11
      syntax:
        content:
          CSharp: public int receiverSelectionMode
          VB: Public receiverSelectionMode As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.HeuristicsSettings.ruleSelectionMode
      commentId: F:AssemblerLib.HeuristicsSettings.ruleSelectionMode
      language: CSharp
      name:
        CSharp: ruleSelectionMode
        VB: ruleSelectionMode
      nameWithType:
        CSharp: HeuristicsSettings.ruleSelectionMode
        VB: HeuristicsSettings.ruleSelectionMode
      qualifiedName:
        CSharp: AssemblerLib.HeuristicsSettings.ruleSelectionMode
        VB: AssemblerLib.HeuristicsSettings.ruleSelectionMode
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/HeuristicsSettings.cs
        id: ruleSelectionMode
        path: HeuristicsSettings.cs
        startLine: 12
      syntax:
        content:
          CSharp: public int ruleSelectionMode
          VB: Public ruleSelectionMode As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.HeuristicsSettings.#ctor(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:AssemblerLib.HeuristicsSettings.#ctor(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: HeuristicsSettings(List<String>, Int32, Int32, Int32, Int32)
        VB: HeuristicsSettings(List(Of String), Int32, Int32, Int32, Int32)
      nameWithType:
        CSharp: HeuristicsSettings.HeuristicsSettings(List<String>, Int32, Int32, Int32, Int32)
        VB: HeuristicsSettings.HeuristicsSettings(List(Of String), Int32, Int32, Int32, Int32)
      qualifiedName:
        CSharp: AssemblerLib.HeuristicsSettings.HeuristicsSettings(System.Collections.Generic.List<System.String>, System.Int32, System.Int32, System.Int32, System.Int32)
        VB: AssemblerLib.HeuristicsSettings.HeuristicsSettings(System.Collections.Generic.List(Of System.String), System.Int32, System.Int32, System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/HeuristicsSettings.cs
        id: .ctor
        path: HeuristicsSettings.cs
        startLine: 14
      syntax:
        content:
          CSharp: public HeuristicsSettings(List<string> heuristicsString, int currentHeuristics, int heuristicsMode, int receiverSelectionMode, int ruleSelectionMode)
          VB: Public Sub New(heuristicsString As List(Of String), currentHeuristics As Integer, heuristicsMode As Integer, receiverSelectionMode As Integer, ruleSelectionMode As Integer)
        parameters:
        - id: heuristicsString
          type: System.Collections.Generic.List{System.String}
        - id: currentHeuristics
          type: System.Int32
        - id: heuristicsMode
          type: System.Int32
        - id: receiverSelectionMode
          type: System.Int32
        - id: ruleSelectionMode
          type: System.Int32
      overload: AssemblerLib.HeuristicsSettings.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: AssemblerLib.MeshEnvironment
    commentId: T:AssemblerLib.MeshEnvironment
    language: CSharp
    name:
      CSharp: MeshEnvironment
      VB: MeshEnvironment
    nameWithType:
      CSharp: MeshEnvironment
      VB: MeshEnvironment
    qualifiedName:
      CSharp: AssemblerLib.MeshEnvironment
      VB: AssemblerLib.MeshEnvironment
    type: Class
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/MeshEnvironment.cs
      id: MeshEnvironment
      path: MeshEnvironment.cs
      startLine: 9
    summary: "\nthis class can give more properties to the environment objects\n"
    example: []
    syntax:
      content:
        CSharp: public class MeshEnvironment
        VB: Public Class MeshEnvironment
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: AssemblerLib.MeshEnvironment.mesh
      commentId: F:AssemblerLib.MeshEnvironment.mesh
      language: CSharp
      name:
        CSharp: mesh
        VB: mesh
      nameWithType:
        CSharp: MeshEnvironment.mesh
        VB: MeshEnvironment.mesh
      qualifiedName:
        CSharp: AssemblerLib.MeshEnvironment.mesh
        VB: AssemblerLib.MeshEnvironment.mesh
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/MeshEnvironment.cs
        id: mesh
        path: MeshEnvironment.cs
        startLine: 14
      summary: "\nMesh\n"
      example: []
      syntax:
        content:
          CSharp: public Mesh mesh
          VB: Public mesh As Mesh
        return:
          type: Rhino.Geometry.Mesh
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.MeshEnvironment.type
      commentId: F:AssemblerLib.MeshEnvironment.type
      language: CSharp
      name:
        CSharp: type
        VB: type
      nameWithType:
        CSharp: MeshEnvironment.type
        VB: MeshEnvironment.type
      qualifiedName:
        CSharp: AssemblerLib.MeshEnvironment.type
        VB: AssemblerLib.MeshEnvironment.type
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/MeshEnvironment.cs
        id: type
        path: MeshEnvironment.cs
        startLine: 17
      syntax:
        content:
          CSharp: public MeshEnvironment.Type type
          VB: Public type As MeshEnvironment.Type
        return:
          type: AssemblerLib.MeshEnvironment.Type
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.MeshEnvironment.#ctor(Rhino.Geometry.Mesh)
      commentId: M:AssemblerLib.MeshEnvironment.#ctor(Rhino.Geometry.Mesh)
      language: CSharp
      name:
        CSharp: MeshEnvironment(Mesh)
        VB: MeshEnvironment(Mesh)
      nameWithType:
        CSharp: MeshEnvironment.MeshEnvironment(Mesh)
        VB: MeshEnvironment.MeshEnvironment(Mesh)
      qualifiedName:
        CSharp: AssemblerLib.MeshEnvironment.MeshEnvironment(Rhino.Geometry.Mesh)
        VB: AssemblerLib.MeshEnvironment.MeshEnvironment(Rhino.Geometry.Mesh)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/MeshEnvironment.cs
        id: .ctor
        path: MeshEnvironment.cs
        startLine: 23
      summary: "\nConstructs a MeshEnvironment from a Mesh\n"
      example: []
      syntax:
        content:
          CSharp: public MeshEnvironment(Mesh mesh)
          VB: Public Sub New(mesh As Mesh)
        parameters:
        - id: mesh
          type: Rhino.Geometry.Mesh
          description: ''
      overload: AssemblerLib.MeshEnvironment.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.MeshEnvironment.#ctor(Rhino.Geometry.Mesh,System.Int32)
      commentId: M:AssemblerLib.MeshEnvironment.#ctor(Rhino.Geometry.Mesh,System.Int32)
      language: CSharp
      name:
        CSharp: MeshEnvironment(Mesh, Int32)
        VB: MeshEnvironment(Mesh, Int32)
      nameWithType:
        CSharp: MeshEnvironment.MeshEnvironment(Mesh, Int32)
        VB: MeshEnvironment.MeshEnvironment(Mesh, Int32)
      qualifiedName:
        CSharp: AssemblerLib.MeshEnvironment.MeshEnvironment(Rhino.Geometry.Mesh, System.Int32)
        VB: AssemblerLib.MeshEnvironment.MeshEnvironment(Rhino.Geometry.Mesh, System.Int32)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/MeshEnvironment.cs
        id: .ctor
        path: MeshEnvironment.cs
        startLine: 35
      summary: "\nConstructs a MeshEnvironment from a Mesh and an explicit type\n"
      example: []
      syntax:
        content:
          CSharp: public MeshEnvironment(Mesh mesh, int type)
          VB: Public Sub New(mesh As Mesh, type As Integer)
        parameters:
        - id: mesh
          type: Rhino.Geometry.Mesh
          description: ''
        - id: type
          type: System.Int32
          description: ''
      overload: AssemblerLib.MeshEnvironment.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.MeshEnvironment.IsPointInside(Rhino.Geometry.Point3d,System.Double)
      commentId: M:AssemblerLib.MeshEnvironment.IsPointInside(Rhino.Geometry.Point3d,System.Double)
      language: CSharp
      name:
        CSharp: IsPointInside(Point3d, Double)
        VB: IsPointInside(Point3d, Double)
      nameWithType:
        CSharp: MeshEnvironment.IsPointInside(Point3d, Double)
        VB: MeshEnvironment.IsPointInside(Point3d, Double)
      qualifiedName:
        CSharp: AssemblerLib.MeshEnvironment.IsPointInside(Rhino.Geometry.Point3d, System.Double)
        VB: AssemblerLib.MeshEnvironment.IsPointInside(Rhino.Geometry.Point3d, System.Double)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/MeshEnvironment.cs
        id: IsPointInside
        path: MeshEnvironment.cs
        startLine: 50
      summary: "\nChecks if point P is inside by checking angle of projection vector with face normal\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsPointInside(Point3d P, double maxDist)
          VB: Public Function IsPointInside(P As Point3d, maxDist As Double) As Boolean
        parameters:
        - id: P
          type: Rhino.Geometry.Point3d
          description: the point to check
        - id: maxDist
          type: System.Double
          description: maximum distance for inclusion check
        return:
          type: System.Boolean
          description: true if point is inside the mesh
      overload: AssemblerLib.MeshEnvironment.IsPointInside*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.MeshEnvironment.CollisionCheck(Rhino.Geometry.Mesh)
      commentId: M:AssemblerLib.MeshEnvironment.CollisionCheck(Rhino.Geometry.Mesh)
      language: CSharp
      name:
        CSharp: CollisionCheck(Mesh)
        VB: CollisionCheck(Mesh)
      nameWithType:
        CSharp: MeshEnvironment.CollisionCheck(Mesh)
        VB: MeshEnvironment.CollisionCheck(Mesh)
      qualifiedName:
        CSharp: AssemblerLib.MeshEnvironment.CollisionCheck(Rhino.Geometry.Mesh)
        VB: AssemblerLib.MeshEnvironment.CollisionCheck(Rhino.Geometry.Mesh)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/MeshEnvironment.cs
        id: CollisionCheck
        path: MeshEnvironment.cs
        startLine: 79
      summary: "\nChecks for collision with a given Mesh\n"
      example: []
      syntax:
        content:
          CSharp: public bool CollisionCheck(Mesh m)
          VB: Public Function CollisionCheck(m As Mesh) As Boolean
        parameters:
        - id: m
          type: Rhino.Geometry.Mesh
          description: ''
        return:
          type: System.Boolean
          description: true if collision happens
      overload: AssemblerLib.MeshEnvironment.CollisionCheck*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: AssemblerLib.MeshEnvironment.Type
    commentId: T:AssemblerLib.MeshEnvironment.Type
    language: CSharp
    name:
      CSharp: MeshEnvironment.Type
      VB: MeshEnvironment.Type
    nameWithType:
      CSharp: MeshEnvironment.Type
      VB: MeshEnvironment.Type
    qualifiedName:
      CSharp: AssemblerLib.MeshEnvironment.Type
      VB: AssemblerLib.MeshEnvironment.Type
    type: Enum
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/MeshEnvironment.cs
      id: Type
      path: MeshEnvironment.cs
      startLine: 16
    syntax:
      content:
        CSharp: 'public enum Type : ushort'
        VB: Public Enum Type As UShort
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: AssemblerLib.MeshEnvironment.Type.Solid
      commentId: F:AssemblerLib.MeshEnvironment.Type.Solid
      language: CSharp
      name:
        CSharp: Solid
        VB: Solid
      nameWithType:
        CSharp: MeshEnvironment.Type.Solid
        VB: MeshEnvironment.Type.Solid
      qualifiedName:
        CSharp: AssemblerLib.MeshEnvironment.Type.Solid
        VB: AssemblerLib.MeshEnvironment.Type.Solid
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/MeshEnvironment.cs
        id: Solid
        path: MeshEnvironment.cs
        startLine: 16
      syntax:
        content:
          CSharp: Solid = 0
          VB: Solid = 0
        return:
          type: AssemblerLib.MeshEnvironment.Type
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: AssemblerLib.MeshEnvironment.Type.Void
      commentId: F:AssemblerLib.MeshEnvironment.Type.Void
      language: CSharp
      name:
        CSharp: Void
        VB: Void
      nameWithType:
        CSharp: MeshEnvironment.Type.Void
        VB: MeshEnvironment.Type.Void
      qualifiedName:
        CSharp: AssemblerLib.MeshEnvironment.Type.Void
        VB: AssemblerLib.MeshEnvironment.Type.Void
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/MeshEnvironment.cs
        id: Void
        path: MeshEnvironment.cs
        startLine: 16
      syntax:
        content:
          CSharp: Void = 1
          VB: Void = 1
        return:
          type: AssemblerLib.MeshEnvironment.Type
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: AssemblerLib.MeshEnvironment.Type.Container
      commentId: F:AssemblerLib.MeshEnvironment.Type.Container
      language: CSharp
      name:
        CSharp: Container
        VB: Container
      nameWithType:
        CSharp: MeshEnvironment.Type.Container
        VB: MeshEnvironment.Type.Container
      qualifiedName:
        CSharp: AssemblerLib.MeshEnvironment.Type.Container
        VB: AssemblerLib.MeshEnvironment.Type.Container
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/MeshEnvironment.cs
        id: Container
        path: MeshEnvironment.cs
        startLine: 16
      syntax:
        content:
          CSharp: Container = 2
          VB: Container = 2
        return:
          type: AssemblerLib.MeshEnvironment.Type
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: AssemblerLib.Rule
    commentId: T:AssemblerLib.Rule
    language: CSharp
    name:
      CSharp: Rule
      VB: Rule
    nameWithType:
      CSharp: Rule
      VB: Rule
    qualifiedName:
      CSharp: AssemblerLib.Rule
      VB: AssemblerLib.Rule
    type: Struct
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
      id: Rule
      path: Rule.cs
      startLine: 8
    summary: "\nStructure storing indexes to automate Assemblage operations\n"
    example: []
    syntax:
      content:
        CSharp: public struct Rule
        VB: Public Structure Rule
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: AssemblerLib.Rule.senderName
      commentId: F:AssemblerLib.Rule.senderName
      language: CSharp
      name:
        CSharp: senderName
        VB: senderName
      nameWithType:
        CSharp: Rule.senderName
        VB: Rule.senderName
      qualifiedName:
        CSharp: AssemblerLib.Rule.senderName
        VB: AssemblerLib.Rule.senderName
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: senderName
        path: Rule.cs
        startLine: 13
      summary: "\nSender object name\n"
      example: []
      syntax:
        content:
          CSharp: public readonly string senderName
          VB: Public ReadOnly senderName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.Rule.receiverName
      commentId: F:AssemblerLib.Rule.receiverName
      language: CSharp
      name:
        CSharp: receiverName
        VB: receiverName
      nameWithType:
        CSharp: Rule.receiverName
        VB: Rule.receiverName
      qualifiedName:
        CSharp: AssemblerLib.Rule.receiverName
        VB: AssemblerLib.Rule.receiverName
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: receiverName
        path: Rule.cs
        startLine: 17
      summary: "\nReceiver object name\n"
      example: []
      syntax:
        content:
          CSharp: public readonly string receiverName
          VB: Public ReadOnly receiverName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.Rule.sT
      commentId: F:AssemblerLib.Rule.sT
      language: CSharp
      name:
        CSharp: sT
        VB: sT
      nameWithType:
        CSharp: Rule.sT
        VB: Rule.sT
      qualifiedName:
        CSharp: AssemblerLib.Rule.sT
        VB: AssemblerLib.Rule.sT
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: sT
        path: Rule.cs
        startLine: 21
      summary: "\nsender object type\n"
      example: []
      syntax:
        content:
          CSharp: public readonly int sT
          VB: Public ReadOnly sT As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.Rule.sH
      commentId: F:AssemblerLib.Rule.sH
      language: CSharp
      name:
        CSharp: sH
        VB: sH
      nameWithType:
        CSharp: Rule.sH
        VB: Rule.sH
      qualifiedName:
        CSharp: AssemblerLib.Rule.sH
        VB: AssemblerLib.Rule.sH
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: sH
        path: Rule.cs
        startLine: 25
      summary: "\nsender handle index\n"
      example: []
      syntax:
        content:
          CSharp: public readonly int sH
          VB: Public ReadOnly sH As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.Rule.rT
      commentId: F:AssemblerLib.Rule.rT
      language: CSharp
      name:
        CSharp: rT
        VB: rT
      nameWithType:
        CSharp: Rule.rT
        VB: Rule.rT
      qualifiedName:
        CSharp: AssemblerLib.Rule.rT
        VB: AssemblerLib.Rule.rT
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: rT
        path: Rule.cs
        startLine: 29
      summary: "\nreceiver object type\n"
      example: []
      syntax:
        content:
          CSharp: public readonly int rT
          VB: Public ReadOnly rT As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.Rule.rH
      commentId: F:AssemblerLib.Rule.rH
      language: CSharp
      name:
        CSharp: rH
        VB: rH
      nameWithType:
        CSharp: Rule.rH
        VB: Rule.rH
      qualifiedName:
        CSharp: AssemblerLib.Rule.rH
        VB: AssemblerLib.Rule.rH
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: rH
        path: Rule.cs
        startLine: 33
      summary: "\nreceiver handle index\n"
      example: []
      syntax:
        content:
          CSharp: public readonly int rH
          VB: Public ReadOnly rH As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.Rule.rR
      commentId: F:AssemblerLib.Rule.rR
      language: CSharp
      name:
        CSharp: rR
        VB: rR
      nameWithType:
        CSharp: Rule.rR
        VB: Rule.rR
      qualifiedName:
        CSharp: AssemblerLib.Rule.rR
        VB: AssemblerLib.Rule.rR
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: rR
        path: Rule.cs
        startLine: 37
      summary: "\nreceiver rotation index\n"
      example: []
      syntax:
        content:
          CSharp: public readonly int rR
          VB: Public ReadOnly rR As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.Rule.rRA
      commentId: F:AssemblerLib.Rule.rRA
      language: CSharp
      name:
        CSharp: rRA
        VB: rRA
      nameWithType:
        CSharp: Rule.rRA
        VB: Rule.rRA
      qualifiedName:
        CSharp: AssemblerLib.Rule.rRA
        VB: AssemblerLib.Rule.rRA
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: rRA
        path: Rule.cs
        startLine: 41
      summary: "\nreceiver rotation angle (in degrees)\n"
      example: []
      syntax:
        content:
          CSharp: public readonly double rRA
          VB: Public ReadOnly rRA As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.Rule.iWeight
      commentId: F:AssemblerLib.Rule.iWeight
      language: CSharp
      name:
        CSharp: iWeight
        VB: iWeight
      nameWithType:
        CSharp: Rule.iWeight
        VB: Rule.iWeight
      qualifiedName:
        CSharp: AssemblerLib.Rule.iWeight
        VB: AssemblerLib.Rule.iWeight
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: iWeight
        path: Rule.cs
        startLine: 45
      summary: "\ninteger weight\n"
      example: []
      syntax:
        content:
          CSharp: public readonly int iWeight
          VB: Public ReadOnly iWeight As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.Rule.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.Int32,System.Int32,System.Int32)
      commentId: M:AssemblerLib.Rule.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Rule(String, Int32, Int32, Int32, Double, String, Int32, Int32, Int32)
        VB: Rule(String, Int32, Int32, Int32, Double, String, Int32, Int32, Int32)
      nameWithType:
        CSharp: Rule.Rule(String, Int32, Int32, Int32, Double, String, Int32, Int32, Int32)
        VB: Rule.Rule(String, Int32, Int32, Int32, Double, String, Int32, Int32, Int32)
      qualifiedName:
        CSharp: AssemblerLib.Rule.Rule(System.String, System.Int32, System.Int32, System.Int32, System.Double, System.String, System.Int32, System.Int32, System.Int32)
        VB: AssemblerLib.Rule.Rule(System.String, System.Int32, System.Int32, System.Int32, System.Double, System.String, System.Int32, System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: .ctor
        path: Rule.cs
        startLine: 59
      summary: "\nConstructs a Rule from constituting parameters\n"
      example: []
      syntax:
        content:
          CSharp: public Rule(string receiverName, int rT, int rH, int rR, double rRA, string senderName, int sT, int sH, int iWeight)
          VB: Public Sub New(receiverName As String, rT As Integer, rH As Integer, rR As Integer, rRA As Double, senderName As String, sT As Integer, sH As Integer, iWeight As Integer)
        parameters:
        - id: receiverName
          type: System.String
          description: ''
        - id: rT
          type: System.Int32
          description: ''
        - id: rH
          type: System.Int32
          description: ''
        - id: rR
          type: System.Int32
          description: ''
        - id: rRA
          type: System.Double
          description: ''
        - id: senderName
          type: System.String
          description: ''
        - id: sT
          type: System.Int32
          description: ''
        - id: sH
          type: System.Int32
          description: ''
        - id: iWeight
          type: System.Int32
          description: ''
      overload: AssemblerLib.Rule.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Rule.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)
      commentId: M:AssemblerLib.Rule.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Rule(Int32, Int32, Int32, Double, Int32, Int32)
        VB: Rule(Int32, Int32, Int32, Double, Int32, Int32)
      nameWithType:
        CSharp: Rule.Rule(Int32, Int32, Int32, Double, Int32, Int32)
        VB: Rule.Rule(Int32, Int32, Int32, Double, Int32, Int32)
      qualifiedName:
        CSharp: AssemblerLib.Rule.Rule(System.Int32, System.Int32, System.Int32, System.Double, System.Int32, System.Int32)
        VB: AssemblerLib.Rule.Rule(System.Int32, System.Int32, System.Int32, System.Double, System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: .ctor
        path: Rule.cs
        startLine: 81
      summary: "\nConstruct a Rule from basic parameters\n"
      example: []
      syntax:
        content:
          CSharp: public Rule(int rT, int rH, int rR, double rRA, int sT, int sH)
          VB: Public Sub New(rT As Integer, rH As Integer, rR As Integer, rRA As Double, sT As Integer, sH As Integer)
        parameters:
        - id: rT
          type: System.Int32
          description: ''
        - id: rH
          type: System.Int32
          description: ''
        - id: rR
          type: System.Int32
          description: ''
        - id: rRA
          type: System.Double
          description: ''
        - id: sT
          type: System.Int32
          description: ''
        - id: sH
          type: System.Int32
          description: ''
      overload: AssemblerLib.Rule.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Rule.#ctor(System.String,System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32})
      commentId: M:AssemblerLib.Rule.#ctor(System.String,System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32})
      language: CSharp
      name:
        CSharp: Rule(String, List<AssemblyObject>, Dictionary<String, Int32>)
        VB: Rule(String, List(Of AssemblyObject), Dictionary(Of String, Int32))
      nameWithType:
        CSharp: Rule.Rule(String, List<AssemblyObject>, Dictionary<String, Int32>)
        VB: Rule.Rule(String, List(Of AssemblyObject), Dictionary(Of String, Int32))
      qualifiedName:
        CSharp: AssemblerLib.Rule.Rule(System.String, System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.Collections.Generic.Dictionary<System.String, System.Int32>)
        VB: AssemblerLib.Rule.Rule(System.String, System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.Collections.Generic.Dictionary(Of System.String, System.Int32))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: .ctor
        path: Rule.cs
        startLine: 92
      summary: "\nConstruct a Rule from a string, the AssemblyObject set and the Component Dictionary\n"
      example: []
      syntax:
        content:
          CSharp: public Rule(string rString, List<AssemblyObject> AOset, Dictionary<string, int> componentDictionary)
          VB: Public Sub New(rString As String, AOset As List(Of AssemblyObject), componentDictionary As Dictionary(Of String, Integer))
        parameters:
        - id: rString
          type: System.String
          description: ''
        - id: AOset
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        - id: componentDictionary
          type: System.Collections.Generic.Dictionary{System.String,System.Int32}
          description: ''
      overload: AssemblerLib.Rule.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Rule.ToString
      commentId: M:AssemblerLib.Rule.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Rule.ToString()
        VB: Rule.ToString()
      qualifiedName:
        CSharp: AssemblerLib.Rule.ToString()
        VB: AssemblerLib.Rule.ToString()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Rule.cs
        id: ToString
        path: Rule.cs
        startLine: 119
      summary: "\nConverts a Rule into a corresponding string\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: ''
      overload: AssemblerLib.Rule.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: AssemblerLib.Support
    commentId: T:AssemblerLib.Support
    language: CSharp
    name:
      CSharp: Support
      VB: Support
    nameWithType:
      CSharp: Support
      VB: Support
    qualifiedName:
      CSharp: AssemblerLib.Support
      VB: AssemblerLib.Support
    type: Struct
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Support.cs
      id: Support
      path: Support.cs
      startLine: 10
    summary: "\nSupport class for embedded structural consistency\n"
    example: []
    syntax:
      content:
        CSharp: public struct Support
        VB: Public Structure Support
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: AssemblerLib.Support.line
      commentId: F:AssemblerLib.Support.line
      language: CSharp
      name:
        CSharp: line
        VB: line
      nameWithType:
        CSharp: Support.line
        VB: Support.line
      qualifiedName:
        CSharp: AssemblerLib.Support.line
        VB: AssemblerLib.Support.line
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Support.cs
        id: line
        path: Support.cs
        startLine: 15
      summary: "\nSupport line\n"
      example: []
      syntax:
        content:
          CSharp: public Line line
          VB: Public line As Line
        return:
          type: Rhino.Geometry.Line
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Support.initLength
      commentId: F:AssemblerLib.Support.initLength
      language: CSharp
      name:
        CSharp: initLength
        VB: initLength
      nameWithType:
        CSharp: Support.initLength
        VB: Support.initLength
      qualifiedName:
        CSharp: AssemblerLib.Support.initLength
        VB: AssemblerLib.Support.initLength
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Support.cs
        id: initLength
        path: Support.cs
        startLine: 20
      summary: "\ninitial length of the support\n"
      example: []
      syntax:
        content:
          CSharp: public readonly double initLength
          VB: Public ReadOnly initLength As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.Support.connected
      commentId: F:AssemblerLib.Support.connected
      language: CSharp
      name:
        CSharp: connected
        VB: connected
      nameWithType:
        CSharp: Support.connected
        VB: Support.connected
      qualifiedName:
        CSharp: AssemblerLib.Support.connected
        VB: AssemblerLib.Support.connected
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Support.cs
        id: connected
        path: Support.cs
        startLine: 25
      summary: "\nconnected flag - true if support intersects a nearby geometry\n"
      example: []
      syntax:
        content:
          CSharp: public bool connected
          VB: Public connected As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Support.neighbourObject
      commentId: F:AssemblerLib.Support.neighbourObject
      language: CSharp
      name:
        CSharp: neighbourObject
        VB: neighbourObject
      nameWithType:
        CSharp: Support.neighbourObject
        VB: Support.neighbourObject
      qualifiedName:
        CSharp: AssemblerLib.Support.neighbourObject
        VB: AssemblerLib.Support.neighbourObject
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Support.cs
        id: neighbourObject
        path: Support.cs
        startLine: 30
      summary: "\nIndex of neighbour AssemblyObject connected by the support; -1 if free, -2 if connected to other entities (i.e. an external object)\n"
      example: []
      syntax:
        content:
          CSharp: public int neighbourObject
          VB: Public neighbourObject As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Support.#ctor(AssemblerLib.Support)
      commentId: M:AssemblerLib.Support.#ctor(AssemblerLib.Support)
      language: CSharp
      name:
        CSharp: Support(Support)
        VB: Support(Support)
      nameWithType:
        CSharp: Support.Support(Support)
        VB: Support.Support(Support)
      qualifiedName:
        CSharp: AssemblerLib.Support.Support(AssemblerLib.Support)
        VB: AssemblerLib.Support.Support(AssemblerLib.Support)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Support.cs
        id: .ctor
        path: Support.cs
        startLine: 36
      summary: "\nConstruct a support from another Support (deep copy)\n"
      example: []
      syntax:
        content:
          CSharp: public Support(Support other)
          VB: Public Sub New(other As Support)
        parameters:
        - id: other
          type: AssemblerLib.Support
          description: ''
      overload: AssemblerLib.Support.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Support.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Double)
      commentId: M:AssemblerLib.Support.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Double)
      language: CSharp
      name:
        CSharp: Support(Point3d, Vector3d, Double)
        VB: Support(Point3d, Vector3d, Double)
      nameWithType:
        CSharp: Support.Support(Point3d, Vector3d, Double)
        VB: Support.Support(Point3d, Vector3d, Double)
      qualifiedName:
        CSharp: AssemblerLib.Support.Support(Rhino.Geometry.Point3d, Rhino.Geometry.Vector3d, System.Double)
        VB: AssemblerLib.Support.Support(Rhino.Geometry.Point3d, Rhino.Geometry.Vector3d, System.Double)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Support.cs
        id: .ctor
        path: Support.cs
        startLine: 50
      summary: "\nConstruct a support from origin point, direction vector and length\n"
      example: []
      syntax:
        content:
          CSharp: public Support(Point3d origin, Vector3d direction, double length)
          VB: Public Sub New(origin As Point3d, direction As Vector3d, length As Double)
        parameters:
        - id: origin
          type: Rhino.Geometry.Point3d
          description: ''
        - id: direction
          type: Rhino.Geometry.Vector3d
          description: ''
        - id: length
          type: System.Double
          description: ''
      overload: AssemblerLib.Support.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Support.#ctor(Rhino.Geometry.Line)
      commentId: M:AssemblerLib.Support.#ctor(Rhino.Geometry.Line)
      language: CSharp
      name:
        CSharp: Support(Line)
        VB: Support(Line)
      nameWithType:
        CSharp: Support.Support(Line)
        VB: Support.Support(Line)
      qualifiedName:
        CSharp: AssemblerLib.Support.Support(Rhino.Geometry.Line)
        VB: AssemblerLib.Support.Support(Rhino.Geometry.Line)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Support.cs
        id: .ctor
        path: Support.cs
        startLine: 62
      summary: "\nConstruct a support from a line\n"
      example: []
      syntax:
        content:
          CSharp: public Support(Line line)
          VB: Public Sub New(line As Line)
        parameters:
        - id: line
          type: Rhino.Geometry.Line
          description: ''
      overload: AssemblerLib.Support.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Support.Reset
      commentId: M:AssemblerLib.Support.Reset
      language: CSharp
      name:
        CSharp: Reset()
        VB: Reset()
      nameWithType:
        CSharp: Support.Reset()
        VB: Support.Reset()
      qualifiedName:
        CSharp: AssemblerLib.Support.Reset()
        VB: AssemblerLib.Support.Reset()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Support.cs
        id: Reset
        path: Support.cs
        startLine: 73
      summary: "\nResets support to initial length value and resets connectivity data\n"
      example: []
      syntax:
        content:
          CSharp: public void Reset()
          VB: Public Sub Reset
      overload: AssemblerLib.Support.Reset*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Support.Transform(Rhino.Geometry.Transform)
      commentId: M:AssemblerLib.Support.Transform(Rhino.Geometry.Transform)
      language: CSharp
      name:
        CSharp: Transform(Transform)
        VB: Transform(Transform)
      nameWithType:
        CSharp: Support.Transform(Transform)
        VB: Support.Transform(Transform)
      qualifiedName:
        CSharp: AssemblerLib.Support.Transform(Rhino.Geometry.Transform)
        VB: AssemblerLib.Support.Transform(Rhino.Geometry.Transform)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Support.cs
        id: Transform
        path: Support.cs
        startLine: 85
      summary: "\nTransform Support using a generic Transformation\n"
      example: []
      syntax:
        content:
          CSharp: public void Transform(Transform xForm)
          VB: Public Sub Transform(xForm As Transform)
        parameters:
        - id: xForm
          type: Rhino.Geometry.Transform
          description: ''
      overload: AssemblerLib.Support.Transform*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: AssemblerLib.Tensor
    commentId: T:AssemblerLib.Tensor
    language: CSharp
    name:
      CSharp: Tensor
      VB: Tensor
    nameWithType:
      CSharp: Tensor
      VB: Tensor
    qualifiedName:
      CSharp: AssemblerLib.Tensor
      VB: AssemblerLib.Tensor
    type: Class
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
      id: Tensor
      path: Tensor.cs
      startLine: 8
    summary: "\nStores a lists of scalar, vector and integer weights values\n"
    example: []
    syntax:
      content:
        CSharp: public class Tensor
        VB: Public Class Tensor
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: AssemblerLib.Tensor.scalar
      commentId: F:AssemblerLib.Tensor.scalar
      language: CSharp
      name:
        CSharp: scalar
        VB: scalar
      nameWithType:
        CSharp: Tensor.scalar
        VB: Tensor.scalar
      qualifiedName:
        CSharp: AssemblerLib.Tensor.scalar
        VB: AssemblerLib.Tensor.scalar
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: scalar
        path: Tensor.cs
        startLine: 14
      summary: "\nArray of scalar values\n"
      example: []
      syntax:
        content:
          CSharp: public double[] scalar
          VB: Public scalar As Double()
        return:
          type: System.Double[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.vector
      commentId: F:AssemblerLib.Tensor.vector
      language: CSharp
      name:
        CSharp: vector
        VB: vector
      nameWithType:
        CSharp: Tensor.vector
        VB: Tensor.vector
      qualifiedName:
        CSharp: AssemblerLib.Tensor.vector
        VB: AssemblerLib.Tensor.vector
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: vector
        path: Tensor.cs
        startLine: 18
      summary: "\nArray of Vector values\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3d[] vector
          VB: Public vector As Vector3d()
        return:
          type: Rhino.Geometry.Vector3d[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.iWeights
      commentId: F:AssemblerLib.Tensor.iWeights
      language: CSharp
      name:
        CSharp: iWeights
        VB: iWeights
      nameWithType:
        CSharp: Tensor.iWeights
        VB: Tensor.iWeights
      qualifiedName:
        CSharp: AssemblerLib.Tensor.iWeights
        VB: AssemblerLib.Tensor.iWeights
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: iWeights
        path: Tensor.cs
        startLine: 22
      summary: "\nArray of integer weights\n"
      example: []
      syntax:
        content:
          CSharp: public int[] iWeights
          VB: Public iWeights As Integer()
        return:
          type: System.Int32[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.#ctor(System.Double[],Rhino.Geometry.Vector3d[],System.Int32[])
      commentId: M:AssemblerLib.Tensor.#ctor(System.Double[],Rhino.Geometry.Vector3d[],System.Int32[])
      language: CSharp
      name:
        CSharp: Tensor(Double[], Vector3d[], Int32[])
        VB: Tensor(Double(), Vector3d(), Int32())
      nameWithType:
        CSharp: Tensor.Tensor(Double[], Vector3d[], Int32[])
        VB: Tensor.Tensor(Double(), Vector3d(), Int32())
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Tensor(System.Double[], Rhino.Geometry.Vector3d[], System.Int32[])
        VB: AssemblerLib.Tensor.Tensor(System.Double(), Rhino.Geometry.Vector3d(), System.Int32())
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: .ctor
        path: Tensor.cs
        startLine: 36
      summary: "\nConstructs a Tensor from constituting parameters\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor(double[] scalar, Vector3d[] vector, int[] iWeights)
          VB: Public Sub New(scalar As Double(), vector As Vector3d(), iWeights As Integer())
        parameters:
        - id: scalar
          type: System.Double[]
          description: ''
        - id: vector
          type: Rhino.Geometry.Vector3d[]
          description: ''
        - id: iWeights
          type: System.Int32[]
          description: ''
      overload: AssemblerLib.Tensor.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Int32[])
      commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Int32[])
      language: CSharp
      name:
        CSharp: Tensor(List<Double>, List<Vector3d>, Int32[])
        VB: Tensor(List(Of Double), List(Of Vector3d), Int32())
      nameWithType:
        CSharp: Tensor.Tensor(List<Double>, List<Vector3d>, Int32[])
        VB: Tensor.Tensor(List(Of Double), List(Of Vector3d), Int32())
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>, System.Int32[])
        VB: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d), System.Int32())
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: .ctor
        path: Tensor.cs
        startLine: 49
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor(List<double> scalar, List<Vector3d> vector, int[] iWeights)
          VB: Public Sub New(scalar As List(Of Double), vector As List(Of Vector3d), iWeights As Integer())
        parameters:
        - id: scalar
          type: System.Collections.Generic.List{System.Double}
          description: ''
        - id: vector
          type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
          description: ''
        - id: iWeights
          type: System.Int32[]
          description: ''
      overload: AssemblerLib.Tensor.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Collections.Generic.List{System.Int32})
      commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d},System.Collections.Generic.List{System.Int32})
      language: CSharp
      name:
        CSharp: Tensor(List<Double>, List<Vector3d>, List<Int32>)
        VB: Tensor(List(Of Double), List(Of Vector3d), List(Of Int32))
      nameWithType:
        CSharp: Tensor.Tensor(List<Double>, List<Vector3d>, List<Int32>)
        VB: Tensor.Tensor(List(Of Double), List(Of Vector3d), List(Of Int32))
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>, System.Collections.Generic.List<System.Int32>)
        VB: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d), System.Collections.Generic.List(Of System.Int32))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: .ctor
        path: Tensor.cs
        startLine: 58
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor(List<double> scalar, List<Vector3d> vector, List<int> iWeights)
          VB: Public Sub New(scalar As List(Of Double), vector As List(Of Vector3d), iWeights As List(Of Integer))
        parameters:
        - id: scalar
          type: System.Collections.Generic.List{System.Double}
          description: ''
        - id: vector
          type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
          description: ''
        - id: iWeights
          type: System.Collections.Generic.List{System.Int32}
          description: ''
      overload: AssemblerLib.Tensor.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.#ctor(System.Double[],Rhino.Geometry.Vector3d[])
      commentId: M:AssemblerLib.Tensor.#ctor(System.Double[],Rhino.Geometry.Vector3d[])
      language: CSharp
      name:
        CSharp: Tensor(Double[], Vector3d[])
        VB: Tensor(Double(), Vector3d())
      nameWithType:
        CSharp: Tensor.Tensor(Double[], Vector3d[])
        VB: Tensor.Tensor(Double(), Vector3d())
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Tensor(System.Double[], Rhino.Geometry.Vector3d[])
        VB: AssemblerLib.Tensor.Tensor(System.Double(), Rhino.Geometry.Vector3d())
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: .ctor
        path: Tensor.cs
        startLine: 66
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor(double[] scalar, Vector3d[] vector)
          VB: Public Sub New(scalar As Double(), vector As Vector3d())
        parameters:
        - id: scalar
          type: System.Double[]
          description: ''
        - id: vector
          type: Rhino.Geometry.Vector3d[]
          description: ''
      overload: AssemblerLib.Tensor.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      language: CSharp
      name:
        CSharp: Tensor(List<Double>, List<Vector3d>)
        VB: Tensor(List(Of Double), List(Of Vector3d))
      nameWithType:
        CSharp: Tensor.Tensor(List<Double>, List<Vector3d>)
        VB: Tensor.Tensor(List(Of Double), List(Of Vector3d))
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
        VB: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: .ctor
        path: Tensor.cs
        startLine: 77
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor(List<double> scalar, List<Vector3d> vector)
          VB: Public Sub New(scalar As List(Of Double), vector As List(Of Vector3d))
        parameters:
        - id: scalar
          type: System.Collections.Generic.List{System.Double}
          description: ''
        - id: vector
          type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
          description: ''
      overload: AssemblerLib.Tensor.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.#ctor(System.Double[])
      commentId: M:AssemblerLib.Tensor.#ctor(System.Double[])
      language: CSharp
      name:
        CSharp: Tensor(Double[])
        VB: Tensor(Double())
      nameWithType:
        CSharp: Tensor.Tensor(Double[])
        VB: Tensor.Tensor(Double())
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Tensor(System.Double[])
        VB: AssemblerLib.Tensor.Tensor(System.Double())
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: .ctor
        path: Tensor.cs
        startLine: 84
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor(double[] scalar)
          VB: Public Sub New(scalar As Double())
        parameters:
        - id: scalar
          type: System.Double[]
          description: ''
      overload: AssemblerLib.Tensor.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double})
      commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Double})
      language: CSharp
      name:
        CSharp: Tensor(List<Double>)
        VB: Tensor(List(Of Double))
      nameWithType:
        CSharp: Tensor.Tensor(List<Double>)
        VB: Tensor.Tensor(List(Of Double))
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<System.Double>)
        VB: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of System.Double))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: .ctor
        path: Tensor.cs
        startLine: 93
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor(List<double> scalar)
          VB: Public Sub New(scalar As List(Of Double))
        parameters:
        - id: scalar
          type: System.Collections.Generic.List{System.Double}
          description: ''
      overload: AssemblerLib.Tensor.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.#ctor(Rhino.Geometry.Vector3d[])
      commentId: M:AssemblerLib.Tensor.#ctor(Rhino.Geometry.Vector3d[])
      language: CSharp
      name:
        CSharp: Tensor(Vector3d[])
        VB: Tensor(Vector3d())
      nameWithType:
        CSharp: Tensor.Tensor(Vector3d[])
        VB: Tensor.Tensor(Vector3d())
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Tensor(Rhino.Geometry.Vector3d[])
        VB: AssemblerLib.Tensor.Tensor(Rhino.Geometry.Vector3d())
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: .ctor
        path: Tensor.cs
        startLine: 100
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor(Vector3d[] vector)
          VB: Public Sub New(vector As Vector3d())
        parameters:
        - id: vector
          type: Rhino.Geometry.Vector3d[]
          description: ''
      overload: AssemblerLib.Tensor.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      language: CSharp
      name:
        CSharp: Tensor(List<Vector3d>)
        VB: Tensor(List(Of Vector3d))
      nameWithType:
        CSharp: Tensor.Tensor(List<Vector3d>)
        VB: Tensor.Tensor(List(Of Vector3d))
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
        VB: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: .ctor
        path: Tensor.cs
        startLine: 109
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor(List<Vector3d> vector)
          VB: Public Sub New(vector As List(Of Vector3d))
        parameters:
        - id: vector
          type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
          description: ''
      overload: AssemblerLib.Tensor.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Int32})
      commentId: M:AssemblerLib.Tensor.#ctor(System.Collections.Generic.List{System.Int32})
      language: CSharp
      name:
        CSharp: Tensor(List<Int32>)
        VB: Tensor(List(Of Int32))
      nameWithType:
        CSharp: Tensor.Tensor(List<Int32>)
        VB: Tensor.Tensor(List(Of Int32))
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List<System.Int32>)
        VB: AssemblerLib.Tensor.Tensor(System.Collections.Generic.List(Of System.Int32))
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: .ctor
        path: Tensor.cs
        startLine: 116
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor(List<int> iWeights)
          VB: Public Sub New(iWeights As List(Of Integer))
        parameters:
        - id: iWeights
          type: System.Collections.Generic.List{System.Int32}
          description: ''
      overload: AssemblerLib.Tensor.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.#ctor(System.Int32[])
      commentId: M:AssemblerLib.Tensor.#ctor(System.Int32[])
      language: CSharp
      name:
        CSharp: Tensor(Int32[])
        VB: Tensor(Int32())
      nameWithType:
        CSharp: Tensor.Tensor(Int32[])
        VB: Tensor.Tensor(Int32())
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Tensor(System.Int32[])
        VB: AssemblerLib.Tensor.Tensor(System.Int32())
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: .ctor
        path: Tensor.cs
        startLine: 125
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Tensor(int[] iWeights)
          VB: Public Sub New(iWeights As Integer())
        parameters:
        - id: iWeights
          type: System.Int32[]
          description: ''
      overload: AssemblerLib.Tensor.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.GetScalar
      commentId: M:AssemblerLib.Tensor.GetScalar
      language: CSharp
      name:
        CSharp: GetScalar()
        VB: GetScalar()
      nameWithType:
        CSharp: Tensor.GetScalar()
        VB: Tensor.GetScalar()
      qualifiedName:
        CSharp: AssemblerLib.Tensor.GetScalar()
        VB: AssemblerLib.Tensor.GetScalar()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: GetScalar
        path: Tensor.cs
        startLine: 134
      summary: "\nGets first scalar value\n"
      example: []
      syntax:
        content:
          CSharp: public double GetScalar()
          VB: Public Function GetScalar As Double
        return:
          type: System.Double
          description: ''
      overload: AssemblerLib.Tensor.GetScalar*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.GetVector
      commentId: M:AssemblerLib.Tensor.GetVector
      language: CSharp
      name:
        CSharp: GetVector()
        VB: GetVector()
      nameWithType:
        CSharp: Tensor.GetVector()
        VB: Tensor.GetVector()
      qualifiedName:
        CSharp: AssemblerLib.Tensor.GetVector()
        VB: AssemblerLib.Tensor.GetVector()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: GetVector
        path: Tensor.cs
        startLine: 143
      summary: "\nGets first Vector value\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3d GetVector()
          VB: Public Function GetVector As Vector3d
        return:
          type: Rhino.Geometry.Vector3d
          description: ''
      overload: AssemblerLib.Tensor.GetVector*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.GetScalars
      commentId: M:AssemblerLib.Tensor.GetScalars
      language: CSharp
      name:
        CSharp: GetScalars()
        VB: GetScalars()
      nameWithType:
        CSharp: Tensor.GetScalars()
        VB: Tensor.GetScalars()
      qualifiedName:
        CSharp: AssemblerLib.Tensor.GetScalars()
        VB: AssemblerLib.Tensor.GetScalars()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: GetScalars
        path: Tensor.cs
        startLine: 152
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public double[] GetScalars()
          VB: Public Function GetScalars As Double()
        return:
          type: System.Double[]
          description: ''
      overload: AssemblerLib.Tensor.GetScalars*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.GetVectors
      commentId: M:AssemblerLib.Tensor.GetVectors
      language: CSharp
      name:
        CSharp: GetVectors()
        VB: GetVectors()
      nameWithType:
        CSharp: Tensor.GetVectors()
        VB: Tensor.GetVectors()
      qualifiedName:
        CSharp: AssemblerLib.Tensor.GetVectors()
        VB: AssemblerLib.Tensor.GetVectors()
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: GetVectors
        path: Tensor.cs
        startLine: 161
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3d[] GetVectors()
          VB: Public Function GetVectors As Vector3d()
        return:
          type: Rhino.Geometry.Vector3d[]
          description: ''
      overload: AssemblerLib.Tensor.GetVectors*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.Tensor.op_Addition(AssemblerLib.Tensor,AssemblerLib.Tensor)
      commentId: M:AssemblerLib.Tensor.op_Addition(AssemblerLib.Tensor,AssemblerLib.Tensor)
      language: CSharp
      name:
        CSharp: Addition(Tensor, Tensor)
        VB: Addition(Tensor, Tensor)
      nameWithType:
        CSharp: Tensor.Addition(Tensor, Tensor)
        VB: Tensor.Addition(Tensor, Tensor)
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Addition(AssemblerLib.Tensor, AssemblerLib.Tensor)
        VB: AssemblerLib.Tensor.Addition(AssemblerLib.Tensor, AssemblerLib.Tensor)
      type: Operator
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: op_Addition
        path: Tensor.cs
        startLine: 172
      summary: "\nOperator + for Tensor\n"
      example: []
      syntax:
        content:
          CSharp: public static Tensor operator +(Tensor a, Tensor b)
          VB: Public Shared Operator +(a As Tensor, b As Tensor) As Tensor
        parameters:
        - id: a
          type: AssemblerLib.Tensor
          description: First Tensor operand
        - id: b
          type: AssemblerLib.Tensor
          description: Second Tensor operand
        return:
          type: AssemblerLib.Tensor
          description: Tensor which is the sum of the two Tensor operands
      overload: AssemblerLib.Tensor.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Tensor.op_Subtraction(AssemblerLib.Tensor,AssemblerLib.Tensor)
      commentId: M:AssemblerLib.Tensor.op_Subtraction(AssemblerLib.Tensor,AssemblerLib.Tensor)
      language: CSharp
      name:
        CSharp: Subtraction(Tensor, Tensor)
        VB: Subtraction(Tensor, Tensor)
      nameWithType:
        CSharp: Tensor.Subtraction(Tensor, Tensor)
        VB: Tensor.Subtraction(Tensor, Tensor)
      qualifiedName:
        CSharp: AssemblerLib.Tensor.Subtraction(AssemblerLib.Tensor, AssemblerLib.Tensor)
        VB: AssemblerLib.Tensor.Subtraction(AssemblerLib.Tensor, AssemblerLib.Tensor)
      type: Operator
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Tensor.cs
        id: op_Subtraction
        path: Tensor.cs
        startLine: 203
      summary: "\nOperator - for Tensor\n"
      example: []
      syntax:
        content:
          CSharp: public static Tensor operator -(Tensor a, Tensor b)
          VB: Public Shared Operator -(a As Tensor, b As Tensor) As Tensor
        parameters:
        - id: a
          type: AssemblerLib.Tensor
          description: First Tensor operand
        - id: b
          type: AssemblerLib.Tensor
          description: Second Tensor operand
        return:
          type: AssemblerLib.Tensor
          description: Tensor which is the difference of the two Tensor operands
      overload: AssemblerLib.Tensor.op_Subtraction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: AssemblerLib.Utilities
    commentId: T:AssemblerLib.Utilities
    language: CSharp
    name:
      CSharp: Utilities
      VB: Utilities
    nameWithType:
      CSharp: Utilities
      VB: Utilities
    qualifiedName:
      CSharp: AssemblerLib.Utilities
      VB: AssemblerLib.Utilities
    type: Class
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
      id: Utilities
      path: Utilities.cs
      startLine: 22
    summary: "\nA static Utilities class grouping some useful methods\n"
    example: []
    syntax:
      content:
        CSharp: public static class Utilities
        VB: Public Module Utilities
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: AssemblerLib.Utilities.RhinoAbsoluteTolerance
      commentId: F:AssemblerLib.Utilities.RhinoAbsoluteTolerance
      language: CSharp
      name:
        CSharp: RhinoAbsoluteTolerance
        VB: RhinoAbsoluteTolerance
      nameWithType:
        CSharp: Utilities.RhinoAbsoluteTolerance
        VB: Utilities.RhinoAbsoluteTolerance
      qualifiedName:
        CSharp: AssemblerLib.Utilities.RhinoAbsoluteTolerance
        VB: AssemblerLib.Utilities.RhinoAbsoluteTolerance
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: RhinoAbsoluteTolerance
        path: Utilities.cs
        startLine: 27
      summary: "\nTolerance from Rhino file\n"
      example: []
      syntax:
        content:
          CSharp: public static readonly double RhinoAbsoluteTolerance
          VB: Public Shared ReadOnly RhinoAbsoluteTolerance As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: AssemblerLib.Utilities.RhinoAbsoluteToleranceSquared
      commentId: F:AssemblerLib.Utilities.RhinoAbsoluteToleranceSquared
      language: CSharp
      name:
        CSharp: RhinoAbsoluteToleranceSquared
        VB: RhinoAbsoluteToleranceSquared
      nameWithType:
        CSharp: Utilities.RhinoAbsoluteToleranceSquared
        VB: Utilities.RhinoAbsoluteToleranceSquared
      qualifiedName:
        CSharp: AssemblerLib.Utilities.RhinoAbsoluteToleranceSquared
        VB: AssemblerLib.Utilities.RhinoAbsoluteToleranceSquared
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: RhinoAbsoluteToleranceSquared
        path: Utilities.cs
        startLine: 31
      summary: "\nTolerance squared - for fast neighbour search\n"
      example: []
      syntax:
        content:
          CSharp: public static readonly double RhinoAbsoluteToleranceSquared
          VB: Public Shared ReadOnly RhinoAbsoluteToleranceSquared As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: AssemblerLib.Utilities.historyGradient
      commentId: F:AssemblerLib.Utilities.historyGradient
      language: CSharp
      name:
        CSharp: historyGradient
        VB: historyGradient
      nameWithType:
        CSharp: Utilities.historyGradient
        VB: Utilities.historyGradient
      qualifiedName:
        CSharp: AssemblerLib.Utilities.historyGradient
        VB: AssemblerLib.Utilities.historyGradient
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: historyGradient
        path: Utilities.cs
        startLine: 33
      syntax:
        content:
          CSharp: public static readonly GH_Gradient historyGradient
          VB: Public Shared ReadOnly historyGradient As GH_Gradient
        return:
          type: Grasshopper.GUI.Gradient.GH_Gradient
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: AssemblerLib.Utilities.zHeightGradient
      commentId: F:AssemblerLib.Utilities.zHeightGradient
      language: CSharp
      name:
        CSharp: zHeightGradient
        VB: zHeightGradient
      nameWithType:
        CSharp: Utilities.zHeightGradient
        VB: Utilities.zHeightGradient
      qualifiedName:
        CSharp: AssemblerLib.Utilities.zHeightGradient
        VB: AssemblerLib.Utilities.zHeightGradient
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: zHeightGradient
        path: Utilities.cs
        startLine: 35
      syntax:
        content:
          CSharp: public static readonly GH_Gradient zHeightGradient
          VB: Public Shared ReadOnly zHeightGradient As GH_Gradient
        return:
          type: Grasshopper.GUI.Gradient.GH_Gradient
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: AssemblerLib.Utilities.densityGradient
      commentId: F:AssemblerLib.Utilities.densityGradient
      language: CSharp
      name:
        CSharp: densityGradient
        VB: densityGradient
      nameWithType:
        CSharp: Utilities.densityGradient
        VB: Utilities.densityGradient
      qualifiedName:
        CSharp: AssemblerLib.Utilities.densityGradient
        VB: AssemblerLib.Utilities.densityGradient
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: densityGradient
        path: Utilities.cs
        startLine: 37
      syntax:
        content:
          CSharp: public static readonly GH_Gradient densityGradient
          VB: Public Shared ReadOnly densityGradient As GH_Gradient
        return:
          type: Grasshopper.GUI.Gradient.GH_Gradient
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: AssemblerLib.Utilities.AOTypePalette
      commentId: F:AssemblerLib.Utilities.AOTypePalette
      language: CSharp
      name:
        CSharp: AOTypePalette
        VB: AOTypePalette
      nameWithType:
        CSharp: Utilities.AOTypePalette
        VB: Utilities.AOTypePalette
      qualifiedName:
        CSharp: AssemblerLib.Utilities.AOTypePalette
        VB: AssemblerLib.Utilities.AOTypePalette
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: AOTypePalette
        path: Utilities.cs
        startLine: 40
      syntax:
        content:
          CSharp: public static readonly Color[] AOTypePalette
          VB: Public Shared ReadOnly AOTypePalette As Color()
        return:
          type: System.Drawing.Color[]
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: AssemblerLib.Utilities.srPalette
      commentId: F:AssemblerLib.Utilities.srPalette
      language: CSharp
      name:
        CSharp: srPalette
        VB: srPalette
      nameWithType:
        CSharp: Utilities.srPalette
        VB: Utilities.srPalette
      qualifiedName:
        CSharp: AssemblerLib.Utilities.srPalette
        VB: AssemblerLib.Utilities.srPalette
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: srPalette
        path: Utilities.cs
        startLine: 48
      syntax:
        content:
          CSharp: public static readonly Color[] srPalette
          VB: Public Shared ReadOnly srPalette As Color()
        return:
          type: System.Drawing.Color[]
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: AssemblerLib.Utilities.colorlist
      commentId: F:AssemblerLib.Utilities.colorlist
      language: CSharp
      name:
        CSharp: colorlist
        VB: colorlist
      nameWithType:
        CSharp: Utilities.colorlist
        VB: Utilities.colorlist
      qualifiedName:
        CSharp: AssemblerLib.Utilities.colorlist
        VB: AssemblerLib.Utilities.colorlist
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: colorlist
        path: Utilities.cs
        startLine: 54
      syntax:
        content:
          CSharp: public static readonly List<KnownColor> colorlist
          VB: Public Shared ReadOnly colorlist As List(Of KnownColor)
        return:
          type: System.Collections.Generic.List{System.Drawing.KnownColor}
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: AssemblerLib.Utilities.CollisionCheckAssemblage(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
      commentId: M:AssemblerLib.Utilities.CollisionCheckAssemblage(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
      language: CSharp
      name:
        CSharp: CollisionCheckAssemblage(Assemblage, AssemblyObject)
        VB: CollisionCheckAssemblage(Assemblage, AssemblyObject)
      nameWithType:
        CSharp: Utilities.CollisionCheckAssemblage(Assemblage, AssemblyObject)
        VB: Utilities.CollisionCheckAssemblage(Assemblage, AssemblyObject)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.CollisionCheckAssemblage(AssemblerLib.Assemblage, AssemblerLib.AssemblyObject)
        VB: AssemblerLib.Utilities.CollisionCheckAssemblage(AssemblerLib.Assemblage, AssemblerLib.AssemblyObject)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: CollisionCheckAssemblage
        path: Utilities.cs
        startLine: 64
      summary: "\nCollision Check in the assemblage for a given <xref href=\"AssemblerLib.Assemblage\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public static bool CollisionCheckAssemblage(Assemblage AOa, AssemblyObject sO)
          VB: Public Shared Function CollisionCheckAssemblage(AOa As Assemblage, sO As AssemblyObject) As Boolean
        parameters:
        - id: AOa
          type: AssemblerLib.Assemblage
          description: The <xref href="AssemblerLib.Assemblage" data-throw-if-not-resolved="false"></xref> to check
        - id: sO
          type: AssemblerLib.AssemblyObject
          description: The sender <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Utilities.CollisionCheckAssemblage*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        AssemblerLib.Assemblage: 
        AssemblerLib.AssemblyObject: 
    - id: AssemblerLib.Utilities.CollisionCheckAssemblageParallel(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
      commentId: M:AssemblerLib.Utilities.CollisionCheckAssemblageParallel(AssemblerLib.Assemblage,AssemblerLib.AssemblyObject)
      language: CSharp
      name:
        CSharp: CollisionCheckAssemblageParallel(Assemblage, AssemblyObject)
        VB: CollisionCheckAssemblageParallel(Assemblage, AssemblyObject)
      nameWithType:
        CSharp: Utilities.CollisionCheckAssemblageParallel(Assemblage, AssemblyObject)
        VB: Utilities.CollisionCheckAssemblageParallel(Assemblage, AssemblyObject)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.CollisionCheckAssemblageParallel(AssemblerLib.Assemblage, AssemblerLib.AssemblyObject)
        VB: AssemblerLib.Utilities.CollisionCheckAssemblageParallel(AssemblerLib.Assemblage, AssemblerLib.AssemblyObject)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: CollisionCheckAssemblageParallel
        path: Utilities.cs
        startLine: 105
      summary: "\nCollision Check in the assemblage for a given <xref href=\"AssemblerLib.Assemblage\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref> - Parallel version\n"
      example: []
      syntax:
        content:
          CSharp: public static bool CollisionCheckAssemblageParallel(Assemblage AOa, AssemblyObject sO)
          VB: Public Shared Function CollisionCheckAssemblageParallel(AOa As Assemblage, sO As AssemblyObject) As Boolean
        parameters:
        - id: AOa
          type: AssemblerLib.Assemblage
          description: The <xref href="AssemblerLib.Assemblage" data-throw-if-not-resolved="false"></xref> to check
        - id: sO
          type: AssemblerLib.AssemblyObject
          description: The sender <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Utilities.CollisionCheckAssemblageParallel*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        AssemblerLib.Assemblage: 
        AssemblerLib.AssemblyObject: 
    - id: AssemblerLib.Utilities.CollisionCheckNeighbours(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      commentId: M:AssemblerLib.Utilities.CollisionCheckNeighbours(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      language: CSharp
      name:
        CSharp: CollisionCheckNeighbours(AssemblyObject, List<AssemblyObject>)
        VB: CollisionCheckNeighbours(AssemblyObject, List(Of AssemblyObject))
      nameWithType:
        CSharp: Utilities.CollisionCheckNeighbours(AssemblyObject, List<AssemblyObject>)
        VB: Utilities.CollisionCheckNeighbours(AssemblyObject, List(Of AssemblyObject))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.CollisionCheckNeighbours(AssemblerLib.AssemblyObject, System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
        VB: AssemblerLib.Utilities.CollisionCheckNeighbours(AssemblerLib.AssemblyObject, System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: CollisionCheckNeighbours
        path: Utilities.cs
        startLine: 154
      summary: "\nCollision Check in the <xref href=\"AssemblerLib.Assemblage\" data-throw-if-not-resolved=\"false\"></xref> for a given <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public static bool CollisionCheckNeighbours(AssemblyObject AO, List<AssemblyObject> neighList)
          VB: Public Shared Function CollisionCheckNeighbours(AO As AssemblyObject, neighList As List(Of AssemblyObject)) As Boolean
        parameters:
        - id: AO
          type: AssemblerLib.AssemblyObject
          description: ''
        - id: neighList
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Utilities.CollisionCheckNeighbours*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        AssemblerLib.Assemblage: 
        AssemblerLib.AssemblyObject: 
    - id: AssemblerLib.Utilities.CollisionCheckPair(AssemblerLib.AssemblyObject,AssemblerLib.AssemblyObject)
      commentId: M:AssemblerLib.Utilities.CollisionCheckPair(AssemblerLib.AssemblyObject,AssemblerLib.AssemblyObject)
      language: CSharp
      name:
        CSharp: CollisionCheckPair(AssemblyObject, AssemblyObject)
        VB: CollisionCheckPair(AssemblyObject, AssemblyObject)
      nameWithType:
        CSharp: Utilities.CollisionCheckPair(AssemblyObject, AssemblyObject)
        VB: Utilities.CollisionCheckPair(AssemblyObject, AssemblyObject)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.CollisionCheckPair(AssemblerLib.AssemblyObject, AssemblerLib.AssemblyObject)
        VB: AssemblerLib.Utilities.CollisionCheckPair(AssemblerLib.AssemblyObject, AssemblerLib.AssemblyObject)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: CollisionCheckPair
        path: Utilities.cs
        startLine: 185
      summary: "\nCollision Check between 2 <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public static bool CollisionCheckPair(AssemblyObject receiver, AssemblyObject sender)
          VB: Public Shared Function CollisionCheckPair(receiver As AssemblyObject, sender As AssemblyObject) As Boolean
        parameters:
        - id: receiver
          type: AssemblerLib.AssemblyObject
          description: ''
        - id: sender
          type: AssemblerLib.AssemblyObject
          description: ''
        return:
          type: System.Boolean
          description: True if objects are colliding or one contains the other
      overload: AssemblerLib.Utilities.CollisionCheckPair*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        AssemblerLib.AssemblyObject: 
    - id: AssemblerLib.Utilities.ObstructionCheckAssemblage(AssemblerLib.Assemblage,System.Int32)
      commentId: M:AssemblerLib.Utilities.ObstructionCheckAssemblage(AssemblerLib.Assemblage,System.Int32)
      language: CSharp
      name:
        CSharp: ObstructionCheckAssemblage(Assemblage, Int32)
        VB: ObstructionCheckAssemblage(Assemblage, Int32)
      nameWithType:
        CSharp: Utilities.ObstructionCheckAssemblage(Assemblage, Int32)
        VB: Utilities.ObstructionCheckAssemblage(Assemblage, Int32)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.ObstructionCheckAssemblage(AssemblerLib.Assemblage, System.Int32)
        VB: AssemblerLib.Utilities.ObstructionCheckAssemblage(AssemblerLib.Assemblage, System.Int32)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: ObstructionCheckAssemblage
        path: Utilities.cs
        startLine: 210
      summary: "\nCheck obstruction status for an <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"AssemblerLib.Assemblage\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public static bool ObstructionCheckAssemblage(Assemblage AOa, int AOindex)
          VB: Public Shared Function ObstructionCheckAssemblage(AOa As Assemblage, AOindex As Integer) As Boolean
        parameters:
        - id: AOa
          type: AssemblerLib.Assemblage
          description: ''
        - id: AOindex
          type: System.Int32
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Utilities.ObstructionCheckAssemblage*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        AssemblerLib.AssemblyObject: 
        AssemblerLib.Assemblage: 
    - id: AssemblerLib.Utilities.ObstructionCheckList(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      commentId: M:AssemblerLib.Utilities.ObstructionCheckList(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      language: CSharp
      name:
        CSharp: ObstructionCheckList(List<AssemblyObject>)
        VB: ObstructionCheckList(List(Of AssemblyObject))
      nameWithType:
        CSharp: Utilities.ObstructionCheckList(List<AssemblyObject>)
        VB: Utilities.ObstructionCheckList(List(Of AssemblyObject))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.ObstructionCheckList(System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
        VB: AssemblerLib.Utilities.ObstructionCheckList(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: ObstructionCheckList
        path: Utilities.cs
        startLine: 318
      summary: "\nCheck obstruction and <xref href=\"AssemblerLib.Handle\" data-throw-if-not-resolved=\"false\"></xref> Occupancy in a List of <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref>s\n"
      example: []
      syntax:
        content:
          CSharp: public static bool ObstructionCheckList(List<AssemblyObject> AOList)
          VB: Public Shared Function ObstructionCheckList(AOList As List(Of AssemblyObject)) As Boolean
        parameters:
        - id: AOList
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: List of <xref href="AssemblerLib.AssemblyObject" data-throw-if-not-resolved="false"></xref>s to check
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Utilities.ObstructionCheckList*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        AssemblerLib.Handle: 
        AssemblerLib.AssemblyObject: 
    - id: AssemblerLib.Utilities.AbsoluteZCheck(AssemblerLib.AssemblyObject)
      commentId: M:AssemblerLib.Utilities.AbsoluteZCheck(AssemblerLib.AssemblyObject)
      language: CSharp
      name:
        CSharp: AbsoluteZCheck(AssemblyObject)
        VB: AbsoluteZCheck(AssemblyObject)
      nameWithType:
        CSharp: Utilities.AbsoluteZCheck(AssemblyObject)
        VB: Utilities.AbsoluteZCheck(AssemblyObject)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.AbsoluteZCheck(AssemblerLib.AssemblyObject)
        VB: AssemblerLib.Utilities.AbsoluteZCheck(AssemblerLib.AssemblyObject)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: AbsoluteZCheck
        path: Utilities.cs
        startLine: 409
      syntax:
        content:
          CSharp: public static bool AbsoluteZCheck(AssemblyObject AO)
          VB: Public Shared Function AbsoluteZCheck(AO As AssemblyObject) As Boolean
        parameters:
        - id: AO
          type: AssemblerLib.AssemblyObject
        return:
          type: System.Boolean
      overload: AssemblerLib.Utilities.AbsoluteZCheck*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.BuildDictionary(AssemblerLib.AssemblyObject[],System.Boolean)
      commentId: M:AssemblerLib.Utilities.BuildDictionary(AssemblerLib.AssemblyObject[],System.Boolean)
      language: CSharp
      name:
        CSharp: BuildDictionary(AssemblyObject[], Boolean)
        VB: BuildDictionary(AssemblyObject(), Boolean)
      nameWithType:
        CSharp: Utilities.BuildDictionary(AssemblyObject[], Boolean)
        VB: Utilities.BuildDictionary(AssemblyObject(), Boolean)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.BuildDictionary(AssemblerLib.AssemblyObject[], System.Boolean)
        VB: AssemblerLib.Utilities.BuildDictionary(AssemblerLib.AssemblyObject(), System.Boolean)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: BuildDictionary
        path: Utilities.cs
        startLine: 449
      summary: "\nBuilds the dictionary of AssemblyObjects\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<string, int> BuildDictionary(AssemblyObject[] AOset, bool forceOrder)
          VB: Public Shared Function BuildDictionary(AOset As AssemblyObject(), forceOrder As Boolean) As Dictionary(Of String, Integer)
        parameters:
        - id: AOset
          type: AssemblerLib.AssemblyObject[]
          description: the array of unique AssemblyObjects constituting the set
        - id: forceOrder
          type: System.Boolean
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Int32}
          description: ''
      overload: AssemblerLib.Utilities.BuildDictionary*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.BuildHandlesHashSet(AssemblerLib.AssemblyObject[])
      commentId: M:AssemblerLib.Utilities.BuildHandlesHashSet(AssemblerLib.AssemblyObject[])
      language: CSharp
      name:
        CSharp: BuildHandlesHashSet(AssemblyObject[])
        VB: BuildHandlesHashSet(AssemblyObject())
      nameWithType:
        CSharp: Utilities.BuildHandlesHashSet(AssemblyObject[])
        VB: Utilities.BuildHandlesHashSet(AssemblyObject())
      qualifiedName:
        CSharp: AssemblerLib.Utilities.BuildHandlesHashSet(AssemblerLib.AssemblyObject[])
        VB: AssemblerLib.Utilities.BuildHandlesHashSet(AssemblerLib.AssemblyObject())
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: BuildHandlesHashSet
        path: Utilities.cs
        startLine: 468
      summary: "\nBuilds the Handles HashSet - for compatibility checks of loaded assemblages\n"
      example: []
      syntax:
        content:
          CSharp: public static HashSet<int> BuildHandlesHashSet(AssemblyObject[] AOset)
          VB: Public Shared Function BuildHandlesHashSet(AOset As AssemblyObject()) As HashSet(Of Integer)
        parameters:
        - id: AOset
          type: AssemblerLib.AssemblyObject[]
          description: the array of unique AssemblyObjects constituting the set
        return:
          type: System.Collections.Generic.HashSet{System.Int32}
          description: ''
      overload: AssemblerLib.Utilities.BuildHandlesHashSet*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.Clone(AssemblerLib.AssemblyObject)
      commentId: M:AssemblerLib.Utilities.Clone(AssemblerLib.AssemblyObject)
      language: CSharp
      name:
        CSharp: Clone(AssemblyObject)
        VB: Clone(AssemblyObject)
      nameWithType:
        CSharp: Utilities.Clone(AssemblyObject)
        VB: Utilities.Clone(AssemblyObject)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.Clone(AssemblerLib.AssemblyObject)
        VB: AssemblerLib.Utilities.Clone(AssemblerLib.AssemblyObject)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: Clone
        path: Utilities.cs
        startLine: 483
      summary: "\nClones an AssemblyObject as an asset, without the connectivity information\n"
      example: []
      syntax:
        content:
          CSharp: public static AssemblyObject Clone(AssemblyObject AO)
          VB: Public Shared Function Clone(AO As AssemblyObject) As AssemblyObject
        parameters:
        - id: AO
          type: AssemblerLib.AssemblyObject
          description: ''
        return:
          type: AssemblerLib.AssemblyObject
          description: a cloned AssemblyObejct
      overload: AssemblerLib.Utilities.Clone*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.AssemblyObject)
      commentId: M:AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.AssemblyObject)
      language: CSharp
      name:
        CSharp: CloneWithConnectivity(AssemblyObject)
        VB: CloneWithConnectivity(AssemblyObject)
      nameWithType:
        CSharp: Utilities.CloneWithConnectivity(AssemblyObject)
        VB: Utilities.CloneWithConnectivity(AssemblyObject)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.AssemblyObject)
        VB: AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.AssemblyObject)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: CloneWithConnectivity
        path: Utilities.cs
        startLine: 528
      summary: "\nDuplicates an AssemblyObject preserving connectivity information. Useful for previous assemblages and the Goo wrapper.\n"
      example: []
      syntax:
        content:
          CSharp: public static AssemblyObject CloneWithConnectivity(AssemblyObject AO)
          VB: Public Shared Function CloneWithConnectivity(AO As AssemblyObject) As AssemblyObject
        parameters:
        - id: AO
          type: AssemblerLib.AssemblyObject
          description: The Original AssemblyObject
        return:
          type: AssemblerLib.AssemblyObject
          description: A duplicated AssemblyObject with the same connectivity of the source
      overload: AssemblerLib.Utilities.CloneWithConnectivity*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.SetCollisionMesh(AssemblerLib.AssemblyObject,Rhino.Geometry.Mesh)
      commentId: M:AssemblerLib.Utilities.SetCollisionMesh(AssemblerLib.AssemblyObject,Rhino.Geometry.Mesh)
      language: CSharp
      name:
        CSharp: SetCollisionMesh(AssemblyObject, Mesh)
        VB: SetCollisionMesh(AssemblyObject, Mesh)
      nameWithType:
        CSharp: Utilities.SetCollisionMesh(AssemblyObject, Mesh)
        VB: Utilities.SetCollisionMesh(AssemblyObject, Mesh)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.SetCollisionMesh(AssemblerLib.AssemblyObject, Rhino.Geometry.Mesh)
        VB: AssemblerLib.Utilities.SetCollisionMesh(AssemblerLib.AssemblyObject, Rhino.Geometry.Mesh)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: SetCollisionMesh
        path: Utilities.cs
        startLine: 545
      summary: "\nSet a new CollisionMesh for the AssemblyObject\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetCollisionMesh(AssemblyObject AO, Mesh newCollisionMesh)
          VB: Public Shared Sub SetCollisionMesh(AO As AssemblyObject, newCollisionMesh As Mesh)
        parameters:
        - id: AO
          type: AssemblerLib.AssemblyObject
          description: ''
        - id: newCollisionMesh
          type: Rhino.Geometry.Mesh
          description: ''
      overload: AssemblerLib.Utilities.SetCollisionMesh*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.SetSupports(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Line},System.Int32)
      commentId: M:AssemblerLib.Utilities.SetSupports(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Line},System.Int32)
      language: CSharp
      name:
        CSharp: SetSupports(AssemblyObject, List<Line>, Int32)
        VB: SetSupports(AssemblyObject, List(Of Line), Int32)
      nameWithType:
        CSharp: Utilities.SetSupports(AssemblyObject, List<Line>, Int32)
        VB: Utilities.SetSupports(AssemblyObject, List(Of Line), Int32)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.SetSupports(AssemblerLib.AssemblyObject, System.Collections.Generic.List<Rhino.Geometry.Line>, System.Int32)
        VB: AssemblerLib.Utilities.SetSupports(AssemblerLib.AssemblyObject, System.Collections.Generic.List(Of Rhino.Geometry.Line), System.Int32)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: SetSupports
        path: Utilities.cs
        startLine: 567
      summary: "\nAdd Supports to the AssemblyObject - returns true if successful\n"
      example: []
      syntax:
        content:
          CSharp: public static bool SetSupports(AssemblyObject AO, List<Line> lines, int minSupports)
          VB: Public Shared Function SetSupports(AO As AssemblyObject, lines As List(Of Line), minSupports As Integer) As Boolean
        parameters:
        - id: AO
          type: AssemblerLib.AssemblyObject
          description: ''
        - id: lines
          type: System.Collections.Generic.List{Rhino.Geometry.Line}
          description: ''
        - id: minSupports
          type: System.Int32
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Utilities.SetSupports*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.ResetSupports(AssemblerLib.AssemblyObject)
      commentId: M:AssemblerLib.Utilities.ResetSupports(AssemblerLib.AssemblyObject)
      language: CSharp
      name:
        CSharp: ResetSupports(AssemblyObject)
        VB: ResetSupports(AssemblyObject)
      nameWithType:
        CSharp: Utilities.ResetSupports(AssemblyObject)
        VB: Utilities.ResetSupports(AssemblyObject)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.ResetSupports(AssemblerLib.AssemblyObject)
        VB: AssemblerLib.Utilities.ResetSupports(AssemblerLib.AssemblyObject)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: ResetSupports
        path: Utilities.cs
        startLine: 585
      summary: "\nResets <xref href=\"AssemblerLib.Support\" data-throw-if-not-resolved=\"false\"></xref>s for an <xref href=\"AssemblerLib.AssemblyObject\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public static void ResetSupports(AssemblyObject AO)
          VB: Public Shared Sub ResetSupports(AO As AssemblyObject)
        parameters:
        - id: AO
          type: AssemblerLib.AssemblyObject
          description: ''
      overload: AssemblerLib.Utilities.ResetSupports*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        AssemblerLib.Support: 
        AssemblerLib.AssemblyObject: 
    - id: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      commentId: M:AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      language: CSharp
      name:
        CSharp: CheckSupport(AssemblyObject, List<AssemblyObject>)
        VB: CheckSupport(AssemblyObject, List(Of AssemblyObject))
      nameWithType:
        CSharp: Utilities.CheckSupport(AssemblyObject, List<AssemblyObject>)
        VB: Utilities.CheckSupport(AssemblyObject, List(Of AssemblyObject))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject, System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
        VB: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject, System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: CheckSupport
        path: Utilities.cs
        startLine: 599
      summary: "\nCheck if the object is supported by a list of neighbouring AssemblyObjects\n"
      example: []
      syntax:
        content:
          CSharp: public static bool CheckSupport(AssemblyObject AO, List<AssemblyObject> neighbours)
          VB: Public Shared Function CheckSupport(AO As AssemblyObject, neighbours As List(Of AssemblyObject)) As Boolean
        parameters:
        - id: AO
          type: AssemblerLib.AssemblyObject
          description: ''
        - id: neighbours
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Utilities.CheckSupport*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Mesh})
      commentId: M:AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject,System.Collections.Generic.List{Rhino.Geometry.Mesh})
      language: CSharp
      name:
        CSharp: CheckSupport(AssemblyObject, List<Mesh>)
        VB: CheckSupport(AssemblyObject, List(Of Mesh))
      nameWithType:
        CSharp: Utilities.CheckSupport(AssemblyObject, List<Mesh>)
        VB: Utilities.CheckSupport(AssemblyObject, List(Of Mesh))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject, System.Collections.Generic.List<Rhino.Geometry.Mesh>)
        VB: AssemblerLib.Utilities.CheckSupport(AssemblerLib.AssemblyObject, System.Collections.Generic.List(Of Rhino.Geometry.Mesh))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: CheckSupport
        path: Utilities.cs
        startLine: 632
      summary: "\nCheck if the object is supported by a list of neighbouring Meshes\n"
      example: []
      syntax:
        content:
          CSharp: public static bool CheckSupport(AssemblyObject AO, List<Mesh> neighMeshes)
          VB: Public Shared Function CheckSupport(AO As AssemblyObject, neighMeshes As List(Of Mesh)) As Boolean
        parameters:
        - id: AO
          type: AssemblerLib.AssemblyObject
          description: ''
        - id: neighMeshes
          type: System.Collections.Generic.List{Rhino.Geometry.Mesh}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Utilities.CheckSupport*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      commentId: M:AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      language: CSharp
      name:
        CSharp: SupportIntersect(Support, List<AssemblyObject>)
        VB: SupportIntersect(Support, List(Of AssemblyObject))
      nameWithType:
        CSharp: Utilities.SupportIntersect(Support, List<AssemblyObject>)
        VB: Utilities.SupportIntersect(Support, List(Of AssemblyObject))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
        VB: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: SupportIntersect
        path: Utilities.cs
        startLine: 664
      summary: "\nCheck intersection of a Support with a list of AssemblyObjects\n"
      example: []
      syntax:
        content:
          CSharp: public static bool SupportIntersect(Support s, List<AssemblyObject> neighbours)
          VB: Public Shared Function SupportIntersect(s As Support, neighbours As List(Of AssemblyObject)) As Boolean
        parameters:
        - id: s
          type: AssemblerLib.Support
          description: ''
        - id: neighbours
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Utilities.SupportIntersect*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.MeshEnvironment})
      commentId: M:AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{AssemblerLib.MeshEnvironment})
      language: CSharp
      name:
        CSharp: SupportIntersect(Support, List<MeshEnvironment>)
        VB: SupportIntersect(Support, List(Of MeshEnvironment))
      nameWithType:
        CSharp: Utilities.SupportIntersect(Support, List<MeshEnvironment>)
        VB: Utilities.SupportIntersect(Support, List(Of MeshEnvironment))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List<AssemblerLib.MeshEnvironment>)
        VB: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List(Of AssemblerLib.MeshEnvironment))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: SupportIntersect
        path: Utilities.cs
        startLine: 696
      summary: "\nCheck intersection of a Support with a list of MeshEnvironment\n"
      example: []
      syntax:
        content:
          CSharp: public static bool SupportIntersect(Support s, List<MeshEnvironment> envMeshes)
          VB: Public Shared Function SupportIntersect(s As Support, envMeshes As List(Of MeshEnvironment)) As Boolean
        parameters:
        - id: s
          type: AssemblerLib.Support
          description: ''
        - id: envMeshes
          type: System.Collections.Generic.List{AssemblerLib.MeshEnvironment}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Utilities.SupportIntersect*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{Rhino.Geometry.Mesh})
      commentId: M:AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support,System.Collections.Generic.List{Rhino.Geometry.Mesh})
      language: CSharp
      name:
        CSharp: SupportIntersect(Support, List<Mesh>)
        VB: SupportIntersect(Support, List(Of Mesh))
      nameWithType:
        CSharp: Utilities.SupportIntersect(Support, List<Mesh>)
        VB: Utilities.SupportIntersect(Support, List(Of Mesh))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List<Rhino.Geometry.Mesh>)
        VB: AssemblerLib.Utilities.SupportIntersect(AssemblerLib.Support, System.Collections.Generic.List(Of Rhino.Geometry.Mesh))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: SupportIntersect
        path: Utilities.cs
        startLine: 728
      summary: "\nCheck intersection of a Support with a list of Meshes\n"
      example: []
      syntax:
        content:
          CSharp: public static bool SupportIntersect(Support s, List<Mesh> meshes)
          VB: Public Shared Function SupportIntersect(s As Support, meshes As List(Of Mesh)) As Boolean
        parameters:
        - id: s
          type: AssemblerLib.Support
          description: ''
        - id: meshes
          type: System.Collections.Generic.List{Rhino.Geometry.Mesh}
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: AssemblerLib.Utilities.SupportIntersect*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.Clone(AssemblerLib.Handle@)
      commentId: M:AssemblerLib.Utilities.Clone(AssemblerLib.Handle@)
      language: CSharp
      name:
        CSharp: Clone(ref Handle)
        VB: Clone(ByRef Handle)
      nameWithType:
        CSharp: Utilities.Clone(ref Handle)
        VB: Utilities.Clone(ByRef Handle)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.Clone(ref AssemblerLib.Handle)
        VB: AssemblerLib.Utilities.Clone(ByRef AssemblerLib.Handle)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: Clone
        path: Utilities.cs
        startLine: 765
      summary: "\nClones a Handle\n"
      example: []
      syntax:
        content:
          CSharp: public static Handle Clone(ref Handle handle)
          VB: Public Shared Function Clone(ByRef handle As Handle) As Handle
        parameters:
        - id: handle
          type: AssemblerLib.Handle
          description: ''
        return:
          type: AssemblerLib.Handle
          description: a cloned Handle
      overload: AssemblerLib.Utilities.Clone*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.Handle@)
      commentId: M:AssemblerLib.Utilities.CloneWithConnectivity(AssemblerLib.Handle@)
      language: CSharp
      name:
        CSharp: CloneWithConnectivity(ref Handle)
        VB: CloneWithConnectivity(ByRef Handle)
      nameWithType:
        CSharp: Utilities.CloneWithConnectivity(ref Handle)
        VB: Utilities.CloneWithConnectivity(ByRef Handle)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.CloneWithConnectivity(ref AssemblerLib.Handle)
        VB: AssemblerLib.Utilities.CloneWithConnectivity(ByRef AssemblerLib.Handle)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: CloneWithConnectivity
        path: Utilities.cs
        startLine: 789
      summary: "\nDuplicates a Handle preserving connectivity information\n"
      example: []
      syntax:
        content:
          CSharp: public static Handle CloneWithConnectivity(ref Handle handle)
          VB: Public Shared Function CloneWithConnectivity(ByRef handle As Handle) As Handle
        parameters:
        - id: handle
          type: AssemblerLib.Handle
          description: ''
        return:
          type: AssemblerLib.Handle
          description: a duplicated Handle with the same connectivity
      overload: AssemblerLib.Utilities.CloneWithConnectivity*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String},Grasshopper.DataTree{System.String}@)
      commentId: M:AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String},Grasshopper.DataTree{System.String}@)
      language: CSharp
      name:
        CSharp: HeuristicsRulesFromString(List<AssemblyObject>, Dictionary<String, Int32>, List<String>, out DataTree<String>)
        VB: HeuristicsRulesFromString(List(Of AssemblyObject), Dictionary(Of String, Int32), List(Of String), ByRef DataTree(Of String))
      nameWithType:
        CSharp: Utilities.HeuristicsRulesFromString(List<AssemblyObject>, Dictionary<String, Int32>, List<String>, out DataTree<String>)
        VB: Utilities.HeuristicsRulesFromString(List(Of AssemblyObject), Dictionary(Of String, Int32), List(Of String), ByRef DataTree(Of String))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.Collections.Generic.Dictionary<System.String, System.Int32>, System.Collections.Generic.List<System.String>, out Grasshopper.DataTree<System.String>)
        VB: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.Collections.Generic.Dictionary(Of System.String, System.Int32), System.Collections.Generic.List(Of System.String), ByRef Grasshopper.DataTree(Of System.String))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: HeuristicsRulesFromString
        path: Utilities.cs
        startLine: 819
      summary: "\nReturns a list of Rules from a heuristics string, outputs also a Data Tree of the rules strings\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Rule> HeuristicsRulesFromString(List<AssemblyObject> AOset, Dictionary<string, int> AOCatalog, List<string> heuristics, out DataTree<string> heuristicsTree)
          VB: Public Shared Function HeuristicsRulesFromString(AOset As List(Of AssemblyObject), AOCatalog As Dictionary(Of String, Integer), heuristics As List(Of String), ByRef heuristicsTree As DataTree(Of String)) As List(Of Rule)
        parameters:
        - id: AOset
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        - id: AOCatalog
          type: System.Collections.Generic.Dictionary{System.String,System.Int32}
          description: ''
        - id: heuristics
          type: System.Collections.Generic.List{System.String}
          description: ''
        - id: heuristicsTree
          type: Grasshopper.DataTree{System.String}
          description: ''
        return:
          type: System.Collections.Generic.List{AssemblerLib.Rule}
          description: ''
      overload: AssemblerLib.Utilities.HeuristicsRulesFromString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String})
      commentId: M:AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String})
      language: CSharp
      name:
        CSharp: HeuristicsRulesFromString(List<AssemblyObject>, Dictionary<String, Int32>, List<String>)
        VB: HeuristicsRulesFromString(List(Of AssemblyObject), Dictionary(Of String, Int32), List(Of String))
      nameWithType:
        CSharp: Utilities.HeuristicsRulesFromString(List<AssemblyObject>, Dictionary<String, Int32>, List<String>)
        VB: Utilities.HeuristicsRulesFromString(List(Of AssemblyObject), Dictionary(Of String, Int32), List(Of String))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.Collections.Generic.Dictionary<System.String, System.Int32>, System.Collections.Generic.List<System.String>)
        VB: AssemblerLib.Utilities.HeuristicsRulesFromString(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.Collections.Generic.Dictionary(Of System.String, System.Int32), System.Collections.Generic.List(Of System.String))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: HeuristicsRulesFromString
        path: Utilities.cs
        startLine: 866
      summary: "\nReturns a list of Rules from a heuristics string\n"
      example: []
      syntax:
        content:
          CSharp: public static List<Rule> HeuristicsRulesFromString(List<AssemblyObject> AOset, Dictionary<string, int> AOCatalog, List<string> heuristics)
          VB: Public Shared Function HeuristicsRulesFromString(AOset As List(Of AssemblyObject), AOCatalog As Dictionary(Of String, Integer), heuristics As List(Of String)) As List(Of Rule)
        parameters:
        - id: AOset
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        - id: AOCatalog
          type: System.Collections.Generic.Dictionary{System.String,System.Int32}
          description: ''
        - id: heuristics
          type: System.Collections.Generic.List{System.String}
          description: ''
        return:
          type: System.Collections.Generic.List{AssemblerLib.Rule}
          description: ''
      overload: AssemblerLib.Utilities.HeuristicsRulesFromString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.AssemblageFromJSONdump(System.String)
      commentId: M:AssemblerLib.Utilities.AssemblageFromJSONdump(System.String)
      language: CSharp
      name:
        CSharp: AssemblageFromJSONdump(String)
        VB: AssemblageFromJSONdump(String)
      nameWithType:
        CSharp: Utilities.AssemblageFromJSONdump(String)
        VB: Utilities.AssemblageFromJSONdump(String)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.AssemblageFromJSONdump(System.String)
        VB: AssemblerLib.Utilities.AssemblageFromJSONdump(System.String)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: AssemblageFromJSONdump
        path: Utilities.cs
        startLine: 907
      summary: "\nRebuilds and Assemblage from a JSON dump\n"
      example: []
      syntax:
        content:
          CSharp: public static List<AssemblyObject> AssemblageFromJSONdump(string path)
          VB: Public Shared Function AssemblageFromJSONdump(path As String) As List(Of AssemblyObject)
        parameters:
        - id: path
          type: System.String
          description: ''
        return:
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: An Assemblage as list of AssemblyObject
      overload: AssemblerLib.Utilities.AssemblageFromJSONdump*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.AssemblageToJSONdump(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
      commentId: M:AssemblerLib.Utilities.AssemblageToJSONdump(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
      language: CSharp
      name:
        CSharp: AssemblageToJSONdump(List<AssemblyObject>, String, String)
        VB: AssemblageToJSONdump(List(Of AssemblyObject), String, String)
      nameWithType:
        CSharp: Utilities.AssemblageToJSONdump(List<AssemblyObject>, String, String)
        VB: Utilities.AssemblageToJSONdump(List(Of AssemblyObject), String, String)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.AssemblageToJSONdump(System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.String, System.String)
        VB: AssemblerLib.Utilities.AssemblageToJSONdump(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.String, System.String)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: AssemblageToJSONdump
        path: Utilities.cs
        startLine: 919
      summary: "\nSaves an Assemblage as a JSON file dump - every object is serialized in its entirety\n"
      example: []
      syntax:
        content:
          CSharp: public static string AssemblageToJSONdump(List<AssemblyObject> assemblage, string path, string name)
          VB: Public Shared Function AssemblageToJSONdump(assemblage As List(Of AssemblyObject), path As String, name As String) As String
        parameters:
        - id: assemblage
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        - id: path
          type: System.String
          description: ''
        - id: name
          type: System.String
          description: ''
        return:
          type: System.String
          description: File name (with full path) of the saved assemblage
      overload: AssemblerLib.Utilities.AssemblageToJSONdump*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.AssemblageToJSONSmart(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
      commentId: M:AssemblerLib.Utilities.AssemblageToJSONSmart(System.Collections.Generic.List{AssemblerLib.AssemblyObject},System.String,System.String)
      language: CSharp
      name:
        CSharp: AssemblageToJSONSmart(List<AssemblyObject>, String, String)
        VB: AssemblageToJSONSmart(List(Of AssemblyObject), String, String)
      nameWithType:
        CSharp: Utilities.AssemblageToJSONSmart(List<AssemblyObject>, String, String)
        VB: Utilities.AssemblageToJSONSmart(List(Of AssemblyObject), String, String)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.AssemblageToJSONSmart(System.Collections.Generic.List<AssemblerLib.AssemblyObject>, System.String, System.String)
        VB: AssemblerLib.Utilities.AssemblageToJSONSmart(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject), System.String, System.String)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: AssemblageToJSONSmart
        path: Utilities.cs
        startLine: 944
      summary: "\nTO-DO - COMPLETE THIS METHOD\n"
      example: []
      syntax:
        content:
          CSharp: public static void AssemblageToJSONSmart(List<AssemblyObject> assemblage, string path, string name)
          VB: Public Shared Sub AssemblageToJSONSmart(assemblage As List(Of AssemblyObject), path As String, name As String)
        parameters:
        - id: assemblage
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        - id: path
          type: System.String
          description: ''
        - id: name
          type: System.String
          description: ''
      overload: AssemblerLib.Utilities.AssemblageToJSONSmart*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.ReadFileUnique(System.String)
      commentId: M:AssemblerLib.Utilities.ReadFileUnique(System.String)
      language: CSharp
      name:
        CSharp: ReadFileUnique(String)
        VB: ReadFileUnique(String)
      nameWithType:
        CSharp: Utilities.ReadFileUnique(String)
        VB: Utilities.ReadFileUnique(String)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.ReadFileUnique(System.String)
        VB: AssemblerLib.Utilities.ReadFileUnique(System.String)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: ReadFileUnique
        path: Utilities.cs
        startLine: 990
      summary: "\nReads a file as a unique string\n"
      example: []
      syntax:
        content:
          CSharp: public static string ReadFileUnique(string path)
          VB: Public Shared Function ReadFileUnique(path As String) As String
        parameters:
        - id: path
          type: System.String
          description: ''
        return:
          type: System.String
          description: ''
      overload: AssemblerLib.Utilities.ReadFileUnique*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.ReadFileByLines(System.String)
      commentId: M:AssemblerLib.Utilities.ReadFileByLines(System.String)
      language: CSharp
      name:
        CSharp: ReadFileByLines(String)
        VB: ReadFileByLines(String)
      nameWithType:
        CSharp: Utilities.ReadFileByLines(String)
        VB: Utilities.ReadFileByLines(String)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.ReadFileByLines(System.String)
        VB: AssemblerLib.Utilities.ReadFileByLines(System.String)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: ReadFileByLines
        path: Utilities.cs
        startLine: 1000
      summary: "\nReads a file by line\n"
      example: []
      syntax:
        content:
          CSharp: public static string[] ReadFileByLines(string path)
          VB: Public Shared Function ReadFileByLines(path As String) As String()
        parameters:
        - id: path
          type: System.String
          description: ''
        return:
          type: System.String[]
          description: ''
      overload: AssemblerLib.Utilities.ReadFileByLines*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.SaveStringsToFile(System.String,System.String,System.String[])
      commentId: M:AssemblerLib.Utilities.SaveStringsToFile(System.String,System.String,System.String[])
      language: CSharp
      name:
        CSharp: SaveStringsToFile(String, String, String[])
        VB: SaveStringsToFile(String, String, String())
      nameWithType:
        CSharp: Utilities.SaveStringsToFile(String, String, String[])
        VB: Utilities.SaveStringsToFile(String, String, String())
      qualifiedName:
        CSharp: AssemblerLib.Utilities.SaveStringsToFile(System.String, System.String, System.String[])
        VB: AssemblerLib.Utilities.SaveStringsToFile(System.String, System.String, System.String())
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: SaveStringsToFile
        path: Utilities.cs
        startLine: 1011
      summary: "\nSaves an array of strings to a file in a given path\n"
      example: []
      syntax:
        content:
          CSharp: public static void SaveStringsToFile(string directory, string fileName, string[] data)
          VB: Public Shared Sub SaveStringsToFile(directory As String, fileName As String, data As String())
        parameters:
        - id: directory
          type: System.String
          description: ''
        - id: fileName
          type: System.String
          description: ''
        - id: data
          type: System.String[]
          description: ''
      overload: AssemblerLib.Utilities.SaveStringsToFile*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.AppendToFile(System.String,System.String,System.String)
      commentId: M:AssemblerLib.Utilities.AppendToFile(System.String,System.String,System.String)
      language: CSharp
      name:
        CSharp: AppendToFile(String, String, String)
        VB: AppendToFile(String, String, String)
      nameWithType:
        CSharp: Utilities.AppendToFile(String, String, String)
        VB: Utilities.AppendToFile(String, String, String)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.AppendToFile(System.String, System.String, System.String)
        VB: AssemblerLib.Utilities.AppendToFile(System.String, System.String, System.String)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: AppendToFile
        path: Utilities.cs
        startLine: 1021
      syntax:
        content:
          CSharp: public static void AppendToFile(string directory, string fileName, string data)
          VB: Public Shared Sub AppendToFile(directory As String, fileName As String, data As String)
        parameters:
        - id: directory
          type: System.String
        - id: fileName
          type: System.String
        - id: data
          type: System.String
      overload: AssemblerLib.Utilities.AppendToFile*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.GetGHFilePath(Grasshopper.Kernel.GH_Component)
      commentId: M:AssemblerLib.Utilities.GetGHFilePath(Grasshopper.Kernel.GH_Component)
      language: CSharp
      name:
        CSharp: GetGHFilePath(GH_Component)
        VB: GetGHFilePath(GH_Component)
      nameWithType:
        CSharp: Utilities.GetGHFilePath(GH_Component)
        VB: Utilities.GetGHFilePath(GH_Component)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.GetGHFilePath(Grasshopper.Kernel.GH_Component)
        VB: AssemblerLib.Utilities.GetGHFilePath(Grasshopper.Kernel.GH_Component)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: GetGHFilePath
        path: Utilities.cs
        startLine: 1034
      summary: "\nGets the GH File Path when called from a component\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetGHFilePath(GH_Component caller)
          VB: Public Shared Function GetGHFilePath(caller As GH_Component) As String
        parameters:
        - id: caller
          type: Grasshopper.Kernel.GH_Component
          description: ''
        return:
          type: System.String
          description: ''
      overload: AssemblerLib.Utilities.GetGHFilePath*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.SerializeAssemblage(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      commentId: M:AssemblerLib.Utilities.SerializeAssemblage(System.Collections.Generic.List{AssemblerLib.AssemblyObject})
      language: CSharp
      name:
        CSharp: SerializeAssemblage(List<AssemblyObject>)
        VB: SerializeAssemblage(List(Of AssemblyObject))
      nameWithType:
        CSharp: Utilities.SerializeAssemblage(List<AssemblyObject>)
        VB: Utilities.SerializeAssemblage(List(Of AssemblyObject))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.SerializeAssemblage(System.Collections.Generic.List<AssemblerLib.AssemblyObject>)
        VB: AssemblerLib.Utilities.SerializeAssemblage(System.Collections.Generic.List(Of AssemblerLib.AssemblyObject))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: SerializeAssemblage
        path: Utilities.cs
        startLine: 1056
      summary: "\nSerializes an assemblage into a string array for subsequent file saving\n"
      example: []
      syntax:
        content:
          CSharp: public static string[] SerializeAssemblage(List<AssemblyObject> assemblage)
          VB: Public Shared Function SerializeAssemblage(assemblage As List(Of AssemblyObject)) As String()
        parameters:
        - id: assemblage
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
        return:
          type: System.String[]
          description: ''
      overload: AssemblerLib.Utilities.SerializeAssemblage*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.DeserializeAssemblage(System.String[])
      commentId: M:AssemblerLib.Utilities.DeserializeAssemblage(System.String[])
      language: CSharp
      name:
        CSharp: DeserializeAssemblage(String[])
        VB: DeserializeAssemblage(String())
      nameWithType:
        CSharp: Utilities.DeserializeAssemblage(String[])
        VB: Utilities.DeserializeAssemblage(String())
      qualifiedName:
        CSharp: AssemblerLib.Utilities.DeserializeAssemblage(System.String[])
        VB: AssemblerLib.Utilities.DeserializeAssemblage(System.String())
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: DeserializeAssemblage
        path: Utilities.cs
        startLine: 1078
      summary: "\nDeserializes a string array into an AssemblyObject assemblage after file loading\n"
      example: []
      syntax:
        content:
          CSharp: public static List<AssemblyObject> DeserializeAssemblage(string[] AOjson)
          VB: Public Shared Function DeserializeAssemblage(AOjson As String()) As List(Of AssemblyObject)
        parameters:
        - id: AOjson
          type: System.String[]
          description: ''
        return:
          type: System.Collections.Generic.List{AssemblerLib.AssemblyObject}
          description: ''
      overload: AssemblerLib.Utilities.DeserializeAssemblage*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.IsPointInMesh(Rhino.Geometry.Mesh,Rhino.Geometry.Point3d,System.Double)
      commentId: M:AssemblerLib.Utilities.IsPointInMesh(Rhino.Geometry.Mesh,Rhino.Geometry.Point3d,System.Double)
      language: CSharp
      name:
        CSharp: IsPointInMesh(Mesh, Point3d, Double)
        VB: IsPointInMesh(Mesh, Point3d, Double)
      nameWithType:
        CSharp: Utilities.IsPointInMesh(Mesh, Point3d, Double)
        VB: Utilities.IsPointInMesh(Mesh, Point3d, Double)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.IsPointInMesh(Rhino.Geometry.Mesh, Rhino.Geometry.Point3d, System.Double)
        VB: AssemblerLib.Utilities.IsPointInMesh(Rhino.Geometry.Mesh, Rhino.Geometry.Point3d, System.Double)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: IsPointInMesh
        path: Utilities.cs
        startLine: 1104
      summary: "\nChecks if point P is inside a Mesh by checking angle of projection vector with face normal\n"
      remarks: This returns some false positives - use Mesh.IsPointInside() native function instead
      example: []
      syntax:
        content:
          CSharp: public static bool IsPointInMesh(Mesh mesh, Point3d testPoint, double searchDist)
          VB: Public Shared Function IsPointInMesh(mesh As Mesh, testPoint As Point3d, searchDist As Double) As Boolean
        parameters:
        - id: mesh
          type: Rhino.Geometry.Mesh
        - id: testPoint
          type: Rhino.Geometry.Point3d
          description: the point to check
        - id: searchDist
          type: System.Double
          description: maximum distance for inclusion check
        return:
          type: System.Boolean
          description: true if point is inside the mesh
      overload: AssemblerLib.Utilities.IsPointInMesh*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.MeshOffsetWeightedAngle(Rhino.Geometry.Mesh,System.Double)
      commentId: M:AssemblerLib.Utilities.MeshOffsetWeightedAngle(Rhino.Geometry.Mesh,System.Double)
      language: CSharp
      name:
        CSharp: MeshOffsetWeightedAngle(Mesh, Double)
        VB: MeshOffsetWeightedAngle(Mesh, Double)
      nameWithType:
        CSharp: Utilities.MeshOffsetWeightedAngle(Mesh, Double)
        VB: Utilities.MeshOffsetWeightedAngle(Mesh, Double)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.MeshOffsetWeightedAngle(Rhino.Geometry.Mesh, System.Double)
        VB: AssemblerLib.Utilities.MeshOffsetWeightedAngle(Rhino.Geometry.Mesh, System.Double)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: MeshOffsetWeightedAngle
        path: Utilities.cs
        startLine: 1120
      summary: "\nImproves Mesh Offset using a bespoke method for Mesh normal calculation, based on face angle weighing\nreference: https://stackoverflow.com/questions/25100120/how-does-blender-calculate-vertex-normals\nand: http://www.bytehazard.com/articles/vertnorm.html\n"
      remarks: This method generates better offset meshes in most cases (concave, convex, comples shapes, etc.)
      example: []
      syntax:
        content:
          CSharp: public static Mesh MeshOffsetWeightedAngle(Mesh mesh, double offsetDistance)
          VB: Public Shared Function MeshOffsetWeightedAngle(mesh As Mesh, offsetDistance As Double) As Mesh
        parameters:
        - id: mesh
          type: Rhino.Geometry.Mesh
          description: ''
        - id: offsetDistance
          type: System.Double
          description: ''
        return:
          type: Rhino.Geometry.Mesh
          description: An offset Mesh
      overload: AssemblerLib.Utilities.MeshOffsetWeightedAngle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.ComputeWeightedNormals(Rhino.Geometry.Mesh)
      commentId: M:AssemblerLib.Utilities.ComputeWeightedNormals(Rhino.Geometry.Mesh)
      language: CSharp
      name:
        CSharp: ComputeWeightedNormals(Mesh)
        VB: ComputeWeightedNormals(Mesh)
      nameWithType:
        CSharp: Utilities.ComputeWeightedNormals(Mesh)
        VB: Utilities.ComputeWeightedNormals(Mesh)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.ComputeWeightedNormals(Rhino.Geometry.Mesh)
        VB: AssemblerLib.Utilities.ComputeWeightedNormals(Rhino.Geometry.Mesh)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: ComputeWeightedNormals
        path: Utilities.cs
        startLine: 1156
      summary: "\nComputes Mesh normals weighted by the face angle at each vertex\nMesh weighted normals implemented from the tips at the folowing pages:\nhttps://stackoverflow.com/questions/25100120/how-does-blender-calculate-vertex-normals\nhttp://www.bytehazard.com/articles/vertnorm.html\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3d[] ComputeWeightedNormals(Mesh mesh)
          VB: Public Shared Function ComputeWeightedNormals(mesh As Mesh) As Vector3d()
        parameters:
        - id: mesh
          type: Rhino.Geometry.Mesh
          description: ''
        return:
          type: Rhino.Geometry.Vector3d[]
          description: Weighted Normals as a Vector3d array
      overload: AssemblerLib.Utilities.ComputeWeightedNormals*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.GetSihouette(Rhino.Geometry.Mesh)
      commentId: M:AssemblerLib.Utilities.GetSihouette(Rhino.Geometry.Mesh)
      language: CSharp
      name:
        CSharp: GetSihouette(Mesh)
        VB: GetSihouette(Mesh)
      nameWithType:
        CSharp: Utilities.GetSihouette(Mesh)
        VB: Utilities.GetSihouette(Mesh)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.GetSihouette(Rhino.Geometry.Mesh)
        VB: AssemblerLib.Utilities.GetSihouette(Rhino.Geometry.Mesh)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: GetSihouette
        path: Utilities.cs
        startLine: 1224
      syntax:
        content:
          CSharp: public static GH_Line[] GetSihouette(Mesh M)
          VB: Public Shared Function GetSihouette(M As Mesh) As GH_Line()
        parameters:
        - id: M
          type: Rhino.Geometry.Mesh
        return:
          type: Grasshopper.Kernel.Types.GH_Line[]
      overload: AssemblerLib.Utilities.GetSihouette*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.AverageUnitized(Rhino.Geometry.Vector3d[])
      commentId: M:AssemblerLib.Utilities.AverageUnitized(Rhino.Geometry.Vector3d[])
      language: CSharp
      name:
        CSharp: AverageUnitized(Vector3d[])
        VB: AverageUnitized(Vector3d())
      nameWithType:
        CSharp: Utilities.AverageUnitized(Vector3d[])
        VB: Utilities.AverageUnitized(Vector3d())
      qualifiedName:
        CSharp: AssemblerLib.Utilities.AverageUnitized(Rhino.Geometry.Vector3d[])
        VB: AssemblerLib.Utilities.AverageUnitized(Rhino.Geometry.Vector3d())
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: AverageUnitized
        path: Utilities.cs
        startLine: 1263
      summary: "\nAverage Unitized Vector from a Vector Array - unitizes vector result at each step\nUseful for Vertex normal calculations\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3d AverageUnitized(Vector3d[] vectors)
          VB: Public Shared Function AverageUnitized(vectors As Vector3d()) As Vector3d
        parameters:
        - id: vectors
          type: Rhino.Geometry.Vector3d[]
          description: ''
        return:
          type: Rhino.Geometry.Vector3d
          description: The average normalized vector
      overload: AssemblerLib.Utilities.AverageUnitized*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.AverageUnitized(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      commentId: M:AssemblerLib.Utilities.AverageUnitized(System.Collections.Generic.List{Rhino.Geometry.Vector3d})
      language: CSharp
      name:
        CSharp: AverageUnitized(List<Vector3d>)
        VB: AverageUnitized(List(Of Vector3d))
      nameWithType:
        CSharp: Utilities.AverageUnitized(List<Vector3d>)
        VB: Utilities.AverageUnitized(List(Of Vector3d))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.AverageUnitized(System.Collections.Generic.List<Rhino.Geometry.Vector3d>)
        VB: AssemblerLib.Utilities.AverageUnitized(System.Collections.Generic.List(Of Rhino.Geometry.Vector3d))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: AverageUnitized
        path: Utilities.cs
        startLine: 1281
      summary: "\nAverage Unitized Vector from a Vector List - unitizes vector result at each step\nUseful for Vertex normal calculations\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3d AverageUnitized(List<Vector3d> vectors)
          VB: Public Shared Function AverageUnitized(vectors As List(Of Vector3d)) As Vector3d
        parameters:
        - id: vectors
          type: System.Collections.Generic.List{Rhino.Geometry.Vector3d}
          description: ''
        return:
          type: Rhino.Geometry.Vector3d
          description: The average normalized
      overload: AssemblerLib.Utilities.AverageUnitized*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.GetUniqueVectors(Rhino.Geometry.Vector3d[],System.Double)
      commentId: M:AssemblerLib.Utilities.GetUniqueVectors(Rhino.Geometry.Vector3d[],System.Double)
      language: CSharp
      name:
        CSharp: GetUniqueVectors(Vector3d[], Double)
        VB: GetUniqueVectors(Vector3d(), Double)
      nameWithType:
        CSharp: Utilities.GetUniqueVectors(Vector3d[], Double)
        VB: Utilities.GetUniqueVectors(Vector3d(), Double)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.GetUniqueVectors(Rhino.Geometry.Vector3d[], System.Double)
        VB: AssemblerLib.Utilities.GetUniqueVectors(Rhino.Geometry.Vector3d(), System.Double)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: GetUniqueVectors
        path: Utilities.cs
        startLine: 1299
      summary: "\nRemoves duplicate vectors (within tolerance) from an array, returing only unique vectors\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3d[] GetUniqueVectors(Vector3d[] vectors, double angleTolerance)
          VB: Public Shared Function GetUniqueVectors(vectors As Vector3d(), angleTolerance As Double) As Vector3d()
        parameters:
        - id: vectors
          type: Rhino.Geometry.Vector3d[]
          description: ''
        - id: angleTolerance
          type: System.Double
          description: ''
        return:
          type: Rhino.Geometry.Vector3d[]
          description: Array of unique vectors
      overload: AssemblerLib.Utilities.GetUniqueVectors*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.LerpColor(System.Drawing.Color,System.Drawing.Color,System.Double)
      commentId: M:AssemblerLib.Utilities.LerpColor(System.Drawing.Color,System.Drawing.Color,System.Double)
      language: CSharp
      name:
        CSharp: LerpColor(Color, Color, Double)
        VB: LerpColor(Color, Color, Double)
      nameWithType:
        CSharp: Utilities.LerpColor(Color, Color, Double)
        VB: Utilities.LerpColor(Color, Color, Double)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.LerpColor(System.Drawing.Color, System.Drawing.Color, System.Double)
        VB: AssemblerLib.Utilities.LerpColor(System.Drawing.Color, System.Drawing.Color, System.Double)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: LerpColor
        path: Utilities.cs
        startLine: 1335
      summary: "\nLinear interpolate between colors\n"
      example: []
      syntax:
        content:
          CSharp: public static Color LerpColor(Color a, Color b, double t)
          VB: Public Shared Function LerpColor(a As Color, b As Color, t As Double) As Color
        parameters:
        - id: a
          type: System.Drawing.Color
          description: ''
        - id: b
          type: System.Drawing.Color
          description: ''
        - id: t
          type: System.Double
          description: ''
        return:
          type: System.Drawing.Color
          description: ''
      overload: AssemblerLib.Utilities.LerpColor*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.DegreesToRadians(System.Double)
      commentId: M:AssemblerLib.Utilities.DegreesToRadians(System.Double)
      language: CSharp
      name:
        CSharp: DegreesToRadians(Double)
        VB: DegreesToRadians(Double)
      nameWithType:
        CSharp: Utilities.DegreesToRadians(Double)
        VB: Utilities.DegreesToRadians(Double)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.DegreesToRadians(System.Double)
        VB: AssemblerLib.Utilities.DegreesToRadians(System.Double)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: DegreesToRadians
        path: Utilities.cs
        startLine: 1353
      summary: "\nConverts an angle in degrees to radians\n"
      example: []
      syntax:
        content:
          CSharp: public static double DegreesToRadians(double angle)
          VB: Public Shared Function DegreesToRadians(angle As Double) As Double
        parameters:
        - id: angle
          type: System.Double
          description: The angle to convert (in degrees)
        return:
          type: System.Double
          description: ''
      overload: AssemblerLib.Utilities.DegreesToRadians*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.RadiansToDegrees(System.Double)
      commentId: M:AssemblerLib.Utilities.RadiansToDegrees(System.Double)
      language: CSharp
      name:
        CSharp: RadiansToDegrees(Double)
        VB: RadiansToDegrees(Double)
      nameWithType:
        CSharp: Utilities.RadiansToDegrees(Double)
        VB: Utilities.RadiansToDegrees(Double)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.RadiansToDegrees(System.Double)
        VB: AssemblerLib.Utilities.RadiansToDegrees(System.Double)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: RadiansToDegrees
        path: Utilities.cs
        startLine: 1363
      summary: "\nConverts an angle in radians to degrees\n"
      example: []
      syntax:
        content:
          CSharp: public static double RadiansToDegrees(double angle)
          VB: Public Shared Function RadiansToDegrees(angle As Double) As Double
        parameters:
        - id: angle
          type: System.Double
          description: The angle to convert (in radians)
        return:
          type: System.Double
          description: ''
      overload: AssemblerLib.Utilities.RadiansToDegrees*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.NormalizeRange(System.Double[])
      commentId: M:AssemblerLib.Utilities.NormalizeRange(System.Double[])
      language: CSharp
      name:
        CSharp: NormalizeRange(Double[])
        VB: NormalizeRange(Double())
      nameWithType:
        CSharp: Utilities.NormalizeRange(Double[])
        VB: Utilities.NormalizeRange(Double())
      qualifiedName:
        CSharp: AssemblerLib.Utilities.NormalizeRange(System.Double[])
        VB: AssemblerLib.Utilities.NormalizeRange(System.Double())
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: NormalizeRange
        path: Utilities.cs
        startLine: 1373
      summary: "\nNormalizes an array of real numbers\n"
      example: []
      syntax:
        content:
          CSharp: public static double[] NormalizeRange(double[] values)
          VB: Public Shared Function NormalizeRange(values As Double()) As Double()
        parameters:
        - id: values
          type: System.Double[]
          description: ''
        return:
          type: System.Double[]
          description: ''
      overload: AssemblerLib.Utilities.NormalizeRange*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.NormalizeRange(System.Collections.Generic.List{System.Double})
      commentId: M:AssemblerLib.Utilities.NormalizeRange(System.Collections.Generic.List{System.Double})
      language: CSharp
      name:
        CSharp: NormalizeRange(List<Double>)
        VB: NormalizeRange(List(Of Double))
      nameWithType:
        CSharp: Utilities.NormalizeRange(List<Double>)
        VB: Utilities.NormalizeRange(List(Of Double))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.NormalizeRange(System.Collections.Generic.List<System.Double>)
        VB: AssemblerLib.Utilities.NormalizeRange(System.Collections.Generic.List(Of System.Double))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: NormalizeRange
        path: Utilities.cs
        startLine: 1395
      summary: "\nNormalizes a List of real numbers\n"
      example: []
      syntax:
        content:
          CSharp: public static List<double> NormalizeRange(List<double> values)
          VB: Public Shared Function NormalizeRange(values As List(Of Double)) As List(Of Double)
        parameters:
        - id: values
          type: System.Collections.Generic.List{System.Double}
          description: ''
        return:
          type: System.Collections.Generic.List{System.Double}
          description: ''
      overload: AssemblerLib.Utilities.NormalizeRange*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.NormalizeRanges(System.Double[][])
      commentId: M:AssemblerLib.Utilities.NormalizeRanges(System.Double[][])
      language: CSharp
      name:
        CSharp: NormalizeRanges(Double[][])
        VB: NormalizeRanges(Double()())
      nameWithType:
        CSharp: Utilities.NormalizeRanges(Double[][])
        VB: Utilities.NormalizeRanges(Double()())
      qualifiedName:
        CSharp: AssemblerLib.Utilities.NormalizeRanges(System.Double[][])
        VB: AssemblerLib.Utilities.NormalizeRanges(System.Double()())
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: NormalizeRanges
        path: Utilities.cs
        startLine: 1417
      summary: "\nNormalizes a Jagged array of real numbers\n"
      example: []
      syntax:
        content:
          CSharp: public static double[][] NormalizeRanges(double[][] values)
          VB: Public Shared Function NormalizeRanges(values As Double()()) As Double()()
        parameters:
        - id: values
          type: System.Double[][]
          description: ''
        return:
          type: System.Double[][]
          description: ''
      overload: AssemblerLib.Utilities.NormalizeRanges*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.NormalizeRanges(Grasshopper.DataTree{System.Double})
      commentId: M:AssemblerLib.Utilities.NormalizeRanges(Grasshopper.DataTree{System.Double})
      language: CSharp
      name:
        CSharp: NormalizeRanges(DataTree<Double>)
        VB: NormalizeRanges(DataTree(Of Double))
      nameWithType:
        CSharp: Utilities.NormalizeRanges(DataTree<Double>)
        VB: Utilities.NormalizeRanges(DataTree(Of Double))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.NormalizeRanges(Grasshopper.DataTree<System.Double>)
        VB: AssemblerLib.Utilities.NormalizeRanges(Grasshopper.DataTree(Of System.Double))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: NormalizeRanges
        path: Utilities.cs
        startLine: 1486
      summary: "\nNormalizes a DataTree of real numbers\n"
      example: []
      syntax:
        content:
          CSharp: public static DataTree<double> NormalizeRanges(DataTree<double> values)
          VB: Public Shared Function NormalizeRanges(values As DataTree(Of Double)) As DataTree(Of Double)
        parameters:
        - id: values
          type: Grasshopper.DataTree{System.Double}
          description: ''
        return:
          type: Grasshopper.DataTree{System.Double}
          description: ''
      overload: AssemblerLib.Utilities.NormalizeRanges*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.ToDataTree``1(``0[][])
      commentId: M:AssemblerLib.Utilities.ToDataTree``1(``0[][])
      language: CSharp
      name:
        CSharp: ToDataTree<T>(T[][])
        VB: ToDataTree(Of T)(T()())
      nameWithType:
        CSharp: Utilities.ToDataTree<T>(T[][])
        VB: Utilities.ToDataTree(Of T)(T()())
      qualifiedName:
        CSharp: AssemblerLib.Utilities.ToDataTree<T>(T[][])
        VB: AssemblerLib.Utilities.ToDataTree(Of T)(T()())
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: ToDataTree
        path: Utilities.cs
        startLine: 1528
      summary: "\nConverts a jagged array into a DataTree of the same type\n"
      example: []
      syntax:
        content:
          CSharp: public static DataTree<T> ToDataTree<T>(T[][] jArray)
          VB: Public Shared Function ToDataTree(Of T)(jArray As T()()) As DataTree(Of T)
        parameters:
        - id: jArray
          type: '{T}[][]'
          description: ''
        typeParameters:
        - id: T
          description: ''
        return:
          type: Grasshopper.DataTree{{T}}
          description: ''
      overload: AssemblerLib.Utilities.ToDataTree*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.ToDataTree``1(System.Collections.Generic.List{``0[]})
      commentId: M:AssemblerLib.Utilities.ToDataTree``1(System.Collections.Generic.List{``0[]})
      language: CSharp
      name:
        CSharp: ToDataTree<T>(List<T[]>)
        VB: ToDataTree(Of T)(List(Of T()))
      nameWithType:
        CSharp: Utilities.ToDataTree<T>(List<T[]>)
        VB: Utilities.ToDataTree(Of T)(List(Of T()))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.ToDataTree<T>(System.Collections.Generic.List<T[]>)
        VB: AssemblerLib.Utilities.ToDataTree(Of T)(System.Collections.Generic.List(Of T()))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: ToDataTree
        path: Utilities.cs
        startLine: 1544
      summary: "\nConverts a list of arrays into a DataTree of the same type\n"
      example: []
      syntax:
        content:
          CSharp: public static DataTree<T> ToDataTree<T>(List<T[]> arraysList)
          VB: Public Shared Function ToDataTree(Of T)(arraysList As List(Of T())) As DataTree(Of T)
        parameters:
        - id: arraysList
          type: System.Collections.Generic.List{{T}[]}
          description: ''
        typeParameters:
        - id: T
          description: ''
        return:
          type: Grasshopper.DataTree{{T}}
          description: ''
      overload: AssemblerLib.Utilities.ToDataTree*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.ToJaggedArray``1(Grasshopper.DataTree{``0})
      commentId: M:AssemblerLib.Utilities.ToJaggedArray``1(Grasshopper.DataTree{``0})
      language: CSharp
      name:
        CSharp: ToJaggedArray<T>(DataTree<T>)
        VB: ToJaggedArray(Of T)(DataTree(Of T))
      nameWithType:
        CSharp: Utilities.ToJaggedArray<T>(DataTree<T>)
        VB: Utilities.ToJaggedArray(Of T)(DataTree(Of T))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.ToJaggedArray<T>(Grasshopper.DataTree<T>)
        VB: AssemblerLib.Utilities.ToJaggedArray(Of T)(Grasshopper.DataTree(Of T))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: ToJaggedArray
        path: Utilities.cs
        startLine: 1560
      summary: "\nConverts a DataTree into a jagged array of the same type\\nThe array length is equal to the number of branches, regardless of paths\n"
      example: []
      syntax:
        content:
          CSharp: public static T[][] ToJaggedArray<T>(DataTree<T> tree)
          VB: Public Shared Function ToJaggedArray(Of T)(tree As DataTree(Of T)) As T()()
        parameters:
        - id: tree
          type: Grasshopper.DataTree{{T}}
          description: ''
        typeParameters:
        - id: T
          description: ''
        return:
          type: '{T}[][]'
          description: ''
      overload: AssemblerLib.Utilities.ToJaggedArray*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.ToListOfArrays``1(Grasshopper.DataTree{``0})
      commentId: M:AssemblerLib.Utilities.ToListOfArrays``1(Grasshopper.DataTree{``0})
      language: CSharp
      name:
        CSharp: ToListOfArrays<T>(DataTree<T>)
        VB: ToListOfArrays(Of T)(DataTree(Of T))
      nameWithType:
        CSharp: Utilities.ToListOfArrays<T>(DataTree<T>)
        VB: Utilities.ToListOfArrays(Of T)(DataTree(Of T))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.ToListOfArrays<T>(Grasshopper.DataTree<T>)
        VB: AssemblerLib.Utilities.ToListOfArrays(Of T)(Grasshopper.DataTree(Of T))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: ToListOfArrays
        path: Utilities.cs
        startLine: 1577
      summary: "\nConverts a DataTree into a list of arrays of the same type\\nThe list count is equal to the number of branches, regardless of paths\n"
      example: []
      syntax:
        content:
          CSharp: public static List<T[]> ToListOfArrays<T>(DataTree<T> tree)
          VB: Public Shared Function ToListOfArrays(Of T)(tree As DataTree(Of T)) As List(Of T())
        parameters:
        - id: tree
          type: Grasshopper.DataTree{{T}}
          description: ''
        typeParameters:
        - id: T
          description: ''
        return:
          type: System.Collections.Generic.List{{T}[]}
          description: ''
      overload: AssemblerLib.Utilities.ToListOfArrays*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.CloneDictionaryWithValues``2(System.Collections.Generic.Dictionary{``0,``1})
      commentId: M:AssemblerLib.Utilities.CloneDictionaryWithValues``2(System.Collections.Generic.Dictionary{``0,``1})
      language: CSharp
      name:
        CSharp: CloneDictionaryWithValues<TKey, TValue>(Dictionary<TKey, TValue>)
        VB: CloneDictionaryWithValues(Of TKey, TValue)(Dictionary(Of TKey, TValue))
      nameWithType:
        CSharp: Utilities.CloneDictionaryWithValues<TKey, TValue>(Dictionary<TKey, TValue>)
        VB: Utilities.CloneDictionaryWithValues(Of TKey, TValue)(Dictionary(Of TKey, TValue))
      qualifiedName:
        CSharp: AssemblerLib.Utilities.CloneDictionaryWithValues<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>)
        VB: AssemblerLib.Utilities.CloneDictionaryWithValues(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue))
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: CloneDictionaryWithValues
        path: Utilities.cs
        startLine: 1595
      summary: "\nClones a Dictionary and its values - as seen here: https://stackoverflow.com/questions/139592/what-is-the-best-way-to-clone-deep-copy-a-net-generic-dictionarystring-t\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<TKey, TValue> CloneDictionaryWithValues<TKey, TValue>(Dictionary<TKey, TValue> original)
          VB: Public Shared Function CloneDictionaryWithValues(Of TKey, TValue)(original As Dictionary(Of TKey, TValue)) As Dictionary(Of TKey, TValue)
        parameters:
        - id: original
          type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
          description: ''
        typeParameters:
        - id: TKey
          description: ''
        - id: TValue
          description: ''
        return:
          type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
          description: ''
      overload: AssemblerLib.Utilities.CloneDictionaryWithValues*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.RenameKey``2(System.Collections.Generic.Dictionary{``0,``1},``0,``0)
      commentId: M:AssemblerLib.Utilities.RenameKey``2(System.Collections.Generic.Dictionary{``0,``1},``0,``0)
      language: CSharp
      name:
        CSharp: RenameKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TKey)
        VB: RenameKey(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TKey)
      nameWithType:
        CSharp: Utilities.RenameKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TKey)
        VB: Utilities.RenameKey(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TKey)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.RenameKey<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TKey)
        VB: AssemblerLib.Utilities.RenameKey(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TKey)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: RenameKey
        path: Utilities.cs
        startLine: 1614
      summary: "\nRenames a key in a Dictionary - as seen here: https://stackoverflow.com/questions/6499334/best-way-to-change-dictionary-key\n"
      example: []
      syntax:
        content:
          CSharp: public static bool RenameKey<TKey, TValue>(Dictionary<TKey, TValue> dictionary, TKey fromKey, TKey toKey)
          VB: Public Shared Function RenameKey(Of TKey, TValue)(dictionary As Dictionary(Of TKey, TValue), fromKey As TKey, toKey As TKey) As Boolean
        parameters:
        - id: dictionary
          type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
          description: ''
        - id: fromKey
          type: '{TKey}'
          description: ''
        - id: toKey
          type: '{TKey}'
          description: ''
        typeParameters:
        - id: TKey
          description: ''
        - id: TValue
          description: ''
        return:
          type: System.Boolean
          description: true if successful
      overload: AssemblerLib.Utilities.RenameKey*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: AssemblerLib.Utilities.StartWatch(System.Diagnostics.Stopwatch)
      commentId: M:AssemblerLib.Utilities.StartWatch(System.Diagnostics.Stopwatch)
      language: CSharp
      name:
        CSharp: StartWatch(Stopwatch)
        VB: StartWatch(Stopwatch)
      nameWithType:
        CSharp: Utilities.StartWatch(Stopwatch)
        VB: Utilities.StartWatch(Stopwatch)
      qualifiedName:
        CSharp: AssemblerLib.Utilities.StartWatch(System.Diagnostics.Stopwatch)
        VB: AssemblerLib.Utilities.StartWatch(System.Diagnostics.Stopwatch)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/Utilities.cs
        id: StartWatch
        path: Utilities.cs
        startLine: 1627
      syntax:
        content:
          CSharp: public static long StartWatch(Stopwatch stopWatch)
          VB: Public Shared Function StartWatch(stopWatch As Stopwatch) As Long
        parameters:
        - id: stopWatch
          type: System.Diagnostics.Stopwatch
        return:
          type: System.Int64
      overload: AssemblerLib.Utilities.StartWatch*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: AssemblerLib.XData
    commentId: T:AssemblerLib.XData
    language: CSharp
    name:
      CSharp: XData
      VB: XData
    nameWithType:
      CSharp: XData
      VB: XData
    qualifiedName:
      CSharp: AssemblerLib.XData
      VB: AssemblerLib.XData
    type: Class
    assemblies:
    - AssemblerLib
    namespace: AssemblerLib
    source:
      remote:
        path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/XData.cs
      id: XData
      path: XData.cs
      startLine: 9
    summary: "\nA simple Xtra/Xtended data container\n"
    example: []
    syntax:
      content:
        CSharp: public class XData
        VB: Public Class XData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: AssemblerLib.XData.data
      commentId: F:AssemblerLib.XData.data
      language: CSharp
      name:
        CSharp: data
        VB: data
      nameWithType:
        CSharp: XData.data
        VB: XData.data
      qualifiedName:
        CSharp: AssemblerLib.XData.data
        VB: AssemblerLib.XData.data
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/XData.cs
        id: data
        path: XData.cs
        startLine: 14
      summary: "\ngeneric data container as list\n"
      example: []
      syntax:
        content:
          CSharp: public List<object> data
          VB: Public data As List(Of Object)
        return:
          type: System.Collections.Generic.List{System.Object}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.XData.label
      commentId: F:AssemblerLib.XData.label
      language: CSharp
      name:
        CSharp: label
        VB: label
      nameWithType:
        CSharp: XData.label
        VB: XData.label
      qualifiedName:
        CSharp: AssemblerLib.XData.label
        VB: AssemblerLib.XData.label
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/XData.cs
        id: label
        path: XData.cs
        startLine: 18
      summary: "\nlabel for the XData\n"
      example: []
      syntax:
        content:
          CSharp: public readonly string label
          VB: Public ReadOnly label As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.XData.refPlane
      commentId: F:AssemblerLib.XData.refPlane
      language: CSharp
      name:
        CSharp: refPlane
        VB: refPlane
      nameWithType:
        CSharp: XData.refPlane
        VB: XData.refPlane
      qualifiedName:
        CSharp: AssemblerLib.XData.refPlane
        VB: AssemblerLib.XData.refPlane
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/XData.cs
        id: refPlane
        path: XData.cs
        startLine: 22
      summary: "\nReference Plane for XData\n"
      example: []
      syntax:
        content:
          CSharp: public Plane refPlane
          VB: Public refPlane As Plane
        return:
          type: Rhino.Geometry.Plane
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.XData.AOName
      commentId: F:AssemblerLib.XData.AOName
      language: CSharp
      name:
        CSharp: AOName
        VB: AOName
      nameWithType:
        CSharp: XData.AOName
        VB: XData.AOName
      qualifiedName:
        CSharp: AssemblerLib.XData.AOName
        VB: AssemblerLib.XData.AOName
      type: Field
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/XData.cs
        id: AOName
        path: XData.cs
        startLine: 26
      summary: "\nAssemblyObject name for XData association\n"
      example: []
      syntax:
        content:
          CSharp: public readonly string AOName
          VB: Public ReadOnly AOName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: AssemblerLib.XData.#ctor(System.Collections.Generic.List{System.Object},System.String,Rhino.Geometry.Plane,System.String)
      commentId: M:AssemblerLib.XData.#ctor(System.Collections.Generic.List{System.Object},System.String,Rhino.Geometry.Plane,System.String)
      language: CSharp
      name:
        CSharp: XData(List<Object>, String, Plane, String)
        VB: XData(List(Of Object), String, Plane, String)
      nameWithType:
        CSharp: XData.XData(List<Object>, String, Plane, String)
        VB: XData.XData(List(Of Object), String, Plane, String)
      qualifiedName:
        CSharp: AssemblerLib.XData.XData(System.Collections.Generic.List<System.Object>, System.String, Rhino.Geometry.Plane, System.String)
        VB: AssemblerLib.XData.XData(System.Collections.Generic.List(Of System.Object), System.String, Rhino.Geometry.Plane, System.String)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/XData.cs
        id: .ctor
        path: XData.cs
        startLine: 44
      summary: "\nConstructs an Xdata item\n"
      example: []
      syntax:
        content:
          CSharp: public XData(List<object> data, string label, Plane refPlane, string AOName)
          VB: Public Sub New(data As List(Of Object), label As String, refPlane As Plane, AOName As String)
        parameters:
        - id: data
          type: System.Collections.Generic.List{System.Object}
          description: ''
        - id: label
          type: System.String
          description: ''
        - id: refPlane
          type: Rhino.Geometry.Plane
          description: ''
        - id: AOName
          type: System.String
          description: ''
      overload: AssemblerLib.XData.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.XData.#ctor(AssemblerLib.XData)
      commentId: M:AssemblerLib.XData.#ctor(AssemblerLib.XData)
      language: CSharp
      name:
        CSharp: XData(XData)
        VB: XData(XData)
      nameWithType:
        CSharp: XData.XData(XData)
        VB: XData.XData(XData)
      qualifiedName:
        CSharp: AssemblerLib.XData.XData(AssemblerLib.XData)
        VB: AssemblerLib.XData.XData(AssemblerLib.XData)
      type: Constructor
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/XData.cs
        id: .ctor
        path: XData.cs
        startLine: 56
      summary: "\nDuplicate Method\n"
      example: []
      syntax:
        content:
          CSharp: public XData(XData otherXData)
          VB: Public Sub New(otherXData As XData)
        parameters:
        - id: otherXData
          type: AssemblerLib.XData
          description: ''
      overload: AssemblerLib.XData.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.XData.XCopy(AssemblerLib.XData)
      commentId: M:AssemblerLib.XData.XCopy(AssemblerLib.XData)
      language: CSharp
      name:
        CSharp: XCopy(XData)
        VB: XCopy(XData)
      nameWithType:
        CSharp: XData.XCopy(XData)
        VB: XData.XCopy(XData)
      qualifiedName:
        CSharp: AssemblerLib.XData.XCopy(AssemblerLib.XData)
        VB: AssemblerLib.XData.XCopy(AssemblerLib.XData)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/XData.cs
        id: XCopy
        path: XData.cs
        startLine: 71
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public XData XCopy(XData otherXDataCopy)
          VB: Public Function XCopy(otherXDataCopy As XData) As XData
        parameters:
        - id: otherXDataCopy
          type: AssemblerLib.XData
          description: ''
        return:
          type: AssemblerLib.XData
          description: ''
      overload: AssemblerLib.XData.XCopy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: AssemblerLib.XData.Transform(Rhino.Geometry.Transform)
      commentId: M:AssemblerLib.XData.Transform(Rhino.Geometry.Transform)
      language: CSharp
      name:
        CSharp: Transform(Transform)
        VB: Transform(Transform)
      nameWithType:
        CSharp: XData.Transform(Transform)
        VB: XData.Transform(Transform)
      qualifiedName:
        CSharp: AssemblerLib.XData.Transform(Rhino.Geometry.Transform)
        VB: AssemblerLib.XData.Transform(Rhino.Geometry.Transform)
      type: Method
      assemblies:
      - AssemblerLib
      namespace: AssemblerLib
      source:
        remote:
          path: C:/Users/aless/Documents/@ code/GH code/@ Assembler/Assembler/AssemblerLib/XData.cs
        id: Transform
        path: XData.cs
        startLine: 84
      summary: "\nApply a transformation to the XData\n"
      example: []
      syntax:
        content:
          CSharp: public void Transform(Transform xForm)
          VB: Public Sub Transform(xForm As Transform)
        parameters:
        - id: xForm
          type: Rhino.Geometry.Transform
          description: ''
      overload: AssemblerLib.XData.Transform*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{AssemblerLib.AssemblyObject}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: AssemblerLib.AssemblyObject
        name: AssemblyObject
        nameWithType: AssemblyObject
        qualifiedName: AssemblerLib.AssemblyObject
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: AssemblerLib.AssemblyObject
        name: AssemblyObject
        nameWithType: AssemblyObject
        qualifiedName: AssemblerLib.AssemblyObject
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{AssemblerLib.AssemblyObject}
  Rhino.Geometry:
    name:
      CSharp:
      - name: Rhino.Geometry
        nameWithType: Rhino.Geometry
        qualifiedName: Rhino.Geometry
        isExternal: true
      VB:
      - name: Rhino.Geometry
        nameWithType: Rhino.Geometry
        qualifiedName: Rhino.Geometry
    isDefinition: true
    commentId: N:Rhino.Geometry
  Rhino.Geometry.Mesh:
    name:
      CSharp:
      - id: Rhino.Geometry.Mesh
        name: Mesh
        nameWithType: Mesh
        qualifiedName: Rhino.Geometry.Mesh
        isExternal: true
      VB:
      - id: Rhino.Geometry.Mesh
        name: Mesh
        nameWithType: Mesh
        qualifiedName: Rhino.Geometry.Mesh
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Mesh
  Rhino.Geometry.Plane:
    name:
      CSharp:
      - id: Rhino.Geometry.Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Rhino.Geometry.Plane
        isExternal: true
      VB:
      - id: Rhino.Geometry.Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Rhino.Geometry.Plane
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Plane
  AssemblerLib.Handle[]:
    name:
      CSharp:
      - id: AssemblerLib.Handle
        name: Handle
        nameWithType: Handle
        qualifiedName: AssemblerLib.Handle
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: AssemblerLib.Handle
        name: Handle
        nameWithType: Handle
        qualifiedName: AssemblerLib.Handle
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Rhino.Geometry.Vector3d:
    name:
      CSharp:
      - id: Rhino.Geometry.Vector3d
        name: Vector3d
        nameWithType: Vector3d
        qualifiedName: Rhino.Geometry.Vector3d
        isExternal: true
      VB:
      - id: Rhino.Geometry.Vector3d
        name: Vector3d
        nameWithType: Vector3d
        qualifiedName: Rhino.Geometry.Vector3d
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Vector3d
  System.Collections.Generic.List{AssemblerLib.Support}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: AssemblerLib.Support
        name: Support
        nameWithType: Support
        qualifiedName: AssemblerLib.Support
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: AssemblerLib.Support
        name: Support
        nameWithType: Support
        qualifiedName: AssemblerLib.Support
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{AssemblerLib.Support}
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  AssemblerLib.AssemblyObject.AInd*:
    name:
      CSharp:
      - id: AssemblerLib.AssemblyObject.AInd*
        name: AInd
        nameWithType: AssemblyObject.AInd
        qualifiedName: AssemblerLib.AssemblyObject.AInd
      VB:
      - id: AssemblerLib.AssemblyObject.AInd*
        name: AInd
        nameWithType: AssemblyObject.AInd
        qualifiedName: AssemblerLib.AssemblyObject.AInd
    isDefinition: true
    commentId: Overload:AssemblerLib.AssemblyObject.AInd
  System.Collections.Generic.List{System.Int32[]}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Int32[]}
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  AssemblerLib.AssemblyObject.#ctor*:
    name:
      CSharp:
      - id: AssemblerLib.AssemblyObject.#ctor*
        name: AssemblyObject
        nameWithType: AssemblyObject.AssemblyObject
        qualifiedName: AssemblerLib.AssemblyObject.AssemblyObject
      VB:
      - id: AssemblerLib.AssemblyObject.#ctor*
        name: AssemblyObject
        nameWithType: AssemblyObject.AssemblyObject
        qualifiedName: AssemblerLib.AssemblyObject.AssemblyObject
    isDefinition: true
    commentId: Overload:AssemblerLib.AssemblyObject.#ctor
  Newtonsoft.Json:
    name:
      CSharp:
      - name: Newtonsoft.Json
        nameWithType: Newtonsoft.Json
        qualifiedName: Newtonsoft.Json
        isExternal: true
      VB:
      - name: Newtonsoft.Json
        nameWithType: Newtonsoft.Json
        qualifiedName: Newtonsoft.Json
    isDefinition: true
    commentId: N:Newtonsoft.Json
  Newtonsoft.Json.JsonConstructorAttribute:
    name:
      CSharp:
      - id: Newtonsoft.Json.JsonConstructorAttribute
        name: JsonConstructorAttribute
        nameWithType: JsonConstructorAttribute
        qualifiedName: Newtonsoft.Json.JsonConstructorAttribute
        isExternal: true
      VB:
      - id: Newtonsoft.Json.JsonConstructorAttribute
        name: JsonConstructorAttribute
        nameWithType: JsonConstructorAttribute
        qualifiedName: Newtonsoft.Json.JsonConstructorAttribute
        isExternal: true
    isDefinition: true
    parent: Newtonsoft.Json
    commentId: T:Newtonsoft.Json.JsonConstructorAttribute
  Newtonsoft.Json.JsonConstructorAttribute.#ctor:
    name:
      CSharp:
      - id: Newtonsoft.Json.JsonConstructorAttribute.#ctor
        name: JsonConstructorAttribute
        nameWithType: JsonConstructorAttribute.JsonConstructorAttribute
        qualifiedName: Newtonsoft.Json.JsonConstructorAttribute.JsonConstructorAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Newtonsoft.Json.JsonConstructorAttribute.#ctor
        name: JsonConstructorAttribute
        nameWithType: JsonConstructorAttribute.JsonConstructorAttribute
        qualifiedName: Newtonsoft.Json.JsonConstructorAttribute.JsonConstructorAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Newtonsoft.Json.JsonConstructorAttribute
    commentId: M:Newtonsoft.Json.JsonConstructorAttribute.#ctor
  Rhino.Geometry.Transform:
    name:
      CSharp:
      - id: Rhino.Geometry.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Rhino.Geometry.Transform
        isExternal: true
      VB:
      - id: Rhino.Geometry.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Rhino.Geometry.Transform
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Transform
  AssemblerLib.AssemblyObject.Transform*:
    name:
      CSharp:
      - id: AssemblerLib.AssemblyObject.Transform*
        name: Transform
        nameWithType: AssemblyObject.Transform
        qualifiedName: AssemblerLib.AssemblyObject.Transform
      VB:
      - id: AssemblerLib.AssemblyObject.Transform*
        name: Transform
        nameWithType: AssemblyObject.Transform
        qualifiedName: AssemblerLib.AssemblyObject.Transform
    isDefinition: true
    commentId: Overload:AssemblerLib.AssemblyObject.Transform
  AssemblerLib.AssemblyObject.UpdateHandle*:
    name:
      CSharp:
      - id: AssemblerLib.AssemblyObject.UpdateHandle*
        name: UpdateHandle
        nameWithType: AssemblyObject.UpdateHandle
        qualifiedName: AssemblerLib.AssemblyObject.UpdateHandle
      VB:
      - id: AssemblerLib.AssemblyObject.UpdateHandle*
        name: UpdateHandle
        nameWithType: AssemblyObject.UpdateHandle
        qualifiedName: AssemblerLib.AssemblyObject.UpdateHandle
    isDefinition: true
    commentId: Overload:AssemblerLib.AssemblyObject.UpdateHandle
  AssemblerLib.AssemblyObject:
    name:
      CSharp:
      - id: AssemblerLib.AssemblyObject
        name: AssemblyObject
        nameWithType: AssemblyObject
        qualifiedName: AssemblerLib.AssemblyObject
      VB:
      - id: AssemblerLib.AssemblyObject
        name: AssemblyObject
        nameWithType: AssemblyObject
        qualifiedName: AssemblerLib.AssemblyObject
    isDefinition: true
    parent: AssemblerLib
    commentId: T:AssemblerLib.AssemblyObject
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  System.Collections.Generic.List{Rhino.Geometry.Mesh}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Rhino.Geometry.Mesh
        name: Mesh
        nameWithType: Mesh
        qualifiedName: Rhino.Geometry.Mesh
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Rhino.Geometry.Mesh
        name: Mesh
        nameWithType: Mesh
        qualifiedName: Rhino.Geometry.Mesh
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Rhino.Geometry.Mesh}
  AssemblerLib:
    name:
      CSharp:
      - name: AssemblerLib
        nameWithType: AssemblerLib
        qualifiedName: AssemblerLib
      VB:
      - name: AssemblerLib
        nameWithType: AssemblerLib
        qualifiedName: AssemblerLib
    isDefinition: true
    commentId: N:AssemblerLib
  AssemblerLib.Field:
    name:
      CSharp:
      - id: AssemblerLib.Field
        name: Field
        nameWithType: Field
        qualifiedName: AssemblerLib.Field
      VB:
      - id: AssemblerLib.Field
        name: Field
        nameWithType: Field
        qualifiedName: AssemblerLib.Field
    isDefinition: true
    parent: AssemblerLib
    commentId: T:AssemblerLib.Field
  Rhino.Geometry.Box:
    name:
      CSharp:
      - id: Rhino.Geometry.Box
        name: Box
        nameWithType: Box
        qualifiedName: Rhino.Geometry.Box
        isExternal: true
      VB:
      - id: Rhino.Geometry.Box
        name: Box
        nameWithType: Box
        qualifiedName: Rhino.Geometry.Box
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Box
  AssemblerLib.ExogenousSettings.#ctor*:
    name:
      CSharp:
      - id: AssemblerLib.ExogenousSettings.#ctor*
        name: ExogenousSettings
        nameWithType: ExogenousSettings.ExogenousSettings
        qualifiedName: AssemblerLib.ExogenousSettings.ExogenousSettings
      VB:
      - id: AssemblerLib.ExogenousSettings.#ctor*
        name: ExogenousSettings
        nameWithType: ExogenousSettings.ExogenousSettings
        qualifiedName: AssemblerLib.ExogenousSettings.ExogenousSettings
    isDefinition: true
    commentId: Overload:AssemblerLib.ExogenousSettings.#ctor
  AssemblerLib.ExogenousSettings:
    name:
      CSharp:
      - id: AssemblerLib.ExogenousSettings
        name: ExogenousSettings
        nameWithType: ExogenousSettings
        qualifiedName: AssemblerLib.ExogenousSettings
      VB:
      - id: AssemblerLib.ExogenousSettings
        name: ExogenousSettings
        nameWithType: ExogenousSettings
        qualifiedName: AssemblerLib.ExogenousSettings
    isDefinition: true
    commentId: T:AssemblerLib.ExogenousSettings
  AssemblerLib.Tensor[]:
    name:
      CSharp:
      - id: AssemblerLib.Tensor
        name: Tensor
        nameWithType: Tensor
        qualifiedName: AssemblerLib.Tensor
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: AssemblerLib.Tensor
        name: Tensor
        nameWithType: Tensor
        qualifiedName: AssemblerLib.Tensor
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Int32[][]:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Drawing.Color[]:
    name:
      CSharp:
      - id: System.Drawing.Color
        name: Color
        nameWithType: Color
        qualifiedName: System.Drawing.Color
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Drawing.Color
        name: Color
        nameWithType: Color
        qualifiedName: System.Drawing.Color
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  AssemblerLib.Field.#ctor*:
    name:
      CSharp:
      - id: AssemblerLib.Field.#ctor*
        name: Field
        nameWithType: Field.Field
        qualifiedName: AssemblerLib.Field.Field
      VB:
      - id: AssemblerLib.Field.#ctor*
        name: Field
        nameWithType: Field.Field
        qualifiedName: AssemblerLib.Field.Field
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.#ctor
  System.Collections.Generic.List{Rhino.Geometry.Point3d}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Rhino.Geometry.Point3d}
  Grasshopper.DataTree`1:
    name:
      CSharp:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Grasshopper.DataTree`1
  Grasshopper:
    name:
      CSharp:
      - name: Grasshopper
        nameWithType: Grasshopper
        qualifiedName: Grasshopper
        isExternal: true
      VB:
      - name: Grasshopper
        nameWithType: Grasshopper
        qualifiedName: Grasshopper
    isDefinition: true
    commentId: N:Grasshopper
  Grasshopper.DataTree{System.Double}:
    name:
      CSharp:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Grasshopper.DataTree`1
    parent: Grasshopper
    commentId: T:Grasshopper.DataTree{System.Double}
  Grasshopper.DataTree{Rhino.Geometry.Vector3d}:
    name:
      CSharp:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Rhino.Geometry.Vector3d
        name: Vector3d
        nameWithType: Vector3d
        qualifiedName: Rhino.Geometry.Vector3d
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Rhino.Geometry.Vector3d
        name: Vector3d
        nameWithType: Vector3d
        qualifiedName: Rhino.Geometry.Vector3d
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Grasshopper.DataTree`1
    parent: Grasshopper
    commentId: T:Grasshopper.DataTree{Rhino.Geometry.Vector3d}
  Grasshopper.DataTree{System.Int32}:
    name:
      CSharp:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Grasshopper.DataTree`1
    parent: Grasshopper
    commentId: T:Grasshopper.DataTree{System.Int32}
  System.Collections.Generic.List{System.Double}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Double}
  System.Collections.Generic.List{Rhino.Geometry.Vector3d}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Rhino.Geometry.Vector3d
        name: Vector3d
        nameWithType: Vector3d
        qualifiedName: Rhino.Geometry.Vector3d
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Rhino.Geometry.Vector3d
        name: Vector3d
        nameWithType: Vector3d
        qualifiedName: Rhino.Geometry.Vector3d
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Rhino.Geometry.Vector3d}
  AssemblerLib.Field.PopulateScalars*:
    name:
      CSharp:
      - id: AssemblerLib.Field.PopulateScalars*
        name: PopulateScalars
        nameWithType: Field.PopulateScalars
        qualifiedName: AssemblerLib.Field.PopulateScalars
      VB:
      - id: AssemblerLib.Field.PopulateScalars*
        name: PopulateScalars
        nameWithType: Field.PopulateScalars
        qualifiedName: AssemblerLib.Field.PopulateScalars
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.PopulateScalars
  AssemblerLib.Field.PopulateVectors*:
    name:
      CSharp:
      - id: AssemblerLib.Field.PopulateVectors*
        name: PopulateVectors
        nameWithType: Field.PopulateVectors
        qualifiedName: AssemblerLib.Field.PopulateVectors
      VB:
      - id: AssemblerLib.Field.PopulateVectors*
        name: PopulateVectors
        nameWithType: Field.PopulateVectors
        qualifiedName: AssemblerLib.Field.PopulateVectors
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.PopulateVectors
  AssemblerLib.Field.PopulateField*:
    name:
      CSharp:
      - id: AssemblerLib.Field.PopulateField*
        name: PopulateField
        nameWithType: Field.PopulateField
        qualifiedName: AssemblerLib.Field.PopulateField
      VB:
      - id: AssemblerLib.Field.PopulateField*
        name: PopulateField
        nameWithType: Field.PopulateField
        qualifiedName: AssemblerLib.Field.PopulateField
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.PopulateField
  System.Collections.Generic.List{System.Drawing.Color}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Drawing.Color
        name: Color
        nameWithType: Color
        qualifiedName: System.Drawing.Color
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Drawing.Color
        name: Color
        nameWithType: Color
        qualifiedName: System.Drawing.Color
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Drawing.Color}
  AssemblerLib.Field.GenerateColorsByAttractors*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GenerateColorsByAttractors*
        name: GenerateColorsByAttractors
        nameWithType: Field.GenerateColorsByAttractors
        qualifiedName: AssemblerLib.Field.GenerateColorsByAttractors
      VB:
      - id: AssemblerLib.Field.GenerateColorsByAttractors*
        name: GenerateColorsByAttractors
        nameWithType: Field.GenerateColorsByAttractors
        qualifiedName: AssemblerLib.Field.GenerateColorsByAttractors
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GenerateColorsByAttractors
  System.Drawing:
    name:
      CSharp:
      - name: System.Drawing
        nameWithType: System.Drawing
        qualifiedName: System.Drawing
        isExternal: true
      VB:
      - name: System.Drawing
        nameWithType: System.Drawing
        qualifiedName: System.Drawing
    isDefinition: true
    commentId: N:System.Drawing
  System.Drawing.Color:
    name:
      CSharp:
      - id: System.Drawing.Color
        name: Color
        nameWithType: Color
        qualifiedName: System.Drawing.Color
        isExternal: true
      VB:
      - id: System.Drawing.Color
        name: Color
        nameWithType: Color
        qualifiedName: System.Drawing.Color
        isExternal: true
    isDefinition: true
    parent: System.Drawing
    commentId: T:System.Drawing.Color
  AssemblerLib.Field.GenerateScalarColors*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GenerateScalarColors*
        name: GenerateScalarColors
        nameWithType: Field.GenerateScalarColors
        qualifiedName: AssemblerLib.Field.GenerateScalarColors
      VB:
      - id: AssemblerLib.Field.GenerateScalarColors*
        name: GenerateScalarColors
        nameWithType: Field.GenerateScalarColors
        qualifiedName: AssemblerLib.Field.GenerateScalarColors
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GenerateScalarColors
  AssemblerLib.Field.DistributeiWeightsScalar*:
    name:
      CSharp:
      - id: AssemblerLib.Field.DistributeiWeightsScalar*
        name: DistributeiWeightsScalar
        nameWithType: Field.DistributeiWeightsScalar
        qualifiedName: AssemblerLib.Field.DistributeiWeightsScalar
      VB:
      - id: AssemblerLib.Field.DistributeiWeightsScalar*
        name: DistributeiWeightsScalar
        nameWithType: Field.DistributeiWeightsScalar
        qualifiedName: AssemblerLib.Field.DistributeiWeightsScalar
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.DistributeiWeightsScalar
  AssemblerLib.Field.DistributeiWeights*:
    name:
      CSharp:
      - id: AssemblerLib.Field.DistributeiWeights*
        name: DistributeiWeights
        nameWithType: Field.DistributeiWeights
        qualifiedName: AssemblerLib.Field.DistributeiWeights
      VB:
      - id: AssemblerLib.Field.DistributeiWeights*
        name: DistributeiWeights
        nameWithType: Field.DistributeiWeights
        qualifiedName: AssemblerLib.Field.DistributeiWeights
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.DistributeiWeights
  System.Collections.Generic.List{System.Int32}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Int32}
  AssemblerLib.Field.PopulateiWeights*:
    name:
      CSharp:
      - id: AssemblerLib.Field.PopulateiWeights*
        name: PopulateiWeights
        nameWithType: Field.PopulateiWeights
        qualifiedName: AssemblerLib.Field.PopulateiWeights
      VB:
      - id: AssemblerLib.Field.PopulateiWeights*
        name: PopulateiWeights
        nameWithType: Field.PopulateiWeights
        qualifiedName: AssemblerLib.Field.PopulateiWeights
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.PopulateiWeights
  Rhino.Geometry.Point3d:
    name:
      CSharp:
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      VB:
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Point3d
  AssemblerLib.Field.GetClosestIndex*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetClosestIndex*
        name: GetClosestIndex
        nameWithType: Field.GetClosestIndex
        qualifiedName: AssemblerLib.Field.GetClosestIndex
      VB:
      - id: AssemblerLib.Field.GetClosestIndex*
        name: GetClosestIndex
        nameWithType: Field.GetClosestIndex
        qualifiedName: AssemblerLib.Field.GetClosestIndex
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetClosestIndex
  AssemblerLib.Field.GetNeighbourIndexes*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetNeighbourIndexes*
        name: GetNeighbourIndexes
        nameWithType: Field.GetNeighbourIndexes
        qualifiedName: AssemblerLib.Field.GetNeighbourIndexes
      VB:
      - id: AssemblerLib.Field.GetNeighbourIndexes*
        name: GetNeighbourIndexes
        nameWithType: Field.GetNeighbourIndexes
        qualifiedName: AssemblerLib.Field.GetNeighbourIndexes
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetNeighbourIndexes
  AssemblerLib.Field.GetClosestScalar*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetClosestScalar*
        name: GetClosestScalar
        nameWithType: Field.GetClosestScalar
        qualifiedName: AssemblerLib.Field.GetClosestScalar
      VB:
      - id: AssemblerLib.Field.GetClosestScalar*
        name: GetClosestScalar
        nameWithType: Field.GetClosestScalar
        qualifiedName: AssemblerLib.Field.GetClosestScalar
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetClosestScalar
  System.Double[]:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  AssemblerLib.Field.GetClosestScalars*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetClosestScalars*
        name: GetClosestScalars
        nameWithType: Field.GetClosestScalars
        qualifiedName: AssemblerLib.Field.GetClosestScalars
      VB:
      - id: AssemblerLib.Field.GetClosestScalars*
        name: GetClosestScalars
        nameWithType: Field.GetClosestScalars
        qualifiedName: AssemblerLib.Field.GetClosestScalars
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetClosestScalars
  AssemblerLib.Field.GetInterpolatedScalar*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetInterpolatedScalar*
        name: GetInterpolatedScalar
        nameWithType: Field.GetInterpolatedScalar
        qualifiedName: AssemblerLib.Field.GetInterpolatedScalar
      VB:
      - id: AssemblerLib.Field.GetInterpolatedScalar*
        name: GetInterpolatedScalar
        nameWithType: Field.GetInterpolatedScalar
        qualifiedName: AssemblerLib.Field.GetInterpolatedScalar
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetInterpolatedScalar
  AssemblerLib.Field.GetNeighbourScalars*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetNeighbourScalars*
        name: GetNeighbourScalars
        nameWithType: Field.GetNeighbourScalars
        qualifiedName: AssemblerLib.Field.GetNeighbourScalars
      VB:
      - id: AssemblerLib.Field.GetNeighbourScalars*
        name: GetNeighbourScalars
        nameWithType: Field.GetNeighbourScalars
        qualifiedName: AssemblerLib.Field.GetNeighbourScalars
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetNeighbourScalars
  AssemblerLib.Field.GetClosestVector*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetClosestVector*
        name: GetClosestVector
        nameWithType: Field.GetClosestVector
        qualifiedName: AssemblerLib.Field.GetClosestVector
      VB:
      - id: AssemblerLib.Field.GetClosestVector*
        name: GetClosestVector
        nameWithType: Field.GetClosestVector
        qualifiedName: AssemblerLib.Field.GetClosestVector
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetClosestVector
  AssemblerLib.Field.GetInterpolatedVector*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetInterpolatedVector*
        name: GetInterpolatedVector
        nameWithType: Field.GetInterpolatedVector
        qualifiedName: AssemblerLib.Field.GetInterpolatedVector
      VB:
      - id: AssemblerLib.Field.GetInterpolatedVector*
        name: GetInterpolatedVector
        nameWithType: Field.GetInterpolatedVector
        qualifiedName: AssemblerLib.Field.GetInterpolatedVector
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetInterpolatedVector
  AssemblerLib.Field.GetNeighbourVectors*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetNeighbourVectors*
        name: GetNeighbourVectors
        nameWithType: Field.GetNeighbourVectors
        qualifiedName: AssemblerLib.Field.GetNeighbourVectors
      VB:
      - id: AssemblerLib.Field.GetNeighbourVectors*
        name: GetNeighbourVectors
        nameWithType: Field.GetNeighbourVectors
        qualifiedName: AssemblerLib.Field.GetNeighbourVectors
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetNeighbourVectors
  Rhino.Geometry.Vector3d[]:
    name:
      CSharp:
      - id: Rhino.Geometry.Vector3d
        name: Vector3d
        nameWithType: Vector3d
        qualifiedName: Rhino.Geometry.Vector3d
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Rhino.Geometry.Vector3d
        name: Vector3d
        nameWithType: Vector3d
        qualifiedName: Rhino.Geometry.Vector3d
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  AssemblerLib.Field.GetClosestVectors*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetClosestVectors*
        name: GetClosestVectors
        nameWithType: Field.GetClosestVectors
        qualifiedName: AssemblerLib.Field.GetClosestVectors
      VB:
      - id: AssemblerLib.Field.GetClosestVectors*
        name: GetClosestVectors
        nameWithType: Field.GetClosestVectors
        qualifiedName: AssemblerLib.Field.GetClosestVectors
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetClosestVectors
  System.Int32[]:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  AssemblerLib.Field.GetClosestiWeights*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetClosestiWeights*
        name: GetClosestiWeights
        nameWithType: Field.GetClosestiWeights
        qualifiedName: AssemblerLib.Field.GetClosestiWeights
      VB:
      - id: AssemblerLib.Field.GetClosestiWeights*
        name: GetClosestiWeights
        nameWithType: Field.GetClosestiWeights
        qualifiedName: AssemblerLib.Field.GetClosestiWeights
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetClosestiWeights
  AssemblerLib.Field.GetScalar*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetScalar*
        name: GetScalar
        nameWithType: Field.GetScalar
        qualifiedName: AssemblerLib.Field.GetScalar
      VB:
      - id: AssemblerLib.Field.GetScalar*
        name: GetScalar
        nameWithType: Field.GetScalar
        qualifiedName: AssemblerLib.Field.GetScalar
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetScalar
  AssemblerLib.Field.GetScalars*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetScalars*
        name: GetScalars
        nameWithType: Field.GetScalars
        qualifiedName: AssemblerLib.Field.GetScalars
      VB:
      - id: AssemblerLib.Field.GetScalars*
        name: GetScalars
        nameWithType: Field.GetScalars
        qualifiedName: AssemblerLib.Field.GetScalars
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetScalars
  AssemblerLib.Field.GetVector*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetVector*
        name: GetVector
        nameWithType: Field.GetVector
        qualifiedName: AssemblerLib.Field.GetVector
      VB:
      - id: AssemblerLib.Field.GetVector*
        name: GetVector
        nameWithType: Field.GetVector
        qualifiedName: AssemblerLib.Field.GetVector
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetVector
  AssemblerLib.Field.GetVectors*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetVectors*
        name: GetVectors
        nameWithType: Field.GetVectors
        qualifiedName: AssemblerLib.Field.GetVectors
      VB:
      - id: AssemblerLib.Field.GetVectors*
        name: GetVectors
        nameWithType: Field.GetVectors
        qualifiedName: AssemblerLib.Field.GetVectors
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetVectors
  AssemblerLib.Field.GetiWeights*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetiWeights*
        name: GetiWeights
        nameWithType: Field.GetiWeights
        qualifiedName: AssemblerLib.Field.GetiWeights
      VB:
      - id: AssemblerLib.Field.GetiWeights*
        name: GetiWeights
        nameWithType: Field.GetiWeights
        qualifiedName: AssemblerLib.Field.GetiWeights
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetiWeights
  Rhino.Geometry.Point3d[]:
    name:
      CSharp:
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Rhino.Geometry.Point3d
        name: Point3d
        nameWithType: Point3d
        qualifiedName: Rhino.Geometry.Point3d
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  AssemblerLib.Field.GetPoints*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetPoints*
        name: GetPoints
        nameWithType: Field.GetPoints
        qualifiedName: AssemblerLib.Field.GetPoints
      VB:
      - id: AssemblerLib.Field.GetPoints*
        name: GetPoints
        nameWithType: Field.GetPoints
        qualifiedName: AssemblerLib.Field.GetPoints
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetPoints
  Grasshopper.Kernel.Types.GH_Point[]:
    name:
      CSharp:
      - id: Grasshopper.Kernel.Types.GH_Point
        name: GH_Point
        nameWithType: GH_Point
        qualifiedName: Grasshopper.Kernel.Types.GH_Point
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Grasshopper.Kernel.Types.GH_Point
        name: GH_Point
        nameWithType: GH_Point
        qualifiedName: Grasshopper.Kernel.Types.GH_Point
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  AssemblerLib.Field.GetGH_Points*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetGH_Points*
        name: GetGH_Points
        nameWithType: Field.GetGH_Points
        qualifiedName: AssemblerLib.Field.GetGH_Points
      VB:
      - id: AssemblerLib.Field.GetGH_Points*
        name: GetGH_Points
        nameWithType: Field.GetGH_Points
        qualifiedName: AssemblerLib.Field.GetGH_Points
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetGH_Points
  Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Number}:
    name:
      CSharp:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Grasshopper.Kernel.Types.GH_Number
        name: GH_Number
        nameWithType: GH_Number
        qualifiedName: Grasshopper.Kernel.Types.GH_Number
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Grasshopper.Kernel.Types.GH_Number
        name: GH_Number
        nameWithType: GH_Number
        qualifiedName: Grasshopper.Kernel.Types.GH_Number
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Grasshopper.DataTree`1
    parent: Grasshopper
    commentId: T:Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Number}
  AssemblerLib.Field.GetGH_Scalars*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetGH_Scalars*
        name: GetGH_Scalars
        nameWithType: Field.GetGH_Scalars
        qualifiedName: AssemblerLib.Field.GetGH_Scalars
      VB:
      - id: AssemblerLib.Field.GetGH_Scalars*
        name: GetGH_Scalars
        nameWithType: Field.GetGH_Scalars
        qualifiedName: AssemblerLib.Field.GetGH_Scalars
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetGH_Scalars
  Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Vector}:
    name:
      CSharp:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Grasshopper.Kernel.Types.GH_Vector
        name: GH_Vector
        nameWithType: GH_Vector
        qualifiedName: Grasshopper.Kernel.Types.GH_Vector
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Grasshopper.Kernel.Types.GH_Vector
        name: GH_Vector
        nameWithType: GH_Vector
        qualifiedName: Grasshopper.Kernel.Types.GH_Vector
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Grasshopper.DataTree`1
    parent: Grasshopper
    commentId: T:Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Vector}
  AssemblerLib.Field.GetGH_Vectors*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetGH_Vectors*
        name: GetGH_Vectors
        nameWithType: Field.GetGH_Vectors
        qualifiedName: AssemblerLib.Field.GetGH_Vectors
      VB:
      - id: AssemblerLib.Field.GetGH_Vectors*
        name: GetGH_Vectors
        nameWithType: Field.GetGH_Vectors
        qualifiedName: AssemblerLib.Field.GetGH_Vectors
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetGH_Vectors
  Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Integer}:
    name:
      CSharp:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Grasshopper.Kernel.Types.GH_Integer
        name: GH_Integer
        nameWithType: GH_Integer
        qualifiedName: Grasshopper.Kernel.Types.GH_Integer
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Grasshopper.Kernel.Types.GH_Integer
        name: GH_Integer
        nameWithType: GH_Integer
        qualifiedName: Grasshopper.Kernel.Types.GH_Integer
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Grasshopper.DataTree`1
    parent: Grasshopper
    commentId: T:Grasshopper.DataTree{Grasshopper.Kernel.Types.GH_Integer}
  AssemblerLib.Field.GetGH_iWeights*:
    name:
      CSharp:
      - id: AssemblerLib.Field.GetGH_iWeights*
        name: GetGH_iWeights
        nameWithType: Field.GetGH_iWeights
        qualifiedName: AssemblerLib.Field.GetGH_iWeights
      VB:
      - id: AssemblerLib.Field.GetGH_iWeights*
        name: GetGH_iWeights
        nameWithType: Field.GetGH_iWeights
        qualifiedName: AssemblerLib.Field.GetGH_iWeights
    isDefinition: true
    commentId: Overload:AssemblerLib.Field.GetGH_iWeights
  Rhino.Geometry.Plane[]:
    name:
      CSharp:
      - id: Rhino.Geometry.Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Rhino.Geometry.Plane
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Rhino.Geometry.Plane
        name: Plane
        nameWithType: Plane
        qualifiedName: Rhino.Geometry.Plane
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Collections.Generic.Dictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.Dictionary`2
  System.Collections.Generic.Dictionary{System.Double,System.Int32}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.Double,System.Int32}
  Rhino.Geometry.Polyline:
    name:
      CSharp:
      - id: Rhino.Geometry.Polyline
        name: Polyline
        nameWithType: Polyline
        qualifiedName: Rhino.Geometry.Polyline
        isExternal: true
      VB:
      - id: Rhino.Geometry.Polyline
        name: Polyline
        nameWithType: Polyline
        qualifiedName: Rhino.Geometry.Polyline
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Polyline
  AssemblerLib.Handle.#ctor*:
    name:
      CSharp:
      - id: AssemblerLib.Handle.#ctor*
        name: Handle
        nameWithType: Handle.Handle
        qualifiedName: AssemblerLib.Handle.Handle
      VB:
      - id: AssemblerLib.Handle.#ctor*
        name: Handle
        nameWithType: Handle.Handle
        qualifiedName: AssemblerLib.Handle.Handle
    isDefinition: true
    commentId: Overload:AssemblerLib.Handle.#ctor
  AssemblerLib.Handle.Transform*:
    name:
      CSharp:
      - id: AssemblerLib.Handle.Transform*
        name: Transform
        nameWithType: Handle.Transform
        qualifiedName: AssemblerLib.Handle.Transform
      VB:
      - id: AssemblerLib.Handle.Transform*
        name: Transform
        nameWithType: Handle.Transform
        qualifiedName: AssemblerLib.Handle.Transform
    isDefinition: true
    commentId: Overload:AssemblerLib.Handle.Transform
  AssemblerLib.Handle:
    name:
      CSharp:
      - id: AssemblerLib.Handle
        name: Handle
        nameWithType: Handle
        qualifiedName: AssemblerLib.Handle
      VB:
      - id: AssemblerLib.Handle
        name: Handle
        nameWithType: Handle
        qualifiedName: AssemblerLib.Handle
    isDefinition: true
    parent: AssemblerLib
    commentId: T:AssemblerLib.Handle
  AssemblerLib.AssemblyObject[]:
    name:
      CSharp:
      - id: AssemblerLib.AssemblyObject
        name: AssemblyObject
        nameWithType: AssemblyObject
        qualifiedName: AssemblerLib.AssemblyObject
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: AssemblerLib.AssemblyObject
        name: AssemblyObject
        nameWithType: AssemblyObject
        qualifiedName: AssemblerLib.AssemblyObject
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Collections.Generic.Dictionary{System.String,System.Int32}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.String,System.Int32}
  System.Collections.Generic.List{AssemblerLib.MeshEnvironment}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: AssemblerLib.MeshEnvironment
        name: MeshEnvironment
        nameWithType: MeshEnvironment
        qualifiedName: AssemblerLib.MeshEnvironment
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: AssemblerLib.MeshEnvironment
        name: MeshEnvironment
        nameWithType: MeshEnvironment
        qualifiedName: AssemblerLib.MeshEnvironment
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{AssemblerLib.MeshEnvironment}
  Grasshopper.DataTree{AssemblerLib.Rule}:
    name:
      CSharp:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: AssemblerLib.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: AssemblerLib.Rule
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: AssemblerLib.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: AssemblerLib.Rule
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Grasshopper.DataTree`1
    parent: Grasshopper
    commentId: T:Grasshopper.DataTree{AssemblerLib.Rule}
  System.Collections.Generic.List{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.String}
  AssemblerLib.Assemblage.#ctor*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.#ctor*
        name: Assemblage
        nameWithType: Assemblage.Assemblage
        qualifiedName: AssemblerLib.Assemblage.Assemblage
      VB:
      - id: AssemblerLib.Assemblage.#ctor*
        name: Assemblage
        nameWithType: Assemblage.Assemblage
        qualifiedName: AssemblerLib.Assemblage.Assemblage
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.#ctor
  AssemblerLib.Assemblage.Update*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.Update*
        name: Update
        nameWithType: Assemblage.Update
        qualifiedName: AssemblerLib.Assemblage.Update
      VB:
      - id: AssemblerLib.Assemblage.Update*
        name: Update
        nameWithType: Assemblage.Update
        qualifiedName: AssemblerLib.Assemblage.Update
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.Update
  AssemblerLib.Assemblage.SelectReceiver*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.SelectReceiver*
        name: SelectReceiver
        nameWithType: Assemblage.SelectReceiver
        qualifiedName: AssemblerLib.Assemblage.SelectReceiver
      VB:
      - id: AssemblerLib.Assemblage.SelectReceiver*
        name: SelectReceiver
        nameWithType: Assemblage.SelectReceiver
        qualifiedName: AssemblerLib.Assemblage.SelectReceiver
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.SelectReceiver
  AssemblerLib.Rule:
    name:
      CSharp:
      - id: AssemblerLib.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: AssemblerLib.Rule
      VB:
      - id: AssemblerLib.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: AssemblerLib.Rule
    isDefinition: true
    parent: AssemblerLib
    commentId: T:AssemblerLib.Rule
  System.Collections.Generic.List{AssemblerLib.Rule}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: AssemblerLib.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: AssemblerLib.Rule
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: AssemblerLib.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: AssemblerLib.Rule
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{AssemblerLib.Rule}
  AssemblerLib.Assemblage.SelectRule*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.SelectRule*
        name: SelectRule
        nameWithType: Assemblage.SelectRule
        qualifiedName: AssemblerLib.Assemblage.SelectRule
      VB:
      - id: AssemblerLib.Assemblage.SelectRule*
        name: SelectRule
        nameWithType: Assemblage.SelectRule
        qualifiedName: AssemblerLib.Assemblage.SelectRule
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.SelectRule
  AssemblerLib.Assemblage.WeightedRandomChoiceIndex*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.WeightedRandomChoiceIndex*
        name: WeightedRandomChoiceIndex
        nameWithType: Assemblage.WeightedRandomChoiceIndex
        qualifiedName: AssemblerLib.Assemblage.WeightedRandomChoiceIndex
      VB:
      - id: AssemblerLib.Assemblage.WeightedRandomChoiceIndex*
        name: WeightedRandomChoiceIndex
        nameWithType: Assemblage.WeightedRandomChoiceIndex
        qualifiedName: AssemblerLib.Assemblage.WeightedRandomChoiceIndex
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.WeightedRandomChoiceIndex
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
    commentId: '!:T'
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  System.Collections.Generic.List{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{``0}
  AssemblerLib.Assemblage.WeightedRandomChoice*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.WeightedRandomChoice*
        name: WeightedRandomChoice
        nameWithType: Assemblage.WeightedRandomChoice
        qualifiedName: AssemblerLib.Assemblage.WeightedRandomChoice
      VB:
      - id: AssemblerLib.Assemblage.WeightedRandomChoice*
        name: WeightedRandomChoice
        nameWithType: Assemblage.WeightedRandomChoice
        qualifiedName: AssemblerLib.Assemblage.WeightedRandomChoice
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.WeightedRandomChoice
  AssemblerLib.Assemblage.RetrieveCandidates*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.RetrieveCandidates*
        name: RetrieveCandidates
        nameWithType: Assemblage.RetrieveCandidates
        qualifiedName: AssemblerLib.Assemblage.RetrieveCandidates
      VB:
      - id: AssemblerLib.Assemblage.RetrieveCandidates*
        name: RetrieveCandidates
        nameWithType: Assemblage.RetrieveCandidates
        qualifiedName: AssemblerLib.Assemblage.RetrieveCandidates
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.RetrieveCandidates
  AssemblerLib.Assemblage.AddValidObject*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.AddValidObject*
        name: AddValidObject
        nameWithType: Assemblage.AddValidObject
        qualifiedName: AssemblerLib.Assemblage.AddValidObject
      VB:
      - id: AssemblerLib.Assemblage.AddValidObject*
        name: AddValidObject
        nameWithType: Assemblage.AddValidObject
        qualifiedName: AssemblerLib.Assemblage.AddValidObject
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.AddValidObject
  AssemblerLib.Assemblage.FieldScalarSearch*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.FieldScalarSearch*
        name: FieldScalarSearch
        nameWithType: Assemblage.FieldScalarSearch
        qualifiedName: AssemblerLib.Assemblage.FieldScalarSearch
      VB:
      - id: AssemblerLib.Assemblage.FieldScalarSearch*
        name: FieldScalarSearch
        nameWithType: Assemblage.FieldScalarSearch
        qualifiedName: AssemblerLib.Assemblage.FieldScalarSearch
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.FieldScalarSearch
  AssemblerLib.Assemblage.FieldVectorSearch*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.FieldVectorSearch*
        name: FieldVectorSearch
        nameWithType: Assemblage.FieldVectorSearch
        qualifiedName: AssemblerLib.Assemblage.FieldVectorSearch
      VB:
      - id: AssemblerLib.Assemblage.FieldVectorSearch*
        name: FieldVectorSearch
        nameWithType: Assemblage.FieldVectorSearch
        qualifiedName: AssemblerLib.Assemblage.FieldVectorSearch
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.FieldVectorSearch
  AssemblerLib.Assemblage.SetHeuristics*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.SetHeuristics*
        name: SetHeuristics
        nameWithType: Assemblage.SetHeuristics
        qualifiedName: AssemblerLib.Assemblage.SetHeuristics
      VB:
      - id: AssemblerLib.Assemblage.SetHeuristics*
        name: SetHeuristics
        nameWithType: Assemblage.SetHeuristics
        qualifiedName: AssemblerLib.Assemblage.SetHeuristics
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.SetHeuristics
  AssemblerLib.Assemblage.ResetExogenous*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.ResetExogenous*
        name: ResetExogenous
        nameWithType: Assemblage.ResetExogenous
        qualifiedName: AssemblerLib.Assemblage.ResetExogenous
      VB:
      - id: AssemblerLib.Assemblage.ResetExogenous*
        name: ResetExogenous
        nameWithType: Assemblage.ResetExogenous
        qualifiedName: AssemblerLib.Assemblage.ResetExogenous
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.ResetExogenous
  AssemblerLib.Assemblage.SetSandbox*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.SetSandbox*
        name: SetSandbox
        nameWithType: Assemblage.SetSandbox
        qualifiedName: AssemblerLib.Assemblage.SetSandbox
      VB:
      - id: AssemblerLib.Assemblage.SetSandbox*
        name: SetSandbox
        nameWithType: Assemblage.SetSandbox
        qualifiedName: AssemblerLib.Assemblage.SetSandbox
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.SetSandbox
  AssemblerLib.Assemblage.SetEnvCheckMethod*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.SetEnvCheckMethod*
        name: SetEnvCheckMethod
        nameWithType: Assemblage.SetEnvCheckMethod
        qualifiedName: AssemblerLib.Assemblage.SetEnvCheckMethod
      VB:
      - id: AssemblerLib.Assemblage.SetEnvCheckMethod*
        name: SetEnvCheckMethod
        nameWithType: Assemblage.SetEnvCheckMethod
        qualifiedName: AssemblerLib.Assemblage.SetEnvCheckMethod
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.SetEnvCheckMethod
  AssemblerLib.Assemblage.ResetAvailableObjects*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.ResetAvailableObjects*
        name: ResetAvailableObjects
        nameWithType: Assemblage.ResetAvailableObjects
        qualifiedName: AssemblerLib.Assemblage.ResetAvailableObjects
      VB:
      - id: AssemblerLib.Assemblage.ResetAvailableObjects*
        name: ResetAvailableObjects
        nameWithType: Assemblage.ResetAvailableObjects
        qualifiedName: AssemblerLib.Assemblage.ResetAvailableObjects
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.ResetAvailableObjects
  Grasshopper.Kernel.Types.GH_Integer[]:
    name:
      CSharp:
      - id: Grasshopper.Kernel.Types.GH_Integer
        name: GH_Integer
        nameWithType: GH_Integer
        qualifiedName: Grasshopper.Kernel.Types.GH_Integer
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Grasshopper.Kernel.Types.GH_Integer
        name: GH_Integer
        nameWithType: GH_Integer
        qualifiedName: Grasshopper.Kernel.Types.GH_Integer
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  AssemblerLib.Assemblage.ExtractAvailableObjects*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.ExtractAvailableObjects*
        name: ExtractAvailableObjects
        nameWithType: Assemblage.ExtractAvailableObjects
        qualifiedName: AssemblerLib.Assemblage.ExtractAvailableObjects
      VB:
      - id: AssemblerLib.Assemblage.ExtractAvailableObjects*
        name: ExtractAvailableObjects
        nameWithType: Assemblage.ExtractAvailableObjects
        qualifiedName: AssemblerLib.Assemblage.ExtractAvailableObjects
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.ExtractAvailableObjects
  AssemblerLib.Assemblage.ExtractUnreachableObjects*:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.ExtractUnreachableObjects*
        name: ExtractUnreachableObjects
        nameWithType: Assemblage.ExtractUnreachableObjects
        qualifiedName: AssemblerLib.Assemblage.ExtractUnreachableObjects
      VB:
      - id: AssemblerLib.Assemblage.ExtractUnreachableObjects*
        name: ExtractUnreachableObjects
        nameWithType: Assemblage.ExtractUnreachableObjects
        qualifiedName: AssemblerLib.Assemblage.ExtractUnreachableObjects
    isDefinition: true
    commentId: Overload:AssemblerLib.Assemblage.ExtractUnreachableObjects
  AssemblerLib.Assemblage:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage
        name: Assemblage
        nameWithType: Assemblage
        qualifiedName: AssemblerLib.Assemblage
      VB:
      - id: AssemblerLib.Assemblage
        name: Assemblage
        nameWithType: Assemblage
        qualifiedName: AssemblerLib.Assemblage
    isDefinition: true
    parent: AssemblerLib
    commentId: T:AssemblerLib.Assemblage
  AssemblerLib.Assemblage.EnvCheckMethod:
    name:
      CSharp:
      - id: AssemblerLib.Assemblage.EnvCheckMethod
        name: Assemblage.EnvCheckMethod
        nameWithType: Assemblage.EnvCheckMethod
        qualifiedName: AssemblerLib.Assemblage.EnvCheckMethod
      VB:
      - id: AssemblerLib.Assemblage.EnvCheckMethod
        name: Assemblage.EnvCheckMethod
        nameWithType: Assemblage.EnvCheckMethod
        qualifiedName: AssemblerLib.Assemblage.EnvCheckMethod
    isDefinition: true
    commentId: T:AssemblerLib.Assemblage.EnvCheckMethod
  AssemblerLib.HeuristicsSettings.#ctor*:
    name:
      CSharp:
      - id: AssemblerLib.HeuristicsSettings.#ctor*
        name: HeuristicsSettings
        nameWithType: HeuristicsSettings.HeuristicsSettings
        qualifiedName: AssemblerLib.HeuristicsSettings.HeuristicsSettings
      VB:
      - id: AssemblerLib.HeuristicsSettings.#ctor*
        name: HeuristicsSettings
        nameWithType: HeuristicsSettings.HeuristicsSettings
        qualifiedName: AssemblerLib.HeuristicsSettings.HeuristicsSettings
    isDefinition: true
    commentId: Overload:AssemblerLib.HeuristicsSettings.#ctor
  AssemblerLib.HeuristicsSettings:
    name:
      CSharp:
      - id: AssemblerLib.HeuristicsSettings
        name: HeuristicsSettings
        nameWithType: HeuristicsSettings
        qualifiedName: AssemblerLib.HeuristicsSettings
      VB:
      - id: AssemblerLib.HeuristicsSettings
        name: HeuristicsSettings
        nameWithType: HeuristicsSettings
        qualifiedName: AssemblerLib.HeuristicsSettings
    isDefinition: true
    commentId: T:AssemblerLib.HeuristicsSettings
  AssemblerLib.MeshEnvironment.Type:
    name:
      CSharp:
      - id: AssemblerLib.MeshEnvironment.Type
        name: MeshEnvironment.Type
        nameWithType: MeshEnvironment.Type
        qualifiedName: AssemblerLib.MeshEnvironment.Type
      VB:
      - id: AssemblerLib.MeshEnvironment.Type
        name: MeshEnvironment.Type
        nameWithType: MeshEnvironment.Type
        qualifiedName: AssemblerLib.MeshEnvironment.Type
    isDefinition: true
    parent: AssemblerLib
    commentId: T:AssemblerLib.MeshEnvironment.Type
  AssemblerLib.MeshEnvironment.#ctor*:
    name:
      CSharp:
      - id: AssemblerLib.MeshEnvironment.#ctor*
        name: MeshEnvironment
        nameWithType: MeshEnvironment.MeshEnvironment
        qualifiedName: AssemblerLib.MeshEnvironment.MeshEnvironment
      VB:
      - id: AssemblerLib.MeshEnvironment.#ctor*
        name: MeshEnvironment
        nameWithType: MeshEnvironment.MeshEnvironment
        qualifiedName: AssemblerLib.MeshEnvironment.MeshEnvironment
    isDefinition: true
    commentId: Overload:AssemblerLib.MeshEnvironment.#ctor
  AssemblerLib.MeshEnvironment.IsPointInside*:
    name:
      CSharp:
      - id: AssemblerLib.MeshEnvironment.IsPointInside*
        name: IsPointInside
        nameWithType: MeshEnvironment.IsPointInside
        qualifiedName: AssemblerLib.MeshEnvironment.IsPointInside
      VB:
      - id: AssemblerLib.MeshEnvironment.IsPointInside*
        name: IsPointInside
        nameWithType: MeshEnvironment.IsPointInside
        qualifiedName: AssemblerLib.MeshEnvironment.IsPointInside
    isDefinition: true
    commentId: Overload:AssemblerLib.MeshEnvironment.IsPointInside
  AssemblerLib.MeshEnvironment.CollisionCheck*:
    name:
      CSharp:
      - id: AssemblerLib.MeshEnvironment.CollisionCheck*
        name: CollisionCheck
        nameWithType: MeshEnvironment.CollisionCheck
        qualifiedName: AssemblerLib.MeshEnvironment.CollisionCheck
      VB:
      - id: AssemblerLib.MeshEnvironment.CollisionCheck*
        name: CollisionCheck
        nameWithType: MeshEnvironment.CollisionCheck
        qualifiedName: AssemblerLib.MeshEnvironment.CollisionCheck
    isDefinition: true
    commentId: Overload:AssemblerLib.MeshEnvironment.CollisionCheck
  AssemblerLib.MeshEnvironment:
    name:
      CSharp:
      - id: AssemblerLib.MeshEnvironment
        name: MeshEnvironment
        nameWithType: MeshEnvironment
        qualifiedName: AssemblerLib.MeshEnvironment
      VB:
      - id: AssemblerLib.MeshEnvironment
        name: MeshEnvironment
        nameWithType: MeshEnvironment
        qualifiedName: AssemblerLib.MeshEnvironment
    isDefinition: true
    commentId: T:AssemblerLib.MeshEnvironment
  AssemblerLib.Rule.#ctor*:
    name:
      CSharp:
      - id: AssemblerLib.Rule.#ctor*
        name: Rule
        nameWithType: Rule.Rule
        qualifiedName: AssemblerLib.Rule.Rule
      VB:
      - id: AssemblerLib.Rule.#ctor*
        name: Rule
        nameWithType: Rule.Rule
        qualifiedName: AssemblerLib.Rule.Rule
    isDefinition: true
    commentId: Overload:AssemblerLib.Rule.#ctor
  AssemblerLib.Rule.ToString*:
    name:
      CSharp:
      - id: AssemblerLib.Rule.ToString*
        name: ToString
        nameWithType: Rule.ToString
        qualifiedName: AssemblerLib.Rule.ToString
      VB:
      - id: AssemblerLib.Rule.ToString*
        name: ToString
        nameWithType: Rule.ToString
        qualifiedName: AssemblerLib.Rule.ToString
    isDefinition: true
    commentId: Overload:AssemblerLib.Rule.ToString
  Rhino.Geometry.Line:
    name:
      CSharp:
      - id: Rhino.Geometry.Line
        name: Line
        nameWithType: Line
        qualifiedName: Rhino.Geometry.Line
        isExternal: true
      VB:
      - id: Rhino.Geometry.Line
        name: Line
        nameWithType: Line
        qualifiedName: Rhino.Geometry.Line
        isExternal: true
    isDefinition: true
    parent: Rhino.Geometry
    commentId: T:Rhino.Geometry.Line
  AssemblerLib.Support:
    name:
      CSharp:
      - id: AssemblerLib.Support
        name: Support
        nameWithType: Support
        qualifiedName: AssemblerLib.Support
      VB:
      - id: AssemblerLib.Support
        name: Support
        nameWithType: Support
        qualifiedName: AssemblerLib.Support
    isDefinition: true
    parent: AssemblerLib
    commentId: T:AssemblerLib.Support
  AssemblerLib.Support.#ctor*:
    name:
      CSharp:
      - id: AssemblerLib.Support.#ctor*
        name: Support
        nameWithType: Support.Support
        qualifiedName: AssemblerLib.Support.Support
      VB:
      - id: AssemblerLib.Support.#ctor*
        name: Support
        nameWithType: Support.Support
        qualifiedName: AssemblerLib.Support.Support
    isDefinition: true
    commentId: Overload:AssemblerLib.Support.#ctor
  AssemblerLib.Support.Reset*:
    name:
      CSharp:
      - id: AssemblerLib.Support.Reset*
        name: Reset
        nameWithType: Support.Reset
        qualifiedName: AssemblerLib.Support.Reset
      VB:
      - id: AssemblerLib.Support.Reset*
        name: Reset
        nameWithType: Support.Reset
        qualifiedName: AssemblerLib.Support.Reset
    isDefinition: true
    commentId: Overload:AssemblerLib.Support.Reset
  AssemblerLib.Support.Transform*:
    name:
      CSharp:
      - id: AssemblerLib.Support.Transform*
        name: Transform
        nameWithType: Support.Transform
        qualifiedName: AssemblerLib.Support.Transform
      VB:
      - id: AssemblerLib.Support.Transform*
        name: Transform
        nameWithType: Support.Transform
        qualifiedName: AssemblerLib.Support.Transform
    isDefinition: true
    commentId: Overload:AssemblerLib.Support.Transform
  AssemblerLib.Tensor.#ctor*:
    name:
      CSharp:
      - id: AssemblerLib.Tensor.#ctor*
        name: Tensor
        nameWithType: Tensor.Tensor
        qualifiedName: AssemblerLib.Tensor.Tensor
      VB:
      - id: AssemblerLib.Tensor.#ctor*
        name: Tensor
        nameWithType: Tensor.Tensor
        qualifiedName: AssemblerLib.Tensor.Tensor
    isDefinition: true
    commentId: Overload:AssemblerLib.Tensor.#ctor
  AssemblerLib.Tensor.GetScalar*:
    name:
      CSharp:
      - id: AssemblerLib.Tensor.GetScalar*
        name: GetScalar
        nameWithType: Tensor.GetScalar
        qualifiedName: AssemblerLib.Tensor.GetScalar
      VB:
      - id: AssemblerLib.Tensor.GetScalar*
        name: GetScalar
        nameWithType: Tensor.GetScalar
        qualifiedName: AssemblerLib.Tensor.GetScalar
    isDefinition: true
    commentId: Overload:AssemblerLib.Tensor.GetScalar
  AssemblerLib.Tensor.GetVector*:
    name:
      CSharp:
      - id: AssemblerLib.Tensor.GetVector*
        name: GetVector
        nameWithType: Tensor.GetVector
        qualifiedName: AssemblerLib.Tensor.GetVector
      VB:
      - id: AssemblerLib.Tensor.GetVector*
        name: GetVector
        nameWithType: Tensor.GetVector
        qualifiedName: AssemblerLib.Tensor.GetVector
    isDefinition: true
    commentId: Overload:AssemblerLib.Tensor.GetVector
  AssemblerLib.Tensor.GetScalars*:
    name:
      CSharp:
      - id: AssemblerLib.Tensor.GetScalars*
        name: GetScalars
        nameWithType: Tensor.GetScalars
        qualifiedName: AssemblerLib.Tensor.GetScalars
      VB:
      - id: AssemblerLib.Tensor.GetScalars*
        name: GetScalars
        nameWithType: Tensor.GetScalars
        qualifiedName: AssemblerLib.Tensor.GetScalars
    isDefinition: true
    commentId: Overload:AssemblerLib.Tensor.GetScalars
  AssemblerLib.Tensor.GetVectors*:
    name:
      CSharp:
      - id: AssemblerLib.Tensor.GetVectors*
        name: GetVectors
        nameWithType: Tensor.GetVectors
        qualifiedName: AssemblerLib.Tensor.GetVectors
      VB:
      - id: AssemblerLib.Tensor.GetVectors*
        name: GetVectors
        nameWithType: Tensor.GetVectors
        qualifiedName: AssemblerLib.Tensor.GetVectors
    isDefinition: true
    commentId: Overload:AssemblerLib.Tensor.GetVectors
  AssemblerLib.Tensor:
    name:
      CSharp:
      - id: AssemblerLib.Tensor
        name: Tensor
        nameWithType: Tensor
        qualifiedName: AssemblerLib.Tensor
      VB:
      - id: AssemblerLib.Tensor
        name: Tensor
        nameWithType: Tensor
        qualifiedName: AssemblerLib.Tensor
    isDefinition: true
    parent: AssemblerLib
    commentId: T:AssemblerLib.Tensor
  AssemblerLib.Tensor.op_Addition*:
    name:
      CSharp:
      - id: AssemblerLib.Tensor.op_Addition*
        name: Addition
        nameWithType: Tensor.Addition
        qualifiedName: AssemblerLib.Tensor.Addition
      VB:
      - id: AssemblerLib.Tensor.op_Addition*
        name: Addition
        nameWithType: Tensor.Addition
        qualifiedName: AssemblerLib.Tensor.Addition
    isDefinition: true
    commentId: Overload:AssemblerLib.Tensor.op_Addition
  AssemblerLib.Tensor.op_Subtraction*:
    name:
      CSharp:
      - id: AssemblerLib.Tensor.op_Subtraction*
        name: Subtraction
        nameWithType: Tensor.Subtraction
        qualifiedName: AssemblerLib.Tensor.Subtraction
      VB:
      - id: AssemblerLib.Tensor.op_Subtraction*
        name: Subtraction
        nameWithType: Tensor.Subtraction
        qualifiedName: AssemblerLib.Tensor.Subtraction
    isDefinition: true
    commentId: Overload:AssemblerLib.Tensor.op_Subtraction
  Grasshopper.GUI.Gradient:
    name:
      CSharp:
      - name: Grasshopper.GUI.Gradient
        nameWithType: Grasshopper.GUI.Gradient
        qualifiedName: Grasshopper.GUI.Gradient
        isExternal: true
      VB:
      - name: Grasshopper.GUI.Gradient
        nameWithType: Grasshopper.GUI.Gradient
        qualifiedName: Grasshopper.GUI.Gradient
    isDefinition: true
    commentId: N:Grasshopper.GUI.Gradient
  Grasshopper.GUI.Gradient.GH_Gradient:
    name:
      CSharp:
      - id: Grasshopper.GUI.Gradient.GH_Gradient
        name: GH_Gradient
        nameWithType: GH_Gradient
        qualifiedName: Grasshopper.GUI.Gradient.GH_Gradient
        isExternal: true
      VB:
      - id: Grasshopper.GUI.Gradient.GH_Gradient
        name: GH_Gradient
        nameWithType: GH_Gradient
        qualifiedName: Grasshopper.GUI.Gradient.GH_Gradient
        isExternal: true
    isDefinition: true
    parent: Grasshopper.GUI.Gradient
    commentId: T:Grasshopper.GUI.Gradient.GH_Gradient
  System.Collections.Generic.List{System.Drawing.KnownColor}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Drawing.KnownColor
        name: KnownColor
        nameWithType: KnownColor
        qualifiedName: System.Drawing.KnownColor
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Drawing.KnownColor
        name: KnownColor
        nameWithType: KnownColor
        qualifiedName: System.Drawing.KnownColor
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Drawing.KnownColor}
  AssemblerLib.Utilities.CollisionCheckAssemblage*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.CollisionCheckAssemblage*
        name: CollisionCheckAssemblage
        nameWithType: Utilities.CollisionCheckAssemblage
        qualifiedName: AssemblerLib.Utilities.CollisionCheckAssemblage
      VB:
      - id: AssemblerLib.Utilities.CollisionCheckAssemblage*
        name: CollisionCheckAssemblage
        nameWithType: Utilities.CollisionCheckAssemblage
        qualifiedName: AssemblerLib.Utilities.CollisionCheckAssemblage
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.CollisionCheckAssemblage
  AssemblerLib.Utilities.CollisionCheckAssemblageParallel*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.CollisionCheckAssemblageParallel*
        name: CollisionCheckAssemblageParallel
        nameWithType: Utilities.CollisionCheckAssemblageParallel
        qualifiedName: AssemblerLib.Utilities.CollisionCheckAssemblageParallel
      VB:
      - id: AssemblerLib.Utilities.CollisionCheckAssemblageParallel*
        name: CollisionCheckAssemblageParallel
        nameWithType: Utilities.CollisionCheckAssemblageParallel
        qualifiedName: AssemblerLib.Utilities.CollisionCheckAssemblageParallel
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.CollisionCheckAssemblageParallel
  AssemblerLib.Utilities.CollisionCheckNeighbours*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.CollisionCheckNeighbours*
        name: CollisionCheckNeighbours
        nameWithType: Utilities.CollisionCheckNeighbours
        qualifiedName: AssemblerLib.Utilities.CollisionCheckNeighbours
      VB:
      - id: AssemblerLib.Utilities.CollisionCheckNeighbours*
        name: CollisionCheckNeighbours
        nameWithType: Utilities.CollisionCheckNeighbours
        qualifiedName: AssemblerLib.Utilities.CollisionCheckNeighbours
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.CollisionCheckNeighbours
  AssemblerLib.Utilities.CollisionCheckPair*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.CollisionCheckPair*
        name: CollisionCheckPair
        nameWithType: Utilities.CollisionCheckPair
        qualifiedName: AssemblerLib.Utilities.CollisionCheckPair
      VB:
      - id: AssemblerLib.Utilities.CollisionCheckPair*
        name: CollisionCheckPair
        nameWithType: Utilities.CollisionCheckPair
        qualifiedName: AssemblerLib.Utilities.CollisionCheckPair
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.CollisionCheckPair
  AssemblerLib.Utilities.ObstructionCheckAssemblage*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.ObstructionCheckAssemblage*
        name: ObstructionCheckAssemblage
        nameWithType: Utilities.ObstructionCheckAssemblage
        qualifiedName: AssemblerLib.Utilities.ObstructionCheckAssemblage
      VB:
      - id: AssemblerLib.Utilities.ObstructionCheckAssemblage*
        name: ObstructionCheckAssemblage
        nameWithType: Utilities.ObstructionCheckAssemblage
        qualifiedName: AssemblerLib.Utilities.ObstructionCheckAssemblage
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.ObstructionCheckAssemblage
  AssemblerLib.Utilities.ObstructionCheckList*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.ObstructionCheckList*
        name: ObstructionCheckList
        nameWithType: Utilities.ObstructionCheckList
        qualifiedName: AssemblerLib.Utilities.ObstructionCheckList
      VB:
      - id: AssemblerLib.Utilities.ObstructionCheckList*
        name: ObstructionCheckList
        nameWithType: Utilities.ObstructionCheckList
        qualifiedName: AssemblerLib.Utilities.ObstructionCheckList
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.ObstructionCheckList
  AssemblerLib.Utilities.AbsoluteZCheck*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.AbsoluteZCheck*
        name: AbsoluteZCheck
        nameWithType: Utilities.AbsoluteZCheck
        qualifiedName: AssemblerLib.Utilities.AbsoluteZCheck
      VB:
      - id: AssemblerLib.Utilities.AbsoluteZCheck*
        name: AbsoluteZCheck
        nameWithType: Utilities.AbsoluteZCheck
        qualifiedName: AssemblerLib.Utilities.AbsoluteZCheck
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.AbsoluteZCheck
  AssemblerLib.Utilities.BuildDictionary*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.BuildDictionary*
        name: BuildDictionary
        nameWithType: Utilities.BuildDictionary
        qualifiedName: AssemblerLib.Utilities.BuildDictionary
      VB:
      - id: AssemblerLib.Utilities.BuildDictionary*
        name: BuildDictionary
        nameWithType: Utilities.BuildDictionary
        qualifiedName: AssemblerLib.Utilities.BuildDictionary
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.BuildDictionary
  System.Collections.Generic.HashSet`1:
    name:
      CSharp:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        nameWithType: HashSet
        qualifiedName: System.Collections.Generic.HashSet
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        nameWithType: HashSet
        qualifiedName: System.Collections.Generic.HashSet
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.HashSet`1
  System.Collections.Generic.HashSet{System.Int32}:
    name:
      CSharp:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        nameWithType: HashSet
        qualifiedName: System.Collections.Generic.HashSet
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.HashSet`1
        name: HashSet
        nameWithType: HashSet
        qualifiedName: System.Collections.Generic.HashSet
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.HashSet`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.HashSet{System.Int32}
  AssemblerLib.Utilities.BuildHandlesHashSet*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.BuildHandlesHashSet*
        name: BuildHandlesHashSet
        nameWithType: Utilities.BuildHandlesHashSet
        qualifiedName: AssemblerLib.Utilities.BuildHandlesHashSet
      VB:
      - id: AssemblerLib.Utilities.BuildHandlesHashSet*
        name: BuildHandlesHashSet
        nameWithType: Utilities.BuildHandlesHashSet
        qualifiedName: AssemblerLib.Utilities.BuildHandlesHashSet
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.BuildHandlesHashSet
  AssemblerLib.Utilities.Clone*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.Clone*
        name: Clone
        nameWithType: Utilities.Clone
        qualifiedName: AssemblerLib.Utilities.Clone
      VB:
      - id: AssemblerLib.Utilities.Clone*
        name: Clone
        nameWithType: Utilities.Clone
        qualifiedName: AssemblerLib.Utilities.Clone
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.Clone
  AssemblerLib.Utilities.CloneWithConnectivity*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.CloneWithConnectivity*
        name: CloneWithConnectivity
        nameWithType: Utilities.CloneWithConnectivity
        qualifiedName: AssemblerLib.Utilities.CloneWithConnectivity
      VB:
      - id: AssemblerLib.Utilities.CloneWithConnectivity*
        name: CloneWithConnectivity
        nameWithType: Utilities.CloneWithConnectivity
        qualifiedName: AssemblerLib.Utilities.CloneWithConnectivity
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.CloneWithConnectivity
  AssemblerLib.Utilities.SetCollisionMesh*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.SetCollisionMesh*
        name: SetCollisionMesh
        nameWithType: Utilities.SetCollisionMesh
        qualifiedName: AssemblerLib.Utilities.SetCollisionMesh
      VB:
      - id: AssemblerLib.Utilities.SetCollisionMesh*
        name: SetCollisionMesh
        nameWithType: Utilities.SetCollisionMesh
        qualifiedName: AssemblerLib.Utilities.SetCollisionMesh
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.SetCollisionMesh
  System.Collections.Generic.List{Rhino.Geometry.Line}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Rhino.Geometry.Line
        name: Line
        nameWithType: Line
        qualifiedName: Rhino.Geometry.Line
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Rhino.Geometry.Line
        name: Line
        nameWithType: Line
        qualifiedName: Rhino.Geometry.Line
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Rhino.Geometry.Line}
  AssemblerLib.Utilities.SetSupports*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.SetSupports*
        name: SetSupports
        nameWithType: Utilities.SetSupports
        qualifiedName: AssemblerLib.Utilities.SetSupports
      VB:
      - id: AssemblerLib.Utilities.SetSupports*
        name: SetSupports
        nameWithType: Utilities.SetSupports
        qualifiedName: AssemblerLib.Utilities.SetSupports
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.SetSupports
  AssemblerLib.Utilities.ResetSupports*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.ResetSupports*
        name: ResetSupports
        nameWithType: Utilities.ResetSupports
        qualifiedName: AssemblerLib.Utilities.ResetSupports
      VB:
      - id: AssemblerLib.Utilities.ResetSupports*
        name: ResetSupports
        nameWithType: Utilities.ResetSupports
        qualifiedName: AssemblerLib.Utilities.ResetSupports
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.ResetSupports
  AssemblerLib.Utilities.CheckSupport*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.CheckSupport*
        name: CheckSupport
        nameWithType: Utilities.CheckSupport
        qualifiedName: AssemblerLib.Utilities.CheckSupport
      VB:
      - id: AssemblerLib.Utilities.CheckSupport*
        name: CheckSupport
        nameWithType: Utilities.CheckSupport
        qualifiedName: AssemblerLib.Utilities.CheckSupport
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.CheckSupport
  AssemblerLib.Utilities.SupportIntersect*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.SupportIntersect*
        name: SupportIntersect
        nameWithType: Utilities.SupportIntersect
        qualifiedName: AssemblerLib.Utilities.SupportIntersect
      VB:
      - id: AssemblerLib.Utilities.SupportIntersect*
        name: SupportIntersect
        nameWithType: Utilities.SupportIntersect
        qualifiedName: AssemblerLib.Utilities.SupportIntersect
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.SupportIntersect
  Grasshopper.DataTree{System.String}:
    name:
      CSharp:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Grasshopper.DataTree`1
    parent: Grasshopper
    commentId: T:Grasshopper.DataTree{System.String}
  AssemblerLib.Utilities.HeuristicsRulesFromString*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.HeuristicsRulesFromString*
        name: HeuristicsRulesFromString
        nameWithType: Utilities.HeuristicsRulesFromString
        qualifiedName: AssemblerLib.Utilities.HeuristicsRulesFromString
      VB:
      - id: AssemblerLib.Utilities.HeuristicsRulesFromString*
        name: HeuristicsRulesFromString
        nameWithType: Utilities.HeuristicsRulesFromString
        qualifiedName: AssemblerLib.Utilities.HeuristicsRulesFromString
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.HeuristicsRulesFromString
  AssemblerLib.Utilities.AssemblageFromJSONdump*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.AssemblageFromJSONdump*
        name: AssemblageFromJSONdump
        nameWithType: Utilities.AssemblageFromJSONdump
        qualifiedName: AssemblerLib.Utilities.AssemblageFromJSONdump
      VB:
      - id: AssemblerLib.Utilities.AssemblageFromJSONdump*
        name: AssemblageFromJSONdump
        nameWithType: Utilities.AssemblageFromJSONdump
        qualifiedName: AssemblerLib.Utilities.AssemblageFromJSONdump
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.AssemblageFromJSONdump
  AssemblerLib.Utilities.AssemblageToJSONdump*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.AssemblageToJSONdump*
        name: AssemblageToJSONdump
        nameWithType: Utilities.AssemblageToJSONdump
        qualifiedName: AssemblerLib.Utilities.AssemblageToJSONdump
      VB:
      - id: AssemblerLib.Utilities.AssemblageToJSONdump*
        name: AssemblageToJSONdump
        nameWithType: Utilities.AssemblageToJSONdump
        qualifiedName: AssemblerLib.Utilities.AssemblageToJSONdump
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.AssemblageToJSONdump
  AssemblerLib.Utilities.AssemblageToJSONSmart*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.AssemblageToJSONSmart*
        name: AssemblageToJSONSmart
        nameWithType: Utilities.AssemblageToJSONSmart
        qualifiedName: AssemblerLib.Utilities.AssemblageToJSONSmart
      VB:
      - id: AssemblerLib.Utilities.AssemblageToJSONSmart*
        name: AssemblageToJSONSmart
        nameWithType: Utilities.AssemblageToJSONSmart
        qualifiedName: AssemblerLib.Utilities.AssemblageToJSONSmart
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.AssemblageToJSONSmart
  AssemblerLib.Utilities.ReadFileUnique*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.ReadFileUnique*
        name: ReadFileUnique
        nameWithType: Utilities.ReadFileUnique
        qualifiedName: AssemblerLib.Utilities.ReadFileUnique
      VB:
      - id: AssemblerLib.Utilities.ReadFileUnique*
        name: ReadFileUnique
        nameWithType: Utilities.ReadFileUnique
        qualifiedName: AssemblerLib.Utilities.ReadFileUnique
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.ReadFileUnique
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  AssemblerLib.Utilities.ReadFileByLines*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.ReadFileByLines*
        name: ReadFileByLines
        nameWithType: Utilities.ReadFileByLines
        qualifiedName: AssemblerLib.Utilities.ReadFileByLines
      VB:
      - id: AssemblerLib.Utilities.ReadFileByLines*
        name: ReadFileByLines
        nameWithType: Utilities.ReadFileByLines
        qualifiedName: AssemblerLib.Utilities.ReadFileByLines
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.ReadFileByLines
  AssemblerLib.Utilities.SaveStringsToFile*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.SaveStringsToFile*
        name: SaveStringsToFile
        nameWithType: Utilities.SaveStringsToFile
        qualifiedName: AssemblerLib.Utilities.SaveStringsToFile
      VB:
      - id: AssemblerLib.Utilities.SaveStringsToFile*
        name: SaveStringsToFile
        nameWithType: Utilities.SaveStringsToFile
        qualifiedName: AssemblerLib.Utilities.SaveStringsToFile
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.SaveStringsToFile
  AssemblerLib.Utilities.AppendToFile*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.AppendToFile*
        name: AppendToFile
        nameWithType: Utilities.AppendToFile
        qualifiedName: AssemblerLib.Utilities.AppendToFile
      VB:
      - id: AssemblerLib.Utilities.AppendToFile*
        name: AppendToFile
        nameWithType: Utilities.AppendToFile
        qualifiedName: AssemblerLib.Utilities.AppendToFile
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.AppendToFile
  Grasshopper.Kernel:
    name:
      CSharp:
      - name: Grasshopper.Kernel
        nameWithType: Grasshopper.Kernel
        qualifiedName: Grasshopper.Kernel
        isExternal: true
      VB:
      - name: Grasshopper.Kernel
        nameWithType: Grasshopper.Kernel
        qualifiedName: Grasshopper.Kernel
    isDefinition: true
    commentId: N:Grasshopper.Kernel
  Grasshopper.Kernel.GH_Component:
    name:
      CSharp:
      - id: Grasshopper.Kernel.GH_Component
        name: GH_Component
        nameWithType: GH_Component
        qualifiedName: Grasshopper.Kernel.GH_Component
        isExternal: true
      VB:
      - id: Grasshopper.Kernel.GH_Component
        name: GH_Component
        nameWithType: GH_Component
        qualifiedName: Grasshopper.Kernel.GH_Component
        isExternal: true
    isDefinition: true
    parent: Grasshopper.Kernel
    commentId: T:Grasshopper.Kernel.GH_Component
  AssemblerLib.Utilities.GetGHFilePath*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.GetGHFilePath*
        name: GetGHFilePath
        nameWithType: Utilities.GetGHFilePath
        qualifiedName: AssemblerLib.Utilities.GetGHFilePath
      VB:
      - id: AssemblerLib.Utilities.GetGHFilePath*
        name: GetGHFilePath
        nameWithType: Utilities.GetGHFilePath
        qualifiedName: AssemblerLib.Utilities.GetGHFilePath
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.GetGHFilePath
  AssemblerLib.Utilities.SerializeAssemblage*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.SerializeAssemblage*
        name: SerializeAssemblage
        nameWithType: Utilities.SerializeAssemblage
        qualifiedName: AssemblerLib.Utilities.SerializeAssemblage
      VB:
      - id: AssemblerLib.Utilities.SerializeAssemblage*
        name: SerializeAssemblage
        nameWithType: Utilities.SerializeAssemblage
        qualifiedName: AssemblerLib.Utilities.SerializeAssemblage
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.SerializeAssemblage
  AssemblerLib.Utilities.DeserializeAssemblage*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.DeserializeAssemblage*
        name: DeserializeAssemblage
        nameWithType: Utilities.DeserializeAssemblage
        qualifiedName: AssemblerLib.Utilities.DeserializeAssemblage
      VB:
      - id: AssemblerLib.Utilities.DeserializeAssemblage*
        name: DeserializeAssemblage
        nameWithType: Utilities.DeserializeAssemblage
        qualifiedName: AssemblerLib.Utilities.DeserializeAssemblage
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.DeserializeAssemblage
  AssemblerLib.Utilities.IsPointInMesh*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.IsPointInMesh*
        name: IsPointInMesh
        nameWithType: Utilities.IsPointInMesh
        qualifiedName: AssemblerLib.Utilities.IsPointInMesh
      VB:
      - id: AssemblerLib.Utilities.IsPointInMesh*
        name: IsPointInMesh
        nameWithType: Utilities.IsPointInMesh
        qualifiedName: AssemblerLib.Utilities.IsPointInMesh
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.IsPointInMesh
  AssemblerLib.Utilities.MeshOffsetWeightedAngle*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.MeshOffsetWeightedAngle*
        name: MeshOffsetWeightedAngle
        nameWithType: Utilities.MeshOffsetWeightedAngle
        qualifiedName: AssemblerLib.Utilities.MeshOffsetWeightedAngle
      VB:
      - id: AssemblerLib.Utilities.MeshOffsetWeightedAngle*
        name: MeshOffsetWeightedAngle
        nameWithType: Utilities.MeshOffsetWeightedAngle
        qualifiedName: AssemblerLib.Utilities.MeshOffsetWeightedAngle
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.MeshOffsetWeightedAngle
  AssemblerLib.Utilities.ComputeWeightedNormals*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.ComputeWeightedNormals*
        name: ComputeWeightedNormals
        nameWithType: Utilities.ComputeWeightedNormals
        qualifiedName: AssemblerLib.Utilities.ComputeWeightedNormals
      VB:
      - id: AssemblerLib.Utilities.ComputeWeightedNormals*
        name: ComputeWeightedNormals
        nameWithType: Utilities.ComputeWeightedNormals
        qualifiedName: AssemblerLib.Utilities.ComputeWeightedNormals
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.ComputeWeightedNormals
  Grasshopper.Kernel.Types.GH_Line[]:
    name:
      CSharp:
      - id: Grasshopper.Kernel.Types.GH_Line
        name: GH_Line
        nameWithType: GH_Line
        qualifiedName: Grasshopper.Kernel.Types.GH_Line
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Grasshopper.Kernel.Types.GH_Line
        name: GH_Line
        nameWithType: GH_Line
        qualifiedName: Grasshopper.Kernel.Types.GH_Line
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  AssemblerLib.Utilities.GetSihouette*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.GetSihouette*
        name: GetSihouette
        nameWithType: Utilities.GetSihouette
        qualifiedName: AssemblerLib.Utilities.GetSihouette
      VB:
      - id: AssemblerLib.Utilities.GetSihouette*
        name: GetSihouette
        nameWithType: Utilities.GetSihouette
        qualifiedName: AssemblerLib.Utilities.GetSihouette
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.GetSihouette
  AssemblerLib.Utilities.AverageUnitized*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.AverageUnitized*
        name: AverageUnitized
        nameWithType: Utilities.AverageUnitized
        qualifiedName: AssemblerLib.Utilities.AverageUnitized
      VB:
      - id: AssemblerLib.Utilities.AverageUnitized*
        name: AverageUnitized
        nameWithType: Utilities.AverageUnitized
        qualifiedName: AssemblerLib.Utilities.AverageUnitized
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.AverageUnitized
  AssemblerLib.Utilities.GetUniqueVectors*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.GetUniqueVectors*
        name: GetUniqueVectors
        nameWithType: Utilities.GetUniqueVectors
        qualifiedName: AssemblerLib.Utilities.GetUniqueVectors
      VB:
      - id: AssemblerLib.Utilities.GetUniqueVectors*
        name: GetUniqueVectors
        nameWithType: Utilities.GetUniqueVectors
        qualifiedName: AssemblerLib.Utilities.GetUniqueVectors
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.GetUniqueVectors
  AssemblerLib.Utilities.LerpColor*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.LerpColor*
        name: LerpColor
        nameWithType: Utilities.LerpColor
        qualifiedName: AssemblerLib.Utilities.LerpColor
      VB:
      - id: AssemblerLib.Utilities.LerpColor*
        name: LerpColor
        nameWithType: Utilities.LerpColor
        qualifiedName: AssemblerLib.Utilities.LerpColor
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.LerpColor
  AssemblerLib.Utilities.DegreesToRadians*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.DegreesToRadians*
        name: DegreesToRadians
        nameWithType: Utilities.DegreesToRadians
        qualifiedName: AssemblerLib.Utilities.DegreesToRadians
      VB:
      - id: AssemblerLib.Utilities.DegreesToRadians*
        name: DegreesToRadians
        nameWithType: Utilities.DegreesToRadians
        qualifiedName: AssemblerLib.Utilities.DegreesToRadians
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.DegreesToRadians
  AssemblerLib.Utilities.RadiansToDegrees*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.RadiansToDegrees*
        name: RadiansToDegrees
        nameWithType: Utilities.RadiansToDegrees
        qualifiedName: AssemblerLib.Utilities.RadiansToDegrees
      VB:
      - id: AssemblerLib.Utilities.RadiansToDegrees*
        name: RadiansToDegrees
        nameWithType: Utilities.RadiansToDegrees
        qualifiedName: AssemblerLib.Utilities.RadiansToDegrees
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.RadiansToDegrees
  AssemblerLib.Utilities.NormalizeRange*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.NormalizeRange*
        name: NormalizeRange
        nameWithType: Utilities.NormalizeRange
        qualifiedName: AssemblerLib.Utilities.NormalizeRange
      VB:
      - id: AssemblerLib.Utilities.NormalizeRange*
        name: NormalizeRange
        nameWithType: Utilities.NormalizeRange
        qualifiedName: AssemblerLib.Utilities.NormalizeRange
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.NormalizeRange
  System.Double[][]:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  AssemblerLib.Utilities.NormalizeRanges*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.NormalizeRanges*
        name: NormalizeRanges
        nameWithType: Utilities.NormalizeRanges
        qualifiedName: AssemblerLib.Utilities.NormalizeRanges
      VB:
      - id: AssemblerLib.Utilities.NormalizeRanges*
        name: NormalizeRanges
        nameWithType: Utilities.NormalizeRanges
        qualifiedName: AssemblerLib.Utilities.NormalizeRanges
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.NormalizeRanges
  Grasshopper.DataTree{{T}}:
    name:
      CSharp:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Grasshopper.DataTree`1
        name: DataTree
        nameWithType: DataTree
        qualifiedName: Grasshopper.DataTree
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Grasshopper.DataTree`1
    parent: Grasshopper
    commentId: T:Grasshopper.DataTree{``0}
  '{T}[][]':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  AssemblerLib.Utilities.ToDataTree*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.ToDataTree*
        name: ToDataTree
        nameWithType: Utilities.ToDataTree
        qualifiedName: AssemblerLib.Utilities.ToDataTree
      VB:
      - id: AssemblerLib.Utilities.ToDataTree*
        name: ToDataTree
        nameWithType: Utilities.ToDataTree
        qualifiedName: AssemblerLib.Utilities.ToDataTree
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.ToDataTree
  System.Collections.Generic.List{{T}[]}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{``0[]}
  AssemblerLib.Utilities.ToJaggedArray*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.ToJaggedArray*
        name: ToJaggedArray
        nameWithType: Utilities.ToJaggedArray
        qualifiedName: AssemblerLib.Utilities.ToJaggedArray
      VB:
      - id: AssemblerLib.Utilities.ToJaggedArray*
        name: ToJaggedArray
        nameWithType: Utilities.ToJaggedArray
        qualifiedName: AssemblerLib.Utilities.ToJaggedArray
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.ToJaggedArray
  AssemblerLib.Utilities.ToListOfArrays*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.ToListOfArrays*
        name: ToListOfArrays
        nameWithType: Utilities.ToListOfArrays
        qualifiedName: AssemblerLib.Utilities.ToListOfArrays
      VB:
      - id: AssemblerLib.Utilities.ToListOfArrays*
        name: ToListOfArrays
        nameWithType: Utilities.ToListOfArrays
        qualifiedName: AssemblerLib.Utilities.ToListOfArrays
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.ToListOfArrays
  System.Collections.Generic.Dictionary{{TKey},{TValue}}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  AssemblerLib.Utilities.CloneDictionaryWithValues*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.CloneDictionaryWithValues*
        name: CloneDictionaryWithValues
        nameWithType: Utilities.CloneDictionaryWithValues
        qualifiedName: AssemblerLib.Utilities.CloneDictionaryWithValues
      VB:
      - id: AssemblerLib.Utilities.CloneDictionaryWithValues*
        name: CloneDictionaryWithValues
        nameWithType: Utilities.CloneDictionaryWithValues
        qualifiedName: AssemblerLib.Utilities.CloneDictionaryWithValues
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.CloneDictionaryWithValues
  TKey:
    name:
      CSharp:
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      VB:
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
    isDefinition: true
  '{TKey}':
    name:
      CSharp:
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      VB:
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
    isDefinition: false
    definition: TKey
    commentId: '!:TKey'
  AssemblerLib.Utilities.RenameKey*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.RenameKey*
        name: RenameKey
        nameWithType: Utilities.RenameKey
        qualifiedName: AssemblerLib.Utilities.RenameKey
      VB:
      - id: AssemblerLib.Utilities.RenameKey*
        name: RenameKey
        nameWithType: Utilities.RenameKey
        qualifiedName: AssemblerLib.Utilities.RenameKey
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.RenameKey
  System.Int64:
    name:
      CSharp:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      VB:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int64
  System.Diagnostics:
    name:
      CSharp:
      - name: System.Diagnostics
        nameWithType: System.Diagnostics
        qualifiedName: System.Diagnostics
        isExternal: true
      VB:
      - name: System.Diagnostics
        nameWithType: System.Diagnostics
        qualifiedName: System.Diagnostics
    isDefinition: true
    commentId: N:System.Diagnostics
  System.Diagnostics.Stopwatch:
    name:
      CSharp:
      - id: System.Diagnostics.Stopwatch
        name: Stopwatch
        nameWithType: Stopwatch
        qualifiedName: System.Diagnostics.Stopwatch
        isExternal: true
      VB:
      - id: System.Diagnostics.Stopwatch
        name: Stopwatch
        nameWithType: Stopwatch
        qualifiedName: System.Diagnostics.Stopwatch
        isExternal: true
    isDefinition: true
    parent: System.Diagnostics
    commentId: T:System.Diagnostics.Stopwatch
  AssemblerLib.Utilities.StartWatch*:
    name:
      CSharp:
      - id: AssemblerLib.Utilities.StartWatch*
        name: StartWatch
        nameWithType: Utilities.StartWatch
        qualifiedName: AssemblerLib.Utilities.StartWatch
      VB:
      - id: AssemblerLib.Utilities.StartWatch*
        name: StartWatch
        nameWithType: Utilities.StartWatch
        qualifiedName: AssemblerLib.Utilities.StartWatch
    isDefinition: true
    commentId: Overload:AssemblerLib.Utilities.StartWatch
  AssemblerLib.Utilities:
    name:
      CSharp:
      - id: AssemblerLib.Utilities
        name: Utilities
        nameWithType: Utilities
        qualifiedName: AssemblerLib.Utilities
      VB:
      - id: AssemblerLib.Utilities
        name: Utilities
        nameWithType: Utilities
        qualifiedName: AssemblerLib.Utilities
    isDefinition: true
    commentId: T:AssemblerLib.Utilities
  System.Collections.Generic.List{System.Object}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Object}
  AssemblerLib.XData.#ctor*:
    name:
      CSharp:
      - id: AssemblerLib.XData.#ctor*
        name: XData
        nameWithType: XData.XData
        qualifiedName: AssemblerLib.XData.XData
      VB:
      - id: AssemblerLib.XData.#ctor*
        name: XData
        nameWithType: XData.XData
        qualifiedName: AssemblerLib.XData.XData
    isDefinition: true
    commentId: Overload:AssemblerLib.XData.#ctor
  AssemblerLib.XData:
    name:
      CSharp:
      - id: AssemblerLib.XData
        name: XData
        nameWithType: XData
        qualifiedName: AssemblerLib.XData
      VB:
      - id: AssemblerLib.XData
        name: XData
        nameWithType: XData
        qualifiedName: AssemblerLib.XData
    isDefinition: true
    parent: AssemblerLib
    commentId: T:AssemblerLib.XData
  AssemblerLib.XData.XCopy*:
    name:
      CSharp:
      - id: AssemblerLib.XData.XCopy*
        name: XCopy
        nameWithType: XData.XCopy
        qualifiedName: AssemblerLib.XData.XCopy
      VB:
      - id: AssemblerLib.XData.XCopy*
        name: XCopy
        nameWithType: XData.XCopy
        qualifiedName: AssemblerLib.XData.XCopy
    isDefinition: true
    commentId: Overload:AssemblerLib.XData.XCopy
  AssemblerLib.XData.Transform*:
    name:
      CSharp:
      - id: AssemblerLib.XData.Transform*
        name: Transform
        nameWithType: XData.Transform
        qualifiedName: AssemblerLib.XData.Transform
      VB:
      - id: AssemblerLib.XData.Transform*
        name: Transform
        nameWithType: XData.Transform
        qualifiedName: AssemblerLib.XData.Transform
    isDefinition: true
    commentId: Overload:AssemblerLib.XData.Transform
