using Grasshopper.GUI.Gradient;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;

namespace AssemblerLib.Utils
{
    public static class Constants
    {
        internal const double ObstructionToleranceMultiplier = 5.0;
        internal const double ObstructionRayLength = 1.5;
        internal const double SafeScaleMultiplier = 1.2;
        internal const double CollisionRadiusMultiplier = 2.5;
        // max n. of items before parallelize a loop
        internal const int parallelLimit = 1000;
        /// <summary>
        /// Tolerance from Rhino file
        /// </summary>
        public static readonly double RhinoAbsoluteTolerance = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance;
        /// <summary>
        /// Tolerance squared - for fast neighbour search
        /// </summary>
        public static readonly double RhinoAbsoluteToleranceSquared = Math.Pow(Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance, 2);
        /// <summary>
        /// Offset for Obstruction check ray
        /// </summary>
        internal static readonly double ObstructionRayOffset = ObstructionToleranceMultiplier * RhinoAbsoluteTolerance;

        public static readonly GH_Gradient HistoryGradient = new GH_Gradient(new double[] { 0.0, 0.5, 0.9, 1.0 },
            new Color[] { Color.Black, Color.FromArgb(56, 136, 150), Color.FromArgb(186, 224, 224), Color.White });
        public static readonly GH_Gradient ZHeightGradient = new GH_Gradient(new double[] { 0.0, 0.33, 0.66, 1.0 },
            new Color[] { Color.Black, Color.FromArgb(150, 66, 114), Color.FromArgb(224, 186, 187), Color.White });
        public static readonly GH_Gradient DensityGradient = new GH_Gradient(new double[] { 0.0, 0.5, 1.0 },
            new Color[] { Color.White, Color.SlateGray, Color.DarkSlateGray });
        public static readonly GH_Gradient ReceiverValuesGradient = new GH_Gradient(new double[] { 0.0, 0.5, 1.0 },
            new Color[] { Color.White, Color.Red, Color.DarkRed });
        public static readonly GH_Gradient DiscoGradient = new GH_Gradient(new double[] { 0.0, 1.0 },
            new Color[] { Color.FromArgb(255, 0, 255), Color.FromArgb(0, 255, 255) });

        /// <summary>
        /// <see cref="AssemblyObject"/> Type palette, with up to 24 Colors
        /// </summary>
        /// <remarks>Which are already WAY TOO MANY!!!</remarks>
        public static readonly Color[] AOTypePalette = new Color[] {
        Color.FromArgb(192,57,43), Color.FromArgb(100,100,100), Color.FromArgb(52,152,219), Color.FromArgb(253,188,75),
        Color.FromArgb(155,89,182), Color.FromArgb(46,204,113), Color.FromArgb(49,54,59), Color.FromArgb(231,76,60),
        Color.FromArgb(189,195,199), Color.FromArgb(201,206,59), Color.FromArgb(142,68,173), Color.FromArgb(52,73,94),
        Color.FromArgb(29,153,19), Color.FromArgb(237,21,21), Color.FromArgb(127,140,141), Color.FromArgb(61,174,233),
        Color.FromArgb(243,156,31), Color.FromArgb(41,128,190), Color.FromArgb(35,38,41), Color.FromArgb(252,252,252),
        Color.FromArgb(218,68,83), Color.FromArgb(22,160,133), Color.FromArgb(149,165,166), Color.FromArgb(44,62,80)};

        /// <summary>
        /// Palette for receiver, sender (in this order)
        /// </summary>
        public static readonly Color[] SRPalette = new Color[] { Color.SlateGray, Color.FromArgb(229, 229, 220) };

        /// <summary>
        /// <see cref="Handle"/> Type palette
        /// </summary>
        /// <remarks>see Color Palette.gh file</remarks>
        public static readonly Color[] HTypePalette = new Color[] {
            Color.FromArgb(234,255,232),Color.FromArgb(59,128,240),Color.FromArgb(229,21,31),Color.FromArgb(87,19,83),Color.FromArgb(65,72,26),Color.FromArgb(206,255,106),Color.FromArgb(213,146,204),Color.FromArgb(76,218,118),Color.FromArgb(114,161,171),Color.FromArgb(141,105,223),Color.FromArgb(132,252,49),Color.FromArgb(27,209,69),Color.FromArgb(205,37,255),Color.FromArgb(55,104,177),Color.FromArgb(225,182,118),Color.FromArgb(218,82,224),Color.FromArgb(229,222,47),Color.FromArgb(242,117,150),Color.FromArgb(8,195,21),Color.FromArgb(47,145,95),Color.FromArgb(50,46,207),Color.FromArgb(71,184,24),Color.FromArgb(234,158,67),Color.FromArgb(123,33,211),Color.FromArgb(136,184,59),Color.FromArgb(25,27,144),Color.FromArgb(173,127,112),Color.FromArgb(184,255,183),Color.FromArgb(35,82,109),Color.FromArgb(192,141,32),Color.FromArgb(54,238,227),Color.FromArgb(92,123,61),Color.FromArgb(88,16,147),Color.FromArgb(223,77,78),Color.FromArgb(100,167,249),Color.FromArgb(229,222,175),Color.FromArgb(104,76,128),Color.FromArgb(229,105,9),Color.FromArgb(117,227,230),Color.FromArgb(231,40,139),Color.FromArgb(147,76,50),Color.FromArgb(21,175,230),Color.FromArgb(159,226,153),Color.FromArgb(25,34,64),Color.FromArgb(163,156,253),Color.FromArgb(38,185,166),Color.FromArgb(167,65,131),Color.FromArgb(27,122,26),Color.FromArgb(198,209,236)
        };

        /// <summary>
        /// Known Colors palette as a List
        /// </summary>
        /// <remarks>see [here](https://www.codeproject.com/Questions/826358/How-to-choose-a-random-color-from-System-Drawing-C)</remarks>
        public static readonly List<KnownColor> KnownColorList = Enum.GetValues(typeof(KnownColor)).Cast<KnownColor>().ToList().GetRange(27, 139);//.Shuffle(0).ToList(); // randomize colors to avoid similar neighbours
        // GetRange because known colors start from 27 (AliceBlue) and end at 166 (YellowGreen)

        /// <summary>
        /// Cosine LUT (0-359 values)
        /// </summary>
        public static readonly double[] CosLUT = new double[] { 1, 0.999848, 0.999391, 0.99863, 0.997564, 0.996195, 0.994522, 0.992546, 0.990268, 0.987688, 0.984808, 0.981627, 0.978148, 0.97437, 0.970296, 0.965926, 0.961262, 0.956305, 0.951057, 0.945519, 0.939693, 0.93358, 0.927184, 0.920505, 0.913545, 0.906308, 0.898794, 0.891007, 0.882948, 0.87462, 0.866025, 0.857167, 0.848048, 0.838671, 0.829038, 0.819152, 0.809017, 0.798636, 0.788011, 0.777146, 0.766044, 0.75471, 0.743145, 0.731354, 0.71934, 0.707107, 0.694658, 0.681998, 0.669131, 0.656059, 0.642788, 0.62932, 0.615661, 0.601815, 0.587785, 0.573576, 0.559193, 0.544639, 0.529919, 0.515038, 0.5, 0.48481, 0.469472, 0.45399, 0.438371, 0.422618, 0.406737, 0.390731, 0.374607, 0.358368, 0.34202, 0.325568, 0.309017, 0.292372, 0.275637, 0.258819, 0.241922, 0.224951, 0.207912, 0.190809, 0.173648, 0.156434, 0.139173, 0.121869, 0.104528, 0.087156, 0.069756, 0.052336, 0.034899, 0.017452, 0, -0.017452, -0.034899, -0.052336, -0.069756, -0.087156, -0.104528, -0.121869, -0.139173, -0.156434, -0.173648, -0.190809, -0.207912, -0.224951, -0.241922, -0.258819, -0.275637, -0.292372, -0.309017, -0.325568, -0.34202, -0.358368, -0.374607, -0.390731, -0.406737, -0.422618, -0.438371, -0.45399, -0.469472, -0.48481, -0.5, -0.515038, -0.529919, -0.544639, -0.559193, -0.573576, -0.587785, -0.601815, -0.615661, -0.62932, -0.642788, -0.656059, -0.669131, -0.681998, -0.694658, -0.707107, -0.71934, -0.731354, -0.743145, -0.75471, -0.766044, -0.777146, -0.788011, -0.798636, -0.809017, -0.819152, -0.829038, -0.838671, -0.848048, -0.857167, -0.866025, -0.87462, -0.882948, -0.891007, -0.898794, -0.906308, -0.913545, -0.920505, -0.927184, -0.93358, -0.939693, -0.945519, -0.951057, -0.956305, -0.961262, -0.965926, -0.970296, -0.97437, -0.978148, -0.981627, -0.984808, -0.987688, -0.990268, -0.992546, -0.994522, -0.996195, -0.997564, -0.99863, -0.999391, -0.999848, -1, -0.999848, -0.999391, -0.99863, -0.997564, -0.996195, -0.994522, -0.992546, -0.990268, -0.987688, -0.984808, -0.981627, -0.978148, -0.97437, -0.970296, -0.965926, -0.961262, -0.956305, -0.951057, -0.945519, -0.939693, -0.93358, -0.927184, -0.920505, -0.913545, -0.906308, -0.898794, -0.891007, -0.882948, -0.87462, -0.866025, -0.857167, -0.848048, -0.838671, -0.829038, -0.819152, -0.809017, -0.798636, -0.788011, -0.777146, -0.766044, -0.75471, -0.743145, -0.731354, -0.71934, -0.707107, -0.694658, -0.681998, -0.669131, -0.656059, -0.642788, -0.62932, -0.615661, -0.601815, -0.587785, -0.573576, -0.559193, -0.544639, -0.529919, -0.515038, -0.5, -0.48481, -0.469472, -0.45399, -0.438371, -0.422618, -0.406737, -0.390731, -0.374607, -0.358368, -0.34202, -0.325568, -0.309017, -0.292372, -0.275637, -0.258819, -0.241922, -0.224951, -0.207912, -0.190809, -0.173648, -0.156434, -0.139173, -0.121869, -0.104528, -0.087156, -0.069756, -0.052336, -0.034899, -0.017452, 0, 0.017452, 0.034899, 0.052336, 0.069756, 0.087156, 0.104528, 0.121869, 0.139173, 0.156434, 0.173648, 0.190809, 0.207912, 0.224951, 0.241922, 0.258819, 0.275637, 0.292372, 0.309017, 0.325568, 0.34202, 0.358368, 0.374607, 0.390731, 0.406737, 0.422618, 0.438371, 0.45399, 0.469472, 0.48481, 0.5, 0.515038, 0.529919, 0.544639, 0.559193, 0.573576, 0.587785, 0.601815, 0.615661, 0.62932, 0.642788, 0.656059, 0.669131, 0.681998, 0.694658, 0.707107, 0.71934, 0.731354, 0.743145, 0.75471, 0.766044, 0.777146, 0.788011, 0.798636, 0.809017, 0.819152, 0.829038, 0.838671, 0.848048, 0.857167, 0.866025, 0.87462, 0.882948, 0.891007, 0.898794, 0.906308, 0.913545, 0.920505, 0.927184, 0.93358, 0.939693, 0.945519, 0.951057, 0.956305, 0.961262, 0.965926, 0.970296, 0.97437, 0.978148, 0.981627, 0.984808, 0.987688, 0.990268, 0.992546, 0.994522, 0.996195, 0.997564, 0.99863, 0.999391, 0.999848};

        /// <summary>
        /// Sine LUT (0-359 values)
        /// </summary>
        public static readonly double[] SinLUT = new double[] {0,0.017452,0.034899,0.052336,0.069756,0.087156,0.104528,0.121869,0.139173,0.156434,0.173648,0.190809,0.207912,0.224951,0.241922,0.258819,0.275637,0.292372,0.309017,0.325568,0.34202,0.358368,0.374607,0.390731,0.406737,0.422618,0.438371,0.45399,0.469472,0.48481,0.5,0.515038,0.529919,0.544639,0.559193,0.573576,0.587785,0.601815,0.615661,0.62932,0.642788,0.656059,0.669131,0.681998,0.694658,0.707107,0.71934,0.731354,0.743145,0.75471,0.766044,0.777146,0.788011,0.798636,0.809017,0.819152,0.829038,0.838671,0.848048,0.857167,0.866025,0.87462,0.882948,0.891007,0.898794,0.906308,0.913545,0.920505,0.927184,0.93358,0.939693,0.945519,0.951057,0.956305,0.961262,0.965926,0.970296,0.97437,0.978148,0.981627,0.984808,0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.99863,0.999391,0.999848,1,0.999848,0.999391,0.99863,0.997564,0.996195,0.994522,0.992546,0.990268,0.987688,0.984808,0.981627,0.978148,0.97437,0.970296,0.965926,0.961262,0.956305,0.951057,0.945519,0.939693,0.93358,0.927184,0.920505,0.913545,0.906308,0.898794,0.891007,0.882948,0.87462,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152,0.809017,0.798636,0.788011,0.777146,0.766044,0.75471,0.743145,0.731354,0.71934,0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.62932,0.615661,0.601815,0.587785,0.573576,0.559193,0.544639,0.529919,0.515038,0.5,0.48481,0.469472,0.45399,0.438371,0.422618,0.406737,0.390731,0.374607,0.358368,0.34202,0.325568,0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648,0.156434,0.139173,0.121869,0.104528,0.087156,0.069756,0.052336,0.034899,0.017452,0,-0.017452,-0.034899,-0.052336,-0.069756,-0.087156,-0.104528,-0.121869,-0.139173,-0.156434,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819,-0.275637,-0.292372,-0.309017,-0.325568,-0.34202,-0.358368,-0.374607,-0.390731,-0.406737,-0.422618,-0.438371,-0.45399,-0.469472,-0.48481,-0.5,-0.515038,-0.529919,-0.544639,-0.559193,-0.573576,-0.587785,-0.601815,-0.615661,-0.62932,-0.642788,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.71934,-0.731354,-0.743145,-0.75471,-0.766044,-0.777146,-0.788011,-0.798636,-0.809017,-0.819152,-0.829038,-0.838671,-0.848048,-0.857167,-0.866025,-0.87462,-0.882948,-0.891007,-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.93358,-0.939693,-0.945519,-0.951057,-0.956305,-0.961262,-0.965926,-0.970296,-0.97437,-0.978148,-0.981627,-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.99863,-0.999391,-0.999848,-1,-0.999848,-0.999391,-0.99863,-0.997564,-0.996195,-0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.97437,-0.970296,-0.965926,-0.961262,-0.956305,-0.951057,-0.945519,-0.939693,-0.93358,-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891007,-0.882948,-0.87462,-0.866025,-0.857167,-0.848048,-0.838671,-0.829038,-0.819152,-0.809017,-0.798636,-0.788011,-0.777146,-0.766044,-0.75471,-0.743145,-0.731354,-0.71934,-0.707107,-0.694658,-0.681998,-0.669131,-0.656059,-0.642788,-0.62932,-0.615661,-0.601815,-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,-0.515038,-0.5,-0.48481,-0.469472,-0.45399,-0.438371,-0.422618,-0.406737,-0.390731,-0.374607,-0.358368,-0.34202,-0.325568,-0.309017,-0.292372,-0.275637,-0.258819,-0.241922,-0.224951,-0.207912,-0.190809,-0.173648,-0.156434,-0.139173,-0.121869,-0.104528,-0.087156,-0.069756,-0.052336,-0.034899,-0.017452};
    }
}
